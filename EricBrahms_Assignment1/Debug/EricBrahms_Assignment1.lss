
EricBrahms_Assignment1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000049f4  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000049f4  000049f4  000149f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008a4  20000000  000049fc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000009c  200008a4  000052a0  000208a4  2**2
                  ALLOC
  4 .stack        00001000  20000940  0000533c  000208a4  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000208a4  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000208ce  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000b2bb  00000000  00000000  00020927  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001a08  00000000  00000000  0002bbe2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000688  00000000  00000000  0002d5ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000005a8  00000000  00000000  0002dc72  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002e258  00000000  00000000  0002e21a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000baa2  00000000  00000000  0005c472  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000e6431  00000000  00000000  00067f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001ac4  00000000  00000000  0014e348  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00003f3e  00000000  00000000  0014fe0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
       0:	20001940 	.word	0x20001940
       4:	000013dd 	.word	0x000013dd
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
       8:	000013d9 	.word	0x000013d9
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
       c:	000013d9 	.word	0x000013d9
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
      10:	000013d9 	.word	0x000013d9
		if (cpu_irq_is_enabled()) {
			cpu_irq_disable();
      14:	000013d9 	.word	0x000013d9
			cpu_irq_prev_interrupt_state = true;
      18:	000013d9 	.word	0x000013d9
	...
			cpu_irq_prev_interrupt_state = false;
		}

	}

	cpu_irq_critical_section_counter++;
      2c:	000013d9 	.word	0x000013d9
      30:	000013d9 	.word	0x000013d9
      34:	00000000 	.word	0x00000000
      38:	000013d9 	.word	0x000013d9
      3c:	000013d9 	.word	0x000013d9
      40:	000013d9 	.word	0x000013d9
      44:	000013d9 	.word	0x000013d9
      48:	000013d9 	.word	0x000013d9
      4c:	000013d9 	.word	0x000013d9
      50:	000013d9 	.word	0x000013d9
      54:	000013d9 	.word	0x000013d9
      58:	000013d9 	.word	0x000013d9
      5c:	000013d9 	.word	0x000013d9
      60:	000013d9 	.word	0x000013d9
      64:	000013d9 	.word	0x000013d9
      68:	000013d9 	.word	0x000013d9
      6c:	000013d9 	.word	0x000013d9
      70:	000013d9 	.word	0x000013d9
      74:	000013d9 	.word	0x000013d9
      78:	000013d9 	.word	0x000013d9
      7c:	000013d9 	.word	0x000013d9
      80:	000013d9 	.word	0x000013d9
      84:	000013d9 	.word	0x000013d9
      88:	000013d9 	.word	0x000013d9
      8c:	000013d9 	.word	0x000013d9
      90:	000013d9 	.word	0x000013d9
      94:	000013d9 	.word	0x000013d9
      98:	000013d9 	.word	0x000013d9
      9c:	000013d9 	.word	0x000013d9
      a0:	000013d9 	.word	0x000013d9
      a4:	000004a5 	.word	0x000004a5
      a8:	000004b5 	.word	0x000004b5
      ac:	000004c9 	.word	0x000004c9
      b0:	000004dd 	.word	0x000004dd
      b4:	000004f1 	.word	0x000004f1
      b8:	00000501 	.word	0x00000501
      bc:	00000515 	.word	0x00000515
      c0:	00000529 	.word	0x00000529
      c4:	0000053d 	.word	0x0000053d
      c8:	0000054d 	.word	0x0000054d
      cc:	00000561 	.word	0x00000561
      d0:	00000575 	.word	0x00000575
      d4:	000013d9 	.word	0x000013d9
      d8:	000013d9 	.word	0x000013d9
      dc:	000013d9 	.word	0x000013d9
      e0:	000013d9 	.word	0x000013d9
      e4:	000013d9 	.word	0x000013d9
      e8:	000013d9 	.word	0x000013d9
      ec:	000013d9 	.word	0x000013d9
      f0:	000013d9 	.word	0x000013d9
      f4:	000013d9 	.word	0x000013d9
      f8:	000013d9 	.word	0x000013d9
      fc:	000013d9 	.word	0x000013d9
     100:	000013d9 	.word	0x000013d9
     104:	000013d9 	.word	0x000013d9
     108:	000013d9 	.word	0x000013d9
     10c:	000013d9 	.word	0x000013d9
     110:	000013d9 	.word	0x000013d9
     114:	000013d9 	.word	0x000013d9
     118:	000013d9 	.word	0x000013d9
     11c:	000013d9 	.word	0x000013d9
     120:	000013d9 	.word	0x000013d9
     124:	000013d9 	.word	0x000013d9
     128:	000013d9 	.word	0x000013d9
     12c:	000013d9 	.word	0x000013d9
     130:	000013d9 	.word	0x000013d9
     134:	000013d9 	.word	0x000013d9
     138:	000013d9 	.word	0x000013d9
     13c:	000013d9 	.word	0x000013d9
     140:	000013d9 	.word	0x000013d9
     144:	000013d9 	.word	0x000013d9
     148:	000013d9 	.word	0x000013d9
     14c:	000013d9 	.word	0x000013d9
     150:	000013d9 	.word	0x000013d9
     154:	000013d9 	.word	0x000013d9
     158:	000013d9 	.word	0x000013d9
     15c:	000013d9 	.word	0x000013d9
     160:	000013d9 	.word	0x000013d9
     164:	000013d9 	.word	0x000013d9
     168:	000013d9 	.word	0x000013d9
     16c:	000013d9 	.word	0x000013d9
     170:	000013d9 	.word	0x000013d9
     174:	000013d9 	.word	0x000013d9
     178:	000013d9 	.word	0x000013d9
     17c:	000013d9 	.word	0x000013d9

00000180 <__do_global_dtors_aux>:
     180:	b510      	push	{r4, lr}
     182:	4c05      	ldr	r4, [pc, #20]	; (198 <__do_global_dtors_aux+0x18>)
     184:	7823      	ldrb	r3, [r4, #0]
     186:	b933      	cbnz	r3, 196 <__do_global_dtors_aux+0x16>
     188:	4b04      	ldr	r3, [pc, #16]	; (19c <__do_global_dtors_aux+0x1c>)
     18a:	b113      	cbz	r3, 192 <__do_global_dtors_aux+0x12>
     18c:	4804      	ldr	r0, [pc, #16]	; (1a0 <__do_global_dtors_aux+0x20>)
     18e:	f3af 8000 	nop.w
     192:	2301      	movs	r3, #1
     194:	7023      	strb	r3, [r4, #0]
     196:	bd10      	pop	{r4, pc}
     198:	200008a4 	.word	0x200008a4
     19c:	00000000 	.word	0x00000000
     1a0:	000049fc 	.word	0x000049fc

000001a4 <frame_dummy>:
     1a4:	4b08      	ldr	r3, [pc, #32]	; (1c8 <frame_dummy+0x24>)
     1a6:	b510      	push	{r4, lr}
     1a8:	b11b      	cbz	r3, 1b2 <frame_dummy+0xe>
     1aa:	4908      	ldr	r1, [pc, #32]	; (1cc <frame_dummy+0x28>)
     1ac:	4808      	ldr	r0, [pc, #32]	; (1d0 <frame_dummy+0x2c>)
     1ae:	f3af 8000 	nop.w
     1b2:	4808      	ldr	r0, [pc, #32]	; (1d4 <frame_dummy+0x30>)
     1b4:	6803      	ldr	r3, [r0, #0]
     1b6:	b903      	cbnz	r3, 1ba <frame_dummy+0x16>
     1b8:	bd10      	pop	{r4, pc}
     1ba:	4b07      	ldr	r3, [pc, #28]	; (1d8 <frame_dummy+0x34>)
     1bc:	2b00      	cmp	r3, #0
     1be:	d0fb      	beq.n	1b8 <frame_dummy+0x14>
     1c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     1c4:	4718      	bx	r3
     1c6:	bf00      	nop
     1c8:	00000000 	.word	0x00000000
     1cc:	200008a8 	.word	0x200008a8
     1d0:	000049fc 	.word	0x000049fc
     1d4:	000049fc 	.word	0x000049fc
     1d8:	00000000 	.word	0x00000000

000001dc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
     1dc:	b990      	cbnz	r0, 204 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     1de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     1e2:	460c      	mov	r4, r1
     1e4:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     1e6:	2a00      	cmp	r2, #0
     1e8:	dd0f      	ble.n	20a <_read+0x2e>
     1ea:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     1ec:	4e08      	ldr	r6, [pc, #32]	; (210 <_read+0x34>)
     1ee:	4d09      	ldr	r5, [pc, #36]	; (214 <_read+0x38>)
     1f0:	6830      	ldr	r0, [r6, #0]
     1f2:	4621      	mov	r1, r4
     1f4:	682b      	ldr	r3, [r5, #0]
     1f6:	4798      	blx	r3
		ptr++;
     1f8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     1fa:	42a7      	cmp	r7, r4
     1fc:	d1f8      	bne.n	1f0 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
     1fe:	4640      	mov	r0, r8
     200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     204:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
     208:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     20a:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
     20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     210:	20000938 	.word	0x20000938
     214:	20000930 	.word	0x20000930

00000218 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
     218:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
     21a:	010c      	lsls	r4, r1, #4
     21c:	4294      	cmp	r4, r2
     21e:	d90f      	bls.n	240 <usart_set_async_baudrate+0x28>
     220:	e01a      	b.n	258 <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
     222:	6841      	ldr	r1, [r0, #4]
     224:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
     228:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
     22a:	0412      	lsls	r2, r2, #16
     22c:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
     230:	431a      	orrs	r2, r3
     232:	6202      	str	r2, [r0, #32]

	return 0;
     234:	2000      	movs	r0, #0
     236:	e01c      	b.n	272 <usart_set_async_baudrate+0x5a>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
     238:	2001      	movs	r0, #1
     23a:	e01a      	b.n	272 <usart_set_async_baudrate+0x5a>
     23c:	2001      	movs	r0, #1
     23e:	e018      	b.n	272 <usart_set_async_baudrate+0x5a>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
     240:	0863      	lsrs	r3, r4, #1
     242:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
     246:	fbb2 f2f4 	udiv	r2, r2, r4
	cd = cd_fp >> 3;
     24a:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
     24c:	1e5c      	subs	r4, r3, #1
     24e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
     252:	428c      	cmp	r4, r1
     254:	d9e9      	bls.n	22a <usart_set_async_baudrate+0x12>
     256:	e7ef      	b.n	238 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
     258:	00c9      	lsls	r1, r1, #3
     25a:	084b      	lsrs	r3, r1, #1
     25c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
     260:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
     264:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
     266:	1e5c      	subs	r4, r3, #1
     268:	f64f 71fe 	movw	r1, #65534	; 0xfffe
     26c:	428c      	cmp	r4, r1
     26e:	d8e5      	bhi.n	23c <usart_set_async_baudrate+0x24>
     270:	e7d7      	b.n	222 <usart_set_async_baudrate+0xa>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
     272:	bc10      	pop	{r4}
     274:	4770      	bx	lr
     276:	bf00      	nop

00000278 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
     278:	4b0a      	ldr	r3, [pc, #40]	; (2a4 <usart_reset+0x2c>)
     27a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
     27e:	2300      	movs	r3, #0
     280:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
     282:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
     284:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
     286:	2388      	movs	r3, #136	; 0x88
     288:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
     28a:	2324      	movs	r3, #36	; 0x24
     28c:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
     28e:	f44f 7380 	mov.w	r3, #256	; 0x100
     292:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
     294:	f44f 2300 	mov.w	r3, #524288	; 0x80000
     298:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_DTRDIS;
     29a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
     29e:	6003      	str	r3, [r0, #0]
     2a0:	4770      	bx	lr
     2a2:	bf00      	nop
     2a4:	55534100 	.word	0x55534100

000002a8 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
     2a8:	b570      	push	{r4, r5, r6, lr}
     2aa:	4605      	mov	r5, r0
     2ac:	460c      	mov	r4, r1
     2ae:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
     2b0:	4b0f      	ldr	r3, [pc, #60]	; (2f0 <usart_init_rs232+0x48>)
     2b2:	4798      	blx	r3

	ul_reg_val = 0;
     2b4:	2200      	movs	r2, #0
     2b6:	4b0f      	ldr	r3, [pc, #60]	; (2f4 <usart_init_rs232+0x4c>)
     2b8:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
     2ba:	b19c      	cbz	r4, 2e4 <usart_init_rs232+0x3c>
     2bc:	4632      	mov	r2, r6
     2be:	6821      	ldr	r1, [r4, #0]
     2c0:	4628      	mov	r0, r5
     2c2:	4b0d      	ldr	r3, [pc, #52]	; (2f8 <usart_init_rs232+0x50>)
     2c4:	4798      	blx	r3
     2c6:	4602      	mov	r2, r0
     2c8:	b970      	cbnz	r0, 2e8 <usart_init_rs232+0x40>
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
     2ca:	6861      	ldr	r1, [r4, #4]
     2cc:	68a3      	ldr	r3, [r4, #8]
     2ce:	4319      	orrs	r1, r3
     2d0:	6923      	ldr	r3, [r4, #16]
     2d2:	4319      	orrs	r1, r3
     2d4:	68e3      	ldr	r3, [r4, #12]
     2d6:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
     2d8:	4906      	ldr	r1, [pc, #24]	; (2f4 <usart_init_rs232+0x4c>)
     2da:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
     2dc:	6869      	ldr	r1, [r5, #4]
     2de:	430b      	orrs	r3, r1
     2e0:	606b      	str	r3, [r5, #4]

	return 0;
     2e2:	e002      	b.n	2ea <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
     2e4:	2201      	movs	r2, #1
     2e6:	e000      	b.n	2ea <usart_init_rs232+0x42>
     2e8:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
     2ea:	4610      	mov	r0, r2
     2ec:	bd70      	pop	{r4, r5, r6, pc}
     2ee:	bf00      	nop
     2f0:	00000279 	.word	0x00000279
     2f4:	200008c0 	.word	0x200008c0
     2f8:	00000219 	.word	0x00000219

000002fc <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
     2fc:	2340      	movs	r3, #64	; 0x40
     2fe:	6003      	str	r3, [r0, #0]
     300:	4770      	bx	lr
     302:	bf00      	nop

00000304 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
     304:	2310      	movs	r3, #16
     306:	6003      	str	r3, [r0, #0]
     308:	4770      	bx	lr
     30a:	bf00      	nop

0000030c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
     30c:	6943      	ldr	r3, [r0, #20]
     30e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
     312:	bf1d      	ittte	ne
     314:	f3c1 0108 	ubfxne	r1, r1, #0, #9
     318:	61c1      	strne	r1, [r0, #28]
	return 0;
     31a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
     31c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
     31e:	4770      	bx	lr

00000320 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
     320:	6943      	ldr	r3, [r0, #20]
     322:	f013 0f01 	tst.w	r3, #1
     326:	d005      	beq.n	334 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
     328:	6983      	ldr	r3, [r0, #24]
     32a:	f3c3 0308 	ubfx	r3, r3, #0, #9
     32e:	600b      	str	r3, [r1, #0]

	return 0;
     330:	2000      	movs	r0, #0
     332:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
     334:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
     336:	4770      	bx	lr

00000338 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     338:	3801      	subs	r0, #1
     33a:	2802      	cmp	r0, #2
     33c:	d815      	bhi.n	36a <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
     33e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     342:	460e      	mov	r6, r1
     344:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     346:	b19a      	cbz	r2, 370 <_write+0x38>
     348:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
     34a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 384 <_write+0x4c>
     34e:	4f0c      	ldr	r7, [pc, #48]	; (380 <_write+0x48>)
     350:	f8d8 0000 	ldr.w	r0, [r8]
     354:	f815 1b01 	ldrb.w	r1, [r5], #1
     358:	683b      	ldr	r3, [r7, #0]
     35a:	4798      	blx	r3
     35c:	2800      	cmp	r0, #0
     35e:	db0a      	blt.n	376 <_write+0x3e>
     360:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     362:	3c01      	subs	r4, #1
     364:	d1f4      	bne.n	350 <_write+0x18>
     366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     36a:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
     36e:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     370:	2000      	movs	r0, #0
     372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     376:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
     37a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     37e:	bf00      	nop
     380:	20000934 	.word	0x20000934
     384:	20000938 	.word	0x20000938

00000388 <gpio_common_handler>:

/**
 * Common GPIO handler.
 */
static void gpio_common_handler(uint32_t port_id, uint32_t port_mask)
{
     388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     38c:	b083      	sub	sp, #12
     38e:	9101      	str	r1, [sp, #4]
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[port_id]);
     390:	0247      	lsls	r7, r0, #9
     392:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
     396:	f507 2761 	add.w	r7, r7, #921600	; 0xe1000
	uint32_t i;
	uint32_t int_flags;
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;
     39a:	f8d7 a0d0 	ldr.w	sl, [r7, #208]	; 0xd0

	for (i = 0; i < gpio_nb_sources; i++) {
     39e:	4b14      	ldr	r3, [pc, #80]	; (3f0 <gpio_common_handler+0x68>)
     3a0:	681b      	ldr	r3, [r3, #0]
     3a2:	b1e3      	cbz	r3, 3de <gpio_common_handler+0x56>
     3a4:	4606      	mov	r6, r0
     3a6:	4d13      	ldr	r5, [pc, #76]	; (3f4 <gpio_common_handler+0x6c>)
     3a8:	2400      	movs	r4, #0
		pin = gpio_int_sources[i].pin;
     3aa:	46a9      	mov	r9, r5
		if ((ioport_pin_to_port_id(pin) == port_id) &&
     3ac:	f04f 0b01 	mov.w	fp, #1
	uint32_t int_flags;
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;

	for (i = 0; i < gpio_nb_sources; i++) {
     3b0:	f8df 803c 	ldr.w	r8, [pc, #60]	; 3f0 <gpio_common_handler+0x68>
		pin = gpio_int_sources[i].pin;
     3b4:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
		if ((ioport_pin_to_port_id(pin) == port_id) &&
     3b8:	ebb6 1f53 	cmp.w	r6, r3, lsr #5
     3bc:	d109      	bne.n	3d2 <gpio_common_handler+0x4a>
     3be:	f003 031f 	and.w	r3, r3, #31
     3c2:	fa0b f303 	lsl.w	r3, fp, r3
     3c6:	ea13 0f0a 	tst.w	r3, sl
     3ca:	d002      	beq.n	3d2 <gpio_common_handler+0x4a>
				(ioport_pin_to_mask(pin) & int_flags)) {
			if (gpio_int_sources[i].callback != NULL) {
     3cc:	686b      	ldr	r3, [r5, #4]
     3ce:	b103      	cbz	r3, 3d2 <gpio_common_handler+0x4a>
				gpio_int_sources[i].callback();
     3d0:	4798      	blx	r3
	uint32_t int_flags;
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;

	for (i = 0; i < gpio_nb_sources; i++) {
     3d2:	3401      	adds	r4, #1
     3d4:	3508      	adds	r5, #8
     3d6:	f8d8 3000 	ldr.w	r3, [r8]
     3da:	42a3      	cmp	r3, r4
     3dc:	d8ea      	bhi.n	3b4 <gpio_common_handler+0x2c>
				Assert(false); /* Catch unexpected interrupt */
			}
		}
	}

	gpio_port->GPIO_IFRC = (int_flags & port_mask);
     3de:	9b01      	ldr	r3, [sp, #4]
     3e0:	ea0a 0303 	and.w	r3, sl, r3
     3e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
}
     3e8:	b003      	add	sp, #12
     3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     3ee:	bf00      	nop
     3f0:	200008c4 	.word	0x200008c4
     3f4:	200008c8 	.word	0x200008c8

000003f8 <gpio_set_pin_callback>:
 * \retval false Wrong parameters or maximum number of interrupt
 *                  sources has been exceeding
 */
bool gpio_set_pin_callback(ioport_pin_t pin, gpio_pin_callback_t callback,
		uint8_t irq_level)
{
     3f8:	b470      	push	{r4, r5, r6}
	int8_t i;
	int8_t irq_line;

	if (gpio_nb_sources >= GPIO_MAX_INTERRUPT_SOURCES) {
     3fa:	4b27      	ldr	r3, [pc, #156]	; (498 <gpio_set_pin_callback+0xa0>)
     3fc:	681c      	ldr	r4, [r3, #0]
     3fe:	2c05      	cmp	r4, #5
     400:	d847      	bhi.n	492 <gpio_set_pin_callback+0x9a>
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
     402:	f000 051f 	and.w	r5, r0, #31
     406:	2301      	movs	r3, #1
     408:	40ab      	lsls	r3, r5
	 *
	 * \note Grouping interrupt generators into groups of eight, four
	 * different interrupt handlers can be installed for each GPIO port.
	 */
	for (i = 0; i < 4; i++) {
		if (ioport_pin_to_mask(pin) & (GPIO_INT_GROUP_MASK << (i * 8))) {
     40a:	f013 0fff 	tst.w	r3, #255	; 0xff
     40e:	d110      	bne.n	432 <gpio_set_pin_callback+0x3a>
     410:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
     414:	d109      	bne.n	42a <gpio_set_pin_callback+0x32>
     416:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
     41a:	d108      	bne.n	42e <gpio_set_pin_callback+0x36>
     41c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
	 * Get IRQ line for the given pin.
	 *
	 * \note Grouping interrupt generators into groups of eight, four
	 * different interrupt handlers can be installed for each GPIO port.
	 */
	for (i = 0; i < 4; i++) {
     420:	2b00      	cmp	r3, #0
     422:	bf0c      	ite	eq
     424:	2304      	moveq	r3, #4
     426:	2303      	movne	r3, #3
     428:	e004      	b.n	434 <gpio_set_pin_callback+0x3c>
     42a:	2301      	movs	r3, #1
     42c:	e002      	b.n	434 <gpio_set_pin_callback+0x3c>
     42e:	2302      	movs	r3, #2
     430:	e000      	b.n	434 <gpio_set_pin_callback+0x3c>
		if (ioport_pin_to_mask(pin) & (GPIO_INT_GROUP_MASK << (i * 8))) {
     432:	2300      	movs	r3, #0
			break;
		}
	}
	irq_line = GPIO_0_IRQn + ioport_pin_to_port_id(pin) * 4 + i;
     434:	0945      	lsrs	r5, r0, #5
     436:	eb03 0385 	add.w	r3, r3, r5, lsl #2
     43a:	3319      	adds	r3, #25
     43c:	b2db      	uxtb	r3, r3
     43e:	b25d      	sxtb	r5, r3

	gpio_int_sources[gpio_nb_sources].pin = pin;
     440:	4e16      	ldr	r6, [pc, #88]	; (49c <gpio_set_pin_callback+0xa4>)
     442:	f846 0034 	str.w	r0, [r6, r4, lsl #3]
	gpio_int_sources[gpio_nb_sources].callback = callback;
     446:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
     44a:	6071      	str	r1, [r6, #4]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     44c:	f003 011f 	and.w	r1, r3, #31
     450:	2001      	movs	r0, #1
     452:	4088      	lsls	r0, r1
     454:	0969      	lsrs	r1, r5, #5
     456:	0089      	lsls	r1, r1, #2
     458:	f101 4160 	add.w	r1, r1, #3758096384	; 0xe0000000
     45c:	f501 4161 	add.w	r1, r1, #57600	; 0xe100
     460:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
     464:	2d00      	cmp	r5, #0
     466:	da06      	bge.n	476 <gpio_set_pin_callback+0x7e>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
     468:	f003 030f 	and.w	r3, r3, #15
     46c:	0112      	lsls	r2, r2, #4
     46e:	b2d2      	uxtb	r2, r2
     470:	4d0b      	ldr	r5, [pc, #44]	; (4a0 <gpio_set_pin_callback+0xa8>)
     472:	54ea      	strb	r2, [r5, r3]
     474:	e007      	b.n	486 <gpio_set_pin_callback+0x8e>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
     476:	0112      	lsls	r2, r2, #4
     478:	b2d2      	uxtb	r2, r2
     47a:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
     47e:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
     482:	f885 2300 	strb.w	r2, [r5, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
     486:	6008      	str	r0, [r1, #0]
	NVIC_ClearPendingIRQ((IRQn_Type)irq_line);
	NVIC_SetPriority((IRQn_Type)irq_line, irq_level);
	NVIC_EnableIRQ((IRQn_Type)irq_line);

	gpio_nb_sources++;
     488:	3401      	adds	r4, #1
     48a:	4b03      	ldr	r3, [pc, #12]	; (498 <gpio_set_pin_callback+0xa0>)
     48c:	601c      	str	r4, [r3, #0]

	return true;
     48e:	2001      	movs	r0, #1
     490:	e000      	b.n	494 <gpio_set_pin_callback+0x9c>
{
	int8_t i;
	int8_t irq_line;

	if (gpio_nb_sources >= GPIO_MAX_INTERRUPT_SOURCES) {
		return false;
     492:	2000      	movs	r0, #0
	NVIC_EnableIRQ((IRQn_Type)irq_line);

	gpio_nb_sources++;

	return true;
}
     494:	bc70      	pop	{r4, r5, r6}
     496:	4770      	bx	lr
     498:	200008c4 	.word	0x200008c4
     49c:	200008c8 	.word	0x200008c8
     4a0:	e000ed14 	.word	0xe000ed14

000004a4 <GPIO_0_Handler>:

/**
 * GPIO handler 0 (PA 0..7)
 */
void GPIO_0_Handler(void)
{
     4a4:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, GPIO_INT_GROUP_MASK);
     4a6:	21ff      	movs	r1, #255	; 0xff
     4a8:	2000      	movs	r0, #0
     4aa:	4b01      	ldr	r3, [pc, #4]	; (4b0 <GPIO_0_Handler+0xc>)
     4ac:	4798      	blx	r3
     4ae:	bd08      	pop	{r3, pc}
     4b0:	00000389 	.word	0x00000389

000004b4 <GPIO_1_Handler>:

/**
 * GPIO handler 1 (PA 8..15)
 */
void GPIO_1_Handler(void)
{
     4b4:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 8));
     4b6:	f44f 417f 	mov.w	r1, #65280	; 0xff00
     4ba:	2000      	movs	r0, #0
     4bc:	4b01      	ldr	r3, [pc, #4]	; (4c4 <GPIO_1_Handler+0x10>)
     4be:	4798      	blx	r3
     4c0:	bd08      	pop	{r3, pc}
     4c2:	bf00      	nop
     4c4:	00000389 	.word	0x00000389

000004c8 <GPIO_2_Handler>:

/**
 * GPIO handler 2 (PA 16..23)
 */
void GPIO_2_Handler(void)
{
     4c8:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 16));
     4ca:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
     4ce:	2000      	movs	r0, #0
     4d0:	4b01      	ldr	r3, [pc, #4]	; (4d8 <GPIO_2_Handler+0x10>)
     4d2:	4798      	blx	r3
     4d4:	bd08      	pop	{r3, pc}
     4d6:	bf00      	nop
     4d8:	00000389 	.word	0x00000389

000004dc <GPIO_3_Handler>:

/**
 * GPIO handler 3 (PA 24..31)
 */
void GPIO_3_Handler(void)
{
     4dc:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 24));
     4de:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
     4e2:	2000      	movs	r0, #0
     4e4:	4b01      	ldr	r3, [pc, #4]	; (4ec <GPIO_3_Handler+0x10>)
     4e6:	4798      	blx	r3
     4e8:	bd08      	pop	{r3, pc}
     4ea:	bf00      	nop
     4ec:	00000389 	.word	0x00000389

000004f0 <GPIO_4_Handler>:

/**
 * GPIO handler 4 (PB 0..7)
 */
void GPIO_4_Handler(void)
{
     4f0:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, GPIO_INT_GROUP_MASK);
     4f2:	21ff      	movs	r1, #255	; 0xff
     4f4:	2001      	movs	r0, #1
     4f6:	4b01      	ldr	r3, [pc, #4]	; (4fc <GPIO_4_Handler+0xc>)
     4f8:	4798      	blx	r3
     4fa:	bd08      	pop	{r3, pc}
     4fc:	00000389 	.word	0x00000389

00000500 <GPIO_5_Handler>:

/**
 * GPIO handler 5 (PB 8..15)
 */
void GPIO_5_Handler(void)
{
     500:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 8));
     502:	f44f 417f 	mov.w	r1, #65280	; 0xff00
     506:	2001      	movs	r0, #1
     508:	4b01      	ldr	r3, [pc, #4]	; (510 <GPIO_5_Handler+0x10>)
     50a:	4798      	blx	r3
     50c:	bd08      	pop	{r3, pc}
     50e:	bf00      	nop
     510:	00000389 	.word	0x00000389

00000514 <GPIO_6_Handler>:

/**
 * GPIO handler 6 (PB 16..23)
 */
void GPIO_6_Handler(void)
{
     514:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 16));
     516:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
     51a:	2001      	movs	r0, #1
     51c:	4b01      	ldr	r3, [pc, #4]	; (524 <GPIO_6_Handler+0x10>)
     51e:	4798      	blx	r3
     520:	bd08      	pop	{r3, pc}
     522:	bf00      	nop
     524:	00000389 	.word	0x00000389

00000528 <GPIO_7_Handler>:

/**
 * GPIO handler 7 (PB 24..31)
 */
void GPIO_7_Handler(void)
{
     528:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 24));
     52a:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
     52e:	2001      	movs	r0, #1
     530:	4b01      	ldr	r3, [pc, #4]	; (538 <GPIO_7_Handler+0x10>)
     532:	4798      	blx	r3
     534:	bd08      	pop	{r3, pc}
     536:	bf00      	nop
     538:	00000389 	.word	0x00000389

0000053c <GPIO_8_Handler>:

/**
 * GPIO handler 8 (PC 0..7)
 */
void GPIO_8_Handler(void)
{
     53c:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, GPIO_INT_GROUP_MASK);
     53e:	21ff      	movs	r1, #255	; 0xff
     540:	2002      	movs	r0, #2
     542:	4b01      	ldr	r3, [pc, #4]	; (548 <GPIO_8_Handler+0xc>)
     544:	4798      	blx	r3
     546:	bd08      	pop	{r3, pc}
     548:	00000389 	.word	0x00000389

0000054c <GPIO_9_Handler>:

/**
 * GPIO handler 9 (PC 8..15)
 */
void GPIO_9_Handler(void)
{
     54c:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 8));
     54e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
     552:	2002      	movs	r0, #2
     554:	4b01      	ldr	r3, [pc, #4]	; (55c <GPIO_9_Handler+0x10>)
     556:	4798      	blx	r3
     558:	bd08      	pop	{r3, pc}
     55a:	bf00      	nop
     55c:	00000389 	.word	0x00000389

00000560 <GPIO_10_Handler>:

/**
 * GPIO handler 10 (PC 16..23)
 */
void GPIO_10_Handler(void)
{
     560:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 16));
     562:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
     566:	2002      	movs	r0, #2
     568:	4b01      	ldr	r3, [pc, #4]	; (570 <GPIO_10_Handler+0x10>)
     56a:	4798      	blx	r3
     56c:	bd08      	pop	{r3, pc}
     56e:	bf00      	nop
     570:	00000389 	.word	0x00000389

00000574 <GPIO_11_Handler>:

/**
 * GPIO handler 11 (PC 24..31)
 */
void GPIO_11_Handler(void)
{
     574:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 24));
     576:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
     57a:	2002      	movs	r0, #2
     57c:	4b01      	ldr	r3, [pc, #4]	; (584 <GPIO_11_Handler+0x10>)
     57e:	4798      	blx	r3
     580:	bd08      	pop	{r3, pc}
     582:	bf00      	nop
     584:	00000389 	.word	0x00000389

00000588 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(uint32_t bus_id, uint32_t module_index)
{
     588:	b470      	push	{r4, r5, r6}
     58a:	b083      	sub	sp, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     58c:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     590:	fab3 f383 	clz	r3, r3
     594:	095b      	lsrs	r3, r3, #5
     596:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     598:	b672      	cpsid	i
     59a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     59e:	2200      	movs	r2, #0
     5a0:	4b0e      	ldr	r3, [pc, #56]	; (5dc <sysclk_priv_enable_module+0x54>)
     5a2:	701a      	strb	r2, [r3, #0]
	return flags;
     5a4:	9e01      	ldr	r6, [sp, #4]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
     5a6:	0083      	lsls	r3, r0, #2
     5a8:	4d0d      	ldr	r5, [pc, #52]	; (5e0 <sysclk_priv_enable_module+0x58>)
     5aa:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
	mask |= 1U << module_index;
     5ae:	2401      	movs	r4, #1
     5b0:	fa04 f101 	lsl.w	r1, r4, r1
     5b4:	4311      	orrs	r1, r2
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
     5b6:	3320      	adds	r3, #32
     5b8:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
     5bc:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
     5c0:	4a08      	ldr	r2, [pc, #32]	; (5e4 <sysclk_priv_enable_module+0x5c>)
     5c2:	6593      	str	r3, [r2, #88]	; 0x58
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
	*(&PM->PM_CPUMASK + bus_id) = mask;
     5c4:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     5c8:	b126      	cbz	r6, 5d4 <sysclk_priv_enable_module+0x4c>
		cpu_irq_enable();
     5ca:	4b04      	ldr	r3, [pc, #16]	; (5dc <sysclk_priv_enable_module+0x54>)
     5cc:	701c      	strb	r4, [r3, #0]
     5ce:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     5d2:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
     5d4:	b003      	add	sp, #12
     5d6:	bc70      	pop	{r4, r5, r6}
     5d8:	4770      	bx	lr
     5da:	bf00      	nop
     5dc:	20000038 	.word	0x20000038
     5e0:	400e0020 	.word	0x400e0020
     5e4:	400e0000 	.word	0x400e0000

000005e8 <sysclk_priv_disable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be disabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_disable_module(uint32_t bus_id, uint32_t module_index)
{
     5e8:	b470      	push	{r4, r5, r6}
     5ea:	b083      	sub	sp, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     5ec:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     5f0:	fab3 f383 	clz	r3, r3
     5f4:	095b      	lsrs	r3, r3, #5
     5f6:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     5f8:	b672      	cpsid	i
     5fa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     5fe:	2200      	movs	r2, #0
     600:	4b0e      	ldr	r3, [pc, #56]	; (63c <sysclk_priv_disable_module+0x54>)
     602:	701a      	strb	r2, [r3, #0]
	return flags;
     604:	9e01      	ldr	r6, [sp, #4]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Disable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
     606:	0083      	lsls	r3, r0, #2
     608:	4d0d      	ldr	r5, [pc, #52]	; (640 <sysclk_priv_disable_module+0x58>)
     60a:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
	mask &= ~(1U << module_index);
     60e:	2401      	movs	r4, #1
     610:	fa04 f101 	lsl.w	r1, r4, r1
     614:	ea22 0101 	bic.w	r1, r2, r1
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
     618:	3320      	adds	r3, #32
     61a:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
     61e:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
     622:	4a08      	ldr	r2, [pc, #32]	; (644 <sysclk_priv_disable_module+0x5c>)
     624:	6593      	str	r3, [r2, #88]	; 0x58
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
	*(&PM->PM_CPUMASK + bus_id) = mask;
     626:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     62a:	b126      	cbz	r6, 636 <sysclk_priv_disable_module+0x4e>
		cpu_irq_enable();
     62c:	4b03      	ldr	r3, [pc, #12]	; (63c <sysclk_priv_disable_module+0x54>)
     62e:	701c      	strb	r4, [r3, #0]
     630:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     634:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
     636:	b003      	add	sp, #12
     638:	bc70      	pop	{r4, r5, r6}
     63a:	4770      	bx	lr
     63c:	20000038 	.word	0x20000038
     640:	400e0020 	.word	0x400e0020
     644:	400e0000 	.word	0x400e0000

00000648 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_enable_pba_module(uint32_t module_index)
{
     648:	b530      	push	{r4, r5, lr}
     64a:	b083      	sub	sp, #12
     64c:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     64e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     652:	fab3 f383 	clz	r3, r3
     656:	095b      	lsrs	r3, r3, #5
     658:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     65a:	b672      	cpsid	i
     65c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     660:	2200      	movs	r2, #0
     662:	4b0b      	ldr	r3, [pc, #44]	; (690 <sysclk_enable_pba_module+0x48>)
     664:	701a      	strb	r2, [r3, #0]
	return flags;
     666:	9d01      	ldr	r5, [sp, #4]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBAMASK == 0) {
     668:	4b0a      	ldr	r3, [pc, #40]	; (694 <sysclk_enable_pba_module+0x4c>)
     66a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     66c:	b91b      	cbnz	r3, 676 <sysclk_enable_pba_module+0x2e>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
     66e:	2105      	movs	r1, #5
     670:	2001      	movs	r0, #1
     672:	4b09      	ldr	r3, [pc, #36]	; (698 <sysclk_enable_pba_module+0x50>)
     674:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     676:	b12d      	cbz	r5, 684 <sysclk_enable_pba_module+0x3c>
		cpu_irq_enable();
     678:	2201      	movs	r2, #1
     67a:	4b05      	ldr	r3, [pc, #20]	; (690 <sysclk_enable_pba_module+0x48>)
     67c:	701a      	strb	r2, [r3, #0]
     67e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     682:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBA, module_index);
     684:	4621      	mov	r1, r4
     686:	2002      	movs	r0, #2
     688:	4b03      	ldr	r3, [pc, #12]	; (698 <sysclk_enable_pba_module+0x50>)
     68a:	4798      	blx	r3
}
     68c:	b003      	add	sp, #12
     68e:	bd30      	pop	{r4, r5, pc}
     690:	20000038 	.word	0x20000038
     694:	400e0000 	.word	0x400e0000
     698:	00000589 	.word	0x00000589

0000069c <sysclk_disable_pba_module>:
/**
 * \brief Disable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_disable_pba_module(uint32_t module_index)
{
     69c:	b510      	push	{r4, lr}
     69e:	b082      	sub	sp, #8
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBA, module_index);
     6a0:	4601      	mov	r1, r0
     6a2:	2002      	movs	r0, #2
     6a4:	4b0f      	ldr	r3, [pc, #60]	; (6e4 <sysclk_disable_pba_module+0x48>)
     6a6:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     6a8:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     6ac:	fab3 f383 	clz	r3, r3
     6b0:	095b      	lsrs	r3, r3, #5
     6b2:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     6b4:	b672      	cpsid	i
     6b6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     6ba:	2200      	movs	r2, #0
     6bc:	4b0a      	ldr	r3, [pc, #40]	; (6e8 <sysclk_disable_pba_module+0x4c>)
     6be:	701a      	strb	r2, [r3, #0]
	return flags;
     6c0:	9c01      	ldr	r4, [sp, #4]

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	if (PM->PM_PBAMASK == 0) {
     6c2:	4b0a      	ldr	r3, [pc, #40]	; (6ec <sysclk_disable_pba_module+0x50>)
     6c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     6c6:	b91b      	cbnz	r3, 6d0 <sysclk_disable_pba_module+0x34>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
     6c8:	2105      	movs	r1, #5
     6ca:	2001      	movs	r0, #1
     6cc:	4b05      	ldr	r3, [pc, #20]	; (6e4 <sysclk_disable_pba_module+0x48>)
     6ce:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     6d0:	b12c      	cbz	r4, 6de <sysclk_disable_pba_module+0x42>
		cpu_irq_enable();
     6d2:	2201      	movs	r2, #1
     6d4:	4b04      	ldr	r3, [pc, #16]	; (6e8 <sysclk_disable_pba_module+0x4c>)
     6d6:	701a      	strb	r2, [r3, #0]
     6d8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     6dc:	b662      	cpsie	i
		sysclk_disable_hsb_module(SYSCLK_PBA_BRIDGE);
	}

	cpu_irq_restore(flags);
}
     6de:	b002      	add	sp, #8
     6e0:	bd10      	pop	{r4, pc}
     6e2:	bf00      	nop
     6e4:	000005e9 	.word	0x000005e9
     6e8:	20000038 	.word	0x20000038
     6ec:	400e0000 	.word	0x400e0000

000006f0 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(uint32_t module_index)
{
     6f0:	b530      	push	{r4, r5, lr}
     6f2:	b083      	sub	sp, #12
     6f4:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     6f6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     6fa:	fab3 f383 	clz	r3, r3
     6fe:	095b      	lsrs	r3, r3, #5
     700:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     702:	b672      	cpsid	i
     704:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     708:	2200      	movs	r2, #0
     70a:	4b0b      	ldr	r3, [pc, #44]	; (738 <sysclk_enable_pbb_module+0x48>)
     70c:	701a      	strb	r2, [r3, #0]
	return flags;
     70e:	9d01      	ldr	r5, [sp, #4]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBBMASK == 0) {
     710:	4b0a      	ldr	r3, [pc, #40]	; (73c <sysclk_enable_pbb_module+0x4c>)
     712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     714:	b91b      	cbnz	r3, 71e <sysclk_enable_pbb_module+0x2e>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
     716:	2106      	movs	r1, #6
     718:	2001      	movs	r0, #1
     71a:	4b09      	ldr	r3, [pc, #36]	; (740 <sysclk_enable_pbb_module+0x50>)
     71c:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     71e:	b12d      	cbz	r5, 72c <sysclk_enable_pbb_module+0x3c>
		cpu_irq_enable();
     720:	2201      	movs	r2, #1
     722:	4b05      	ldr	r3, [pc, #20]	; (738 <sysclk_enable_pbb_module+0x48>)
     724:	701a      	strb	r2, [r3, #0]
     726:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     72a:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBB, module_index);
     72c:	4621      	mov	r1, r4
     72e:	2003      	movs	r0, #3
     730:	4b03      	ldr	r3, [pc, #12]	; (740 <sysclk_enable_pbb_module+0x50>)
     732:	4798      	blx	r3
}
     734:	b003      	add	sp, #12
     736:	bd30      	pop	{r4, r5, pc}
     738:	20000038 	.word	0x20000038
     73c:	400e0000 	.word	0x400e0000
     740:	00000589 	.word	0x00000589

00000744 <sysclk_disable_pbb_module>:
/**
 * \brief Disable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_disable_pbb_module(uint32_t module_index)
{
     744:	b510      	push	{r4, lr}
     746:	b082      	sub	sp, #8
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBB, module_index);
     748:	4601      	mov	r1, r0
     74a:	2003      	movs	r0, #3
     74c:	4b0f      	ldr	r3, [pc, #60]	; (78c <sysclk_disable_pbb_module+0x48>)
     74e:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     750:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     754:	fab3 f383 	clz	r3, r3
     758:	095b      	lsrs	r3, r3, #5
     75a:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     75c:	b672      	cpsid	i
     75e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     762:	2200      	movs	r2, #0
     764:	4b0a      	ldr	r3, [pc, #40]	; (790 <sysclk_disable_pbb_module+0x4c>)
     766:	701a      	strb	r2, [r3, #0]
	return flags;
     768:	9c01      	ldr	r4, [sp, #4]

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	if (PM->PM_PBBMASK == 0) {
     76a:	4b0a      	ldr	r3, [pc, #40]	; (794 <sysclk_disable_pbb_module+0x50>)
     76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     76e:	b91b      	cbnz	r3, 778 <sysclk_disable_pbb_module+0x34>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
     770:	2106      	movs	r1, #6
     772:	2001      	movs	r0, #1
     774:	4b05      	ldr	r3, [pc, #20]	; (78c <sysclk_disable_pbb_module+0x48>)
     776:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     778:	b12c      	cbz	r4, 786 <sysclk_disable_pbb_module+0x42>
		cpu_irq_enable();
     77a:	2201      	movs	r2, #1
     77c:	4b04      	ldr	r3, [pc, #16]	; (790 <sysclk_disable_pbb_module+0x4c>)
     77e:	701a      	strb	r2, [r3, #0]
     780:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     784:	b662      	cpsie	i
		sysclk_disable_hsb_module(SYSCLK_PBB_BRIDGE);
	}

	cpu_irq_restore(flags);
}
     786:	b002      	add	sp, #8
     788:	bd10      	pop	{r4, pc}
     78a:	bf00      	nop
     78c:	000005e9 	.word	0x000005e9
     790:	20000038 	.word	0x20000038
     794:	400e0000 	.word	0x400e0000

00000798 <sysclk_get_peripheral_bus_hz>:
 * \return Frequency of the bus attached to the specified peripheral, in Hz.
 */
uint32_t sysclk_get_peripheral_bus_hz(const volatile void *module)
{
	/* Fallthroughs intended for modules sharing the same peripheral bus. */
	switch ((uintptr_t)module) {
     798:	4b5f      	ldr	r3, [pc, #380]	; (918 <sysclk_get_peripheral_bus_hz+0x180>)
     79a:	4298      	cmp	r0, r3
     79c:	f000 80ba 	beq.w	914 <sysclk_get_peripheral_bus_hz+0x17c>
     7a0:	d860      	bhi.n	864 <sysclk_get_peripheral_bus_hz+0xcc>
     7a2:	f5a3 23a0 	sub.w	r3, r3, #327680	; 0x50000
     7a6:	4298      	cmp	r0, r3
     7a8:	f000 80b4 	beq.w	914 <sysclk_get_peripheral_bus_hz+0x17c>
     7ac:	d82f      	bhi.n	80e <sysclk_get_peripheral_bus_hz+0x76>
     7ae:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
     7b2:	4298      	cmp	r0, r3
     7b4:	f000 80ae 	beq.w	914 <sysclk_get_peripheral_bus_hz+0x17c>
     7b8:	d814      	bhi.n	7e4 <sysclk_get_peripheral_bus_hz+0x4c>
     7ba:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
     7be:	4298      	cmp	r0, r3
     7c0:	f000 80a8 	beq.w	914 <sysclk_get_peripheral_bus_hz+0x17c>
     7c4:	d804      	bhi.n	7d0 <sysclk_get_peripheral_bus_hz+0x38>
     7c6:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
     7ca:	f040 80a1 	bne.w	910 <sysclk_get_peripheral_bus_hz+0x178>
     7ce:	e0a1      	b.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     7d0:	4b52      	ldr	r3, [pc, #328]	; (91c <sysclk_get_peripheral_bus_hz+0x184>)
     7d2:	4298      	cmp	r0, r3
     7d4:	f000 809e 	beq.w	914 <sysclk_get_peripheral_bus_hz+0x17c>
     7d8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     7dc:	4298      	cmp	r0, r3
     7de:	f040 8097 	bne.w	910 <sysclk_get_peripheral_bus_hz+0x178>
     7e2:	e097      	b.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     7e4:	4b4e      	ldr	r3, [pc, #312]	; (920 <sysclk_get_peripheral_bus_hz+0x188>)
     7e6:	4298      	cmp	r0, r3
     7e8:	f000 8094 	beq.w	914 <sysclk_get_peripheral_bus_hz+0x17c>
     7ec:	d805      	bhi.n	7fa <sysclk_get_peripheral_bus_hz+0x62>
     7ee:	f5a3 5370 	sub.w	r3, r3, #15360	; 0x3c00
     7f2:	4298      	cmp	r0, r3
     7f4:	f040 808c 	bne.w	910 <sysclk_get_peripheral_bus_hz+0x178>
     7f8:	e08c      	b.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     7fa:	4b4a      	ldr	r3, [pc, #296]	; (924 <sysclk_get_peripheral_bus_hz+0x18c>)
     7fc:	4298      	cmp	r0, r3
     7fe:	f000 8089 	beq.w	914 <sysclk_get_peripheral_bus_hz+0x17c>
     802:	f503 43f8 	add.w	r3, r3, #31744	; 0x7c00
     806:	4298      	cmp	r0, r3
     808:	f040 8082 	bne.w	910 <sysclk_get_peripheral_bus_hz+0x178>
     80c:	e082      	b.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     80e:	4b46      	ldr	r3, [pc, #280]	; (928 <sysclk_get_peripheral_bus_hz+0x190>)
     810:	4298      	cmp	r0, r3
     812:	d07f      	beq.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     814:	d811      	bhi.n	83a <sysclk_get_peripheral_bus_hz+0xa2>
     816:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
     81a:	4298      	cmp	r0, r3
     81c:	d07a      	beq.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     81e:	d804      	bhi.n	82a <sysclk_get_peripheral_bus_hz+0x92>
     820:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     824:	4298      	cmp	r0, r3
     826:	d173      	bne.n	910 <sysclk_get_peripheral_bus_hz+0x178>
     828:	e074      	b.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     82a:	4b40      	ldr	r3, [pc, #256]	; (92c <sysclk_get_peripheral_bus_hz+0x194>)
     82c:	4298      	cmp	r0, r3
     82e:	d071      	beq.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     830:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     834:	4298      	cmp	r0, r3
     836:	d16b      	bne.n	910 <sysclk_get_peripheral_bus_hz+0x178>
     838:	e06c      	b.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     83a:	4b3d      	ldr	r3, [pc, #244]	; (930 <sysclk_get_peripheral_bus_hz+0x198>)
     83c:	4298      	cmp	r0, r3
     83e:	d069      	beq.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     840:	d808      	bhi.n	854 <sysclk_get_peripheral_bus_hz+0xbc>
     842:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
     846:	4298      	cmp	r0, r3
     848:	d064      	beq.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     84a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     84e:	4298      	cmp	r0, r3
     850:	d15e      	bne.n	910 <sysclk_get_peripheral_bus_hz+0x178>
     852:	e05f      	b.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     854:	4b37      	ldr	r3, [pc, #220]	; (934 <sysclk_get_peripheral_bus_hz+0x19c>)
     856:	4298      	cmp	r0, r3
     858:	d05c      	beq.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     85a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     85e:	4298      	cmp	r0, r3
     860:	d156      	bne.n	910 <sysclk_get_peripheral_bus_hz+0x178>
     862:	e057      	b.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     864:	4b34      	ldr	r3, [pc, #208]	; (938 <sysclk_get_peripheral_bus_hz+0x1a0>)
     866:	4298      	cmp	r0, r3
     868:	d054      	beq.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     86a:	d827      	bhi.n	8bc <sysclk_get_peripheral_bus_hz+0x124>
     86c:	f5a3 337c 	sub.w	r3, r3, #258048	; 0x3f000
     870:	4298      	cmp	r0, r3
     872:	d04f      	beq.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     874:	d811      	bhi.n	89a <sysclk_get_peripheral_bus_hz+0x102>
     876:	f5a3 3304 	sub.w	r3, r3, #135168	; 0x21000
     87a:	4298      	cmp	r0, r3
     87c:	d04a      	beq.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     87e:	d804      	bhi.n	88a <sysclk_get_peripheral_bus_hz+0xf2>
     880:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     884:	4298      	cmp	r0, r3
     886:	d143      	bne.n	910 <sysclk_get_peripheral_bus_hz+0x178>
     888:	e044      	b.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     88a:	4b2c      	ldr	r3, [pc, #176]	; (93c <sysclk_get_peripheral_bus_hz+0x1a4>)
     88c:	4298      	cmp	r0, r3
     88e:	d041      	beq.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     890:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     894:	4298      	cmp	r0, r3
     896:	d13b      	bne.n	910 <sysclk_get_peripheral_bus_hz+0x178>
     898:	e03c      	b.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     89a:	4b29      	ldr	r3, [pc, #164]	; (940 <sysclk_get_peripheral_bus_hz+0x1a8>)
     89c:	4298      	cmp	r0, r3
     89e:	d039      	beq.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     8a0:	d804      	bhi.n	8ac <sysclk_get_peripheral_bus_hz+0x114>
     8a2:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
     8a6:	4298      	cmp	r0, r3
     8a8:	d132      	bne.n	910 <sysclk_get_peripheral_bus_hz+0x178>
     8aa:	e033      	b.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     8ac:	4b25      	ldr	r3, [pc, #148]	; (944 <sysclk_get_peripheral_bus_hz+0x1ac>)
     8ae:	4298      	cmp	r0, r3
     8b0:	d030      	beq.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     8b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     8b6:	4298      	cmp	r0, r3
     8b8:	d12a      	bne.n	910 <sysclk_get_peripheral_bus_hz+0x178>
     8ba:	e02b      	b.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     8bc:	4b22      	ldr	r3, [pc, #136]	; (948 <sysclk_get_peripheral_bus_hz+0x1b0>)
     8be:	4298      	cmp	r0, r3
     8c0:	d028      	beq.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     8c2:	d811      	bhi.n	8e8 <sysclk_get_peripheral_bus_hz+0x150>
     8c4:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
     8c8:	4298      	cmp	r0, r3
     8ca:	d023      	beq.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     8cc:	d804      	bhi.n	8d8 <sysclk_get_peripheral_bus_hz+0x140>
     8ce:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
     8d2:	4298      	cmp	r0, r3
     8d4:	d11c      	bne.n	910 <sysclk_get_peripheral_bus_hz+0x178>
     8d6:	e01d      	b.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     8d8:	4b1c      	ldr	r3, [pc, #112]	; (94c <sysclk_get_peripheral_bus_hz+0x1b4>)
     8da:	4298      	cmp	r0, r3
     8dc:	d01a      	beq.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     8de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     8e2:	4298      	cmp	r0, r3
     8e4:	d114      	bne.n	910 <sysclk_get_peripheral_bus_hz+0x178>
     8e6:	e015      	b.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     8e8:	4b19      	ldr	r3, [pc, #100]	; (950 <sysclk_get_peripheral_bus_hz+0x1b8>)
     8ea:	4298      	cmp	r0, r3
     8ec:	d012      	beq.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     8ee:	d808      	bhi.n	902 <sysclk_get_peripheral_bus_hz+0x16a>
     8f0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
     8f4:	4298      	cmp	r0, r3
     8f6:	d00d      	beq.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     8f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     8fc:	4298      	cmp	r0, r3
     8fe:	d107      	bne.n	910 <sysclk_get_peripheral_bus_hz+0x178>
     900:	e008      	b.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     902:	4b14      	ldr	r3, [pc, #80]	; (954 <sysclk_get_peripheral_bus_hz+0x1bc>)
     904:	4298      	cmp	r0, r3
     906:	d005      	beq.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
     908:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     90c:	4298      	cmp	r0, r3
     90e:	d001      	beq.n	914 <sysclk_get_peripheral_bus_hz+0x17c>
	case PICOUART_ADDR:
		return sysclk_get_pbd_hz();

	default:
		Assert(false);
		return 0;
     910:	2000      	movs	r0, #0
     912:	4770      	bx	lr
	case TWIM2_ADDR:
	case TWIM3_ADDR:
	#if !SAM4LS
	case LCDCA_ADDR:
	#endif
		return sysclk_get_pba_hz();
     914:	4810      	ldr	r0, [pc, #64]	; (958 <sysclk_get_peripheral_bus_hz+0x1c0>)

	default:
		Assert(false);
		return 0;
	}
}
     916:	4770      	bx	lr
     918:	40078000 	.word	0x40078000
     91c:	40010000 	.word	0x40010000
     920:	4001c000 	.word	0x4001c000
     924:	4001c400 	.word	0x4001c400
     928:	40040000 	.word	0x40040000
     92c:	40038000 	.word	0x40038000
     930:	40068000 	.word	0x40068000
     934:	4006c000 	.word	0x4006c000
     938:	400e0000 	.word	0x400e0000
     93c:	400a0000 	.word	0x400a0000
     940:	400a4000 	.word	0x400a4000
     944:	400a5000 	.word	0x400a5000
     948:	400f0000 	.word	0x400f0000
     94c:	400e0c00 	.word	0x400e0c00
     950:	400f0c00 	.word	0x400f0c00
     954:	400f1000 	.word	0x400f1000
     958:	0001c138 	.word	0x0001c138

0000095c <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
     95c:	b508      	push	{r3, lr}
	switch ((uintptr_t)module) {
     95e:	4bb3      	ldr	r3, [pc, #716]	; (c2c <sysclk_enable_peripheral_clock+0x2d0>)
     960:	4298      	cmp	r0, r3
     962:	f000 815a 	beq.w	c1a <sysclk_enable_peripheral_clock+0x2be>
     966:	d86a      	bhi.n	a3e <sysclk_enable_peripheral_clock+0xe2>
     968:	f5a3 23a0 	sub.w	r3, r3, #327680	; 0x50000
     96c:	4298      	cmp	r0, r3
     96e:	f000 8113 	beq.w	b98 <sysclk_enable_peripheral_clock+0x23c>
     972:	d82f      	bhi.n	9d4 <sysclk_enable_peripheral_clock+0x78>
     974:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
     978:	4298      	cmp	r0, r3
     97a:	f000 80f2 	beq.w	b62 <sysclk_enable_peripheral_clock+0x206>
     97e:	d814      	bhi.n	9aa <sysclk_enable_peripheral_clock+0x4e>
     980:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
     984:	4298      	cmp	r0, r3
     986:	f000 80d2 	beq.w	b2e <sysclk_enable_peripheral_clock+0x1d2>
     98a:	d804      	bhi.n	996 <sysclk_enable_peripheral_clock+0x3a>
     98c:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
     990:	f000 80c9 	beq.w	b26 <sysclk_enable_peripheral_clock+0x1ca>
     994:	bd08      	pop	{r3, pc}
     996:	4ba6      	ldr	r3, [pc, #664]	; (c30 <sysclk_enable_peripheral_clock+0x2d4>)
     998:	4298      	cmp	r0, r3
     99a:	f000 80cc 	beq.w	b36 <sysclk_enable_peripheral_clock+0x1da>
     99e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     9a2:	4298      	cmp	r0, r3
     9a4:	f000 80d2 	beq.w	b4c <sysclk_enable_peripheral_clock+0x1f0>
     9a8:	bd08      	pop	{r3, pc}
     9aa:	4ba2      	ldr	r3, [pc, #648]	; (c34 <sysclk_enable_peripheral_clock+0x2d8>)
     9ac:	4298      	cmp	r0, r3
     9ae:	f000 80e0 	beq.w	b72 <sysclk_enable_peripheral_clock+0x216>
     9b2:	d805      	bhi.n	9c0 <sysclk_enable_peripheral_clock+0x64>
     9b4:	f5a3 5370 	sub.w	r3, r3, #15360	; 0x3c00
     9b8:	4298      	cmp	r0, r3
     9ba:	f000 80d6 	beq.w	b6a <sysclk_enable_peripheral_clock+0x20e>
     9be:	bd08      	pop	{r3, pc}
     9c0:	4b9d      	ldr	r3, [pc, #628]	; (c38 <sysclk_enable_peripheral_clock+0x2dc>)
     9c2:	4298      	cmp	r0, r3
     9c4:	f000 80d9 	beq.w	b7a <sysclk_enable_peripheral_clock+0x21e>
     9c8:	f503 43f8 	add.w	r3, r3, #31744	; 0x7c00
     9cc:	4298      	cmp	r0, r3
     9ce:	f000 80d8 	beq.w	b82 <sysclk_enable_peripheral_clock+0x226>
     9d2:	bd08      	pop	{r3, pc}
     9d4:	4b99      	ldr	r3, [pc, #612]	; (c3c <sysclk_enable_peripheral_clock+0x2e0>)
     9d6:	4298      	cmp	r0, r3
     9d8:	f000 8107 	beq.w	bea <sysclk_enable_peripheral_clock+0x28e>
     9dc:	d815      	bhi.n	a0a <sysclk_enable_peripheral_clock+0xae>
     9de:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
     9e2:	4298      	cmp	r0, r3
     9e4:	f000 80ee 	beq.w	bc4 <sysclk_enable_peripheral_clock+0x268>
     9e8:	d805      	bhi.n	9f6 <sysclk_enable_peripheral_clock+0x9a>
     9ea:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     9ee:	4298      	cmp	r0, r3
     9f0:	f000 80dd 	beq.w	bae <sysclk_enable_peripheral_clock+0x252>
     9f4:	bd08      	pop	{r3, pc}
     9f6:	4b92      	ldr	r3, [pc, #584]	; (c40 <sysclk_enable_peripheral_clock+0x2e4>)
     9f8:	4298      	cmp	r0, r3
     9fa:	f000 80ee 	beq.w	bda <sysclk_enable_peripheral_clock+0x27e>
     9fe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     a02:	4298      	cmp	r0, r3
     a04:	f000 80ed 	beq.w	be2 <sysclk_enable_peripheral_clock+0x286>
     a08:	bd08      	pop	{r3, pc}
     a0a:	4b8e      	ldr	r3, [pc, #568]	; (c44 <sysclk_enable_peripheral_clock+0x2e8>)
     a0c:	4298      	cmp	r0, r3
     a0e:	f000 80f8 	beq.w	c02 <sysclk_enable_peripheral_clock+0x2a6>
     a12:	d80a      	bhi.n	a2a <sysclk_enable_peripheral_clock+0xce>
     a14:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
     a18:	4298      	cmp	r0, r3
     a1a:	f000 80ea 	beq.w	bf2 <sysclk_enable_peripheral_clock+0x296>
     a1e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     a22:	4298      	cmp	r0, r3
     a24:	f000 80e9 	beq.w	bfa <sysclk_enable_peripheral_clock+0x29e>
     a28:	bd08      	pop	{r3, pc}
     a2a:	4b87      	ldr	r3, [pc, #540]	; (c48 <sysclk_enable_peripheral_clock+0x2ec>)
     a2c:	4298      	cmp	r0, r3
     a2e:	f000 80ec 	beq.w	c0a <sysclk_enable_peripheral_clock+0x2ae>
     a32:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     a36:	4298      	cmp	r0, r3
     a38:	f000 80eb 	beq.w	c12 <sysclk_enable_peripheral_clock+0x2b6>
     a3c:	bd08      	pop	{r3, pc}
     a3e:	4b83      	ldr	r3, [pc, #524]	; (c4c <sysclk_enable_peripheral_clock+0x2f0>)
     a40:	4298      	cmp	r0, r3
     a42:	f000 814d 	beq.w	ce0 <sysclk_enable_peripheral_clock+0x384>
     a46:	d834      	bhi.n	ab2 <sysclk_enable_peripheral_clock+0x156>
     a48:	f5a3 337c 	sub.w	r3, r3, #258048	; 0x3f000
     a4c:	4298      	cmp	r0, r3
     a4e:	f000 8127 	beq.w	ca0 <sysclk_enable_peripheral_clock+0x344>
     a52:	d815      	bhi.n	a80 <sysclk_enable_peripheral_clock+0x124>
     a54:	f5a3 3304 	sub.w	r3, r3, #135168	; 0x21000
     a58:	4298      	cmp	r0, r3
     a5a:	f000 810d 	beq.w	c78 <sysclk_enable_peripheral_clock+0x31c>
     a5e:	d805      	bhi.n	a6c <sysclk_enable_peripheral_clock+0x110>
     a60:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     a64:	4298      	cmp	r0, r3
     a66:	f000 80dc 	beq.w	c22 <sysclk_enable_peripheral_clock+0x2c6>
     a6a:	bd08      	pop	{r3, pc}
     a6c:	4b78      	ldr	r3, [pc, #480]	; (c50 <sysclk_enable_peripheral_clock+0x2f4>)
     a6e:	4298      	cmp	r0, r3
     a70:	f000 8106 	beq.w	c80 <sysclk_enable_peripheral_clock+0x324>
     a74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     a78:	4298      	cmp	r0, r3
     a7a:	f000 8109 	beq.w	c90 <sysclk_enable_peripheral_clock+0x334>
     a7e:	bd08      	pop	{r3, pc}
     a80:	4b74      	ldr	r3, [pc, #464]	; (c54 <sysclk_enable_peripheral_clock+0x2f8>)
     a82:	4298      	cmp	r0, r3
     a84:	f000 8120 	beq.w	cc8 <sysclk_enable_peripheral_clock+0x36c>
     a88:	d80a      	bhi.n	aa0 <sysclk_enable_peripheral_clock+0x144>
     a8a:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
     a8e:	4298      	cmp	r0, r3
     a90:	f000 810a 	beq.w	ca8 <sysclk_enable_peripheral_clock+0x34c>
     a94:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     a98:	4298      	cmp	r0, r3
     a9a:	f000 810d 	beq.w	cb8 <sysclk_enable_peripheral_clock+0x35c>
     a9e:	bd08      	pop	{r3, pc}
     aa0:	4b6d      	ldr	r3, [pc, #436]	; (c58 <sysclk_enable_peripheral_clock+0x2fc>)
     aa2:	4298      	cmp	r0, r3
     aa4:	f000 8118 	beq.w	cd8 <sysclk_enable_peripheral_clock+0x37c>
     aa8:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
     aac:	4298      	cmp	r0, r3
     aae:	d035      	beq.n	b1c <sysclk_enable_peripheral_clock+0x1c0>
     ab0:	bd08      	pop	{r3, pc}
     ab2:	4b6a      	ldr	r3, [pc, #424]	; (c5c <sysclk_enable_peripheral_clock+0x300>)
     ab4:	4298      	cmp	r0, r3
     ab6:	f000 812c 	beq.w	d12 <sysclk_enable_peripheral_clock+0x3b6>
     aba:	d815      	bhi.n	ae8 <sysclk_enable_peripheral_clock+0x18c>
     abc:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
     ac0:	4298      	cmp	r0, r3
     ac2:	f000 8117 	beq.w	cf4 <sysclk_enable_peripheral_clock+0x398>
     ac6:	d805      	bhi.n	ad4 <sysclk_enable_peripheral_clock+0x178>
     ac8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
     acc:	4298      	cmp	r0, r3
     ace:	f000 810c 	beq.w	cea <sysclk_enable_peripheral_clock+0x38e>
     ad2:	bd08      	pop	{r3, pc}
     ad4:	4b62      	ldr	r3, [pc, #392]	; (c60 <sysclk_enable_peripheral_clock+0x304>)
     ad6:	4298      	cmp	r0, r3
     ad8:	f000 8111 	beq.w	cfe <sysclk_enable_peripheral_clock+0x3a2>
     adc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     ae0:	4298      	cmp	r0, r3
     ae2:	f000 8111 	beq.w	d08 <sysclk_enable_peripheral_clock+0x3ac>
     ae6:	bd08      	pop	{r3, pc}
     ae8:	4b5e      	ldr	r3, [pc, #376]	; (c64 <sysclk_enable_peripheral_clock+0x308>)
     aea:	4298      	cmp	r0, r3
     aec:	f000 8120 	beq.w	d30 <sysclk_enable_peripheral_clock+0x3d4>
     af0:	d80a      	bhi.n	b08 <sysclk_enable_peripheral_clock+0x1ac>
     af2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
     af6:	4298      	cmp	r0, r3
     af8:	f000 8110 	beq.w	d1c <sysclk_enable_peripheral_clock+0x3c0>
     afc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     b00:	4298      	cmp	r0, r3
     b02:	f000 8110 	beq.w	d26 <sysclk_enable_peripheral_clock+0x3ca>
     b06:	bd08      	pop	{r3, pc}
     b08:	4b57      	ldr	r3, [pc, #348]	; (c68 <sysclk_enable_peripheral_clock+0x30c>)
     b0a:	4298      	cmp	r0, r3
     b0c:	f000 8115 	beq.w	d3a <sysclk_enable_peripheral_clock+0x3de>
     b10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     b14:	4298      	cmp	r0, r3
     b16:	f000 8115 	beq.w	d44 <sysclk_enable_peripheral_clock+0x3e8>
     b1a:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
     b1c:	2109      	movs	r1, #9
     b1e:	2001      	movs	r0, #1
     b20:	4b52      	ldr	r3, [pc, #328]	; (c6c <sysclk_enable_peripheral_clock+0x310>)
     b22:	4798      	blx	r3
     b24:	bd08      	pop	{r3, pc}
		sysclk_enable_hsb_module(SYSCLK_AESA_HSB);
		break;
	#endif

	case IISC_ADDR:
		sysclk_enable_pba_module(SYSCLK_IISC);
     b26:	2000      	movs	r0, #0
     b28:	4b51      	ldr	r3, [pc, #324]	; (c70 <sysclk_enable_peripheral_clock+0x314>)
     b2a:	4798      	blx	r3
		break;
     b2c:	bd08      	pop	{r3, pc}

	case SPI_ADDR:
		sysclk_enable_pba_module(SYSCLK_SPI);
     b2e:	2001      	movs	r0, #1
     b30:	4b4f      	ldr	r3, [pc, #316]	; (c70 <sysclk_enable_peripheral_clock+0x314>)
     b32:	4798      	blx	r3
		break;
     b34:	bd08      	pop	{r3, pc}

	case TC0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC0);
     b36:	2002      	movs	r0, #2
     b38:	4b4d      	ldr	r3, [pc, #308]	; (c70 <sysclk_enable_peripheral_clock+0x314>)
     b3a:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
     b3c:	4b43      	ldr	r3, [pc, #268]	; (c4c <sysclk_enable_peripheral_clock+0x2f0>)
     b3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
     b40:	f042 0255 	orr.w	r2, r2, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     b44:	494b      	ldr	r1, [pc, #300]	; (c74 <sysclk_enable_peripheral_clock+0x318>)
     b46:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
     b48:	641a      	str	r2, [r3, #64]	; 0x40
     b4a:	bd08      	pop	{r3, pc}
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;

	case TC1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC1);
     b4c:	2003      	movs	r0, #3
     b4e:	4b48      	ldr	r3, [pc, #288]	; (c70 <sysclk_enable_peripheral_clock+0x314>)
     b50:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
     b52:	4b3e      	ldr	r3, [pc, #248]	; (c4c <sysclk_enable_peripheral_clock+0x2f0>)
     b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
     b56:	f042 0255 	orr.w	r2, r2, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     b5a:	4946      	ldr	r1, [pc, #280]	; (c74 <sysclk_enable_peripheral_clock+0x318>)
     b5c:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
     b5e:	641a      	str	r2, [r3, #64]	; 0x40
     b60:	bd08      	pop	{r3, pc}
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;

	case TWIM0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM0);
     b62:	2004      	movs	r0, #4
     b64:	4b42      	ldr	r3, [pc, #264]	; (c70 <sysclk_enable_peripheral_clock+0x314>)
     b66:	4798      	blx	r3
		break;
     b68:	bd08      	pop	{r3, pc}

	case TWIS0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS0);
     b6a:	2005      	movs	r0, #5
     b6c:	4b40      	ldr	r3, [pc, #256]	; (c70 <sysclk_enable_peripheral_clock+0x314>)
     b6e:	4798      	blx	r3
		break;
     b70:	bd08      	pop	{r3, pc}

	case TWIM1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM1);
     b72:	2006      	movs	r0, #6
     b74:	4b3e      	ldr	r3, [pc, #248]	; (c70 <sysclk_enable_peripheral_clock+0x314>)
     b76:	4798      	blx	r3
		break;
     b78:	bd08      	pop	{r3, pc}

	case TWIS1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS1);
     b7a:	2007      	movs	r0, #7
     b7c:	4b3c      	ldr	r3, [pc, #240]	; (c70 <sysclk_enable_peripheral_clock+0x314>)
     b7e:	4798      	blx	r3
		break;
     b80:	bd08      	pop	{r3, pc}

	case USART0_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART0);
     b82:	2008      	movs	r0, #8
     b84:	4b3a      	ldr	r3, [pc, #232]	; (c70 <sysclk_enable_peripheral_clock+0x314>)
     b86:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
     b88:	4b30      	ldr	r3, [pc, #192]	; (c4c <sysclk_enable_peripheral_clock+0x2f0>)
     b8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
     b8c:	f042 0204 	orr.w	r2, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     b90:	4938      	ldr	r1, [pc, #224]	; (c74 <sysclk_enable_peripheral_clock+0x318>)
     b92:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
     b94:	641a      	str	r2, [r3, #64]	; 0x40
     b96:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART1_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART1);
     b98:	2009      	movs	r0, #9
     b9a:	4b35      	ldr	r3, [pc, #212]	; (c70 <sysclk_enable_peripheral_clock+0x314>)
     b9c:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
     b9e:	4b2b      	ldr	r3, [pc, #172]	; (c4c <sysclk_enable_peripheral_clock+0x2f0>)
     ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
     ba2:	f042 0204 	orr.w	r2, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     ba6:	4933      	ldr	r1, [pc, #204]	; (c74 <sysclk_enable_peripheral_clock+0x318>)
     ba8:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
     baa:	641a      	str	r2, [r3, #64]	; 0x40
     bac:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART2_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART2);
     bae:	200a      	movs	r0, #10
     bb0:	4b2f      	ldr	r3, [pc, #188]	; (c70 <sysclk_enable_peripheral_clock+0x314>)
     bb2:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
     bb4:	4b25      	ldr	r3, [pc, #148]	; (c4c <sysclk_enable_peripheral_clock+0x2f0>)
     bb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
     bb8:	f042 0204 	orr.w	r2, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     bbc:	492d      	ldr	r1, [pc, #180]	; (c74 <sysclk_enable_peripheral_clock+0x318>)
     bbe:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
     bc0:	641a      	str	r2, [r3, #64]	; 0x40
     bc2:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART3_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART3);
     bc4:	200b      	movs	r0, #11
     bc6:	4b2a      	ldr	r3, [pc, #168]	; (c70 <sysclk_enable_peripheral_clock+0x314>)
     bc8:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
     bca:	4b20      	ldr	r3, [pc, #128]	; (c4c <sysclk_enable_peripheral_clock+0x2f0>)
     bcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
     bce:	f042 0204 	orr.w	r2, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     bd2:	4928      	ldr	r1, [pc, #160]	; (c74 <sysclk_enable_peripheral_clock+0x318>)
     bd4:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
     bd6:	641a      	str	r2, [r3, #64]	; 0x40
     bd8:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case ADCIFE_ADDR:
		sysclk_enable_pba_module(SYSCLK_ADCIFE);
     bda:	200c      	movs	r0, #12
     bdc:	4b24      	ldr	r3, [pc, #144]	; (c70 <sysclk_enable_peripheral_clock+0x314>)
     bde:	4798      	blx	r3
		break;
     be0:	bd08      	pop	{r3, pc}

	case DACC_ADDR:
		sysclk_enable_pba_module(SYSCLK_DACC);
     be2:	200d      	movs	r0, #13
     be4:	4b22      	ldr	r3, [pc, #136]	; (c70 <sysclk_enable_peripheral_clock+0x314>)
     be6:	4798      	blx	r3
		break;
     be8:	bd08      	pop	{r3, pc}

	case ACIFC_ADDR:
		sysclk_enable_pba_module(SYSCLK_ACIFC);
     bea:	200e      	movs	r0, #14
     bec:	4b20      	ldr	r3, [pc, #128]	; (c70 <sysclk_enable_peripheral_clock+0x314>)
     bee:	4798      	blx	r3
		break;
     bf0:	bd08      	pop	{r3, pc}

	case GLOC_ADDR:
		sysclk_enable_pba_module(SYSCLK_GLOC);
     bf2:	200f      	movs	r0, #15
     bf4:	4b1e      	ldr	r3, [pc, #120]	; (c70 <sysclk_enable_peripheral_clock+0x314>)
     bf6:	4798      	blx	r3
		break;
     bf8:	bd08      	pop	{r3, pc}

	case ABDACB_ADDR:
		sysclk_enable_pba_module(SYSCLK_ABDACB);
     bfa:	2010      	movs	r0, #16
     bfc:	4b1c      	ldr	r3, [pc, #112]	; (c70 <sysclk_enable_peripheral_clock+0x314>)
     bfe:	4798      	blx	r3
		break;
     c00:	bd08      	pop	{r3, pc}

	case TRNG_ADDR:
		sysclk_enable_pba_module(SYSCLK_TRNG);
     c02:	2011      	movs	r0, #17
     c04:	4b1a      	ldr	r3, [pc, #104]	; (c70 <sysclk_enable_peripheral_clock+0x314>)
     c06:	4798      	blx	r3
		break;
     c08:	bd08      	pop	{r3, pc}

	case PARC_ADDR:
		sysclk_enable_pba_module(SYSCLK_PARC);
     c0a:	2012      	movs	r0, #18
     c0c:	4b18      	ldr	r3, [pc, #96]	; (c70 <sysclk_enable_peripheral_clock+0x314>)
     c0e:	4798      	blx	r3
		break;
     c10:	bd08      	pop	{r3, pc}

	case CATB_ADDR:
		sysclk_enable_pba_module(SYSCLK_CATB);
     c12:	2013      	movs	r0, #19
     c14:	4b16      	ldr	r3, [pc, #88]	; (c70 <sysclk_enable_peripheral_clock+0x314>)
     c16:	4798      	blx	r3
		break;
     c18:	bd08      	pop	{r3, pc}

	case TWIM2_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM2);
     c1a:	2015      	movs	r0, #21
     c1c:	4b14      	ldr	r3, [pc, #80]	; (c70 <sysclk_enable_peripheral_clock+0x314>)
     c1e:	4798      	blx	r3
		break;
     c20:	bd08      	pop	{r3, pc}

	case TWIM3_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM3);
     c22:	2016      	movs	r0, #22
     c24:	4b12      	ldr	r3, [pc, #72]	; (c70 <sysclk_enable_peripheral_clock+0x314>)
     c26:	4798      	blx	r3
		break;
     c28:	bd08      	pop	{r3, pc}
     c2a:	bf00      	nop
     c2c:	40078000 	.word	0x40078000
     c30:	40010000 	.word	0x40010000
     c34:	4001c000 	.word	0x4001c000
     c38:	4001c400 	.word	0x4001c400
     c3c:	40040000 	.word	0x40040000
     c40:	40038000 	.word	0x40038000
     c44:	40068000 	.word	0x40068000
     c48:	4006c000 	.word	0x4006c000
     c4c:	400e0000 	.word	0x400e0000
     c50:	400a0000 	.word	0x400a0000
     c54:	400a5000 	.word	0x400a5000
     c58:	400a6000 	.word	0x400a6000
     c5c:	400f0000 	.word	0x400f0000
     c60:	400e0c00 	.word	0x400e0c00
     c64:	400f0c00 	.word	0x400f0c00
     c68:	400f1000 	.word	0x400f1000
     c6c:	00000589 	.word	0x00000589
     c70:	00000649 	.word	0x00000649
     c74:	aa000040 	.word	0xaa000040

	#if !SAM4LS
	case LCDCA_ADDR:
		sysclk_enable_pba_module(SYSCLK_LCDCA);
     c78:	2017      	movs	r0, #23
     c7a:	4b35      	ldr	r3, [pc, #212]	; (d50 <sysclk_enable_peripheral_clock+0x3f4>)
     c7c:	4798      	blx	r3
		break;
     c7e:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
     c80:	2101      	movs	r1, #1
     c82:	4608      	mov	r0, r1
     c84:	4b33      	ldr	r3, [pc, #204]	; (d54 <sysclk_enable_peripheral_clock+0x3f8>)
     c86:	4798      	blx	r3
	#endif

	case HFLASHC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HFLASHC_DATA);
		sysclk_enable_pbb_module(SYSCLK_HFLASHC_REGS);
     c88:	2000      	movs	r0, #0
     c8a:	4b33      	ldr	r3, [pc, #204]	; (d58 <sysclk_enable_peripheral_clock+0x3fc>)
     c8c:	4798      	blx	r3
		break;
     c8e:	bd08      	pop	{r3, pc}
     c90:	2102      	movs	r1, #2
     c92:	2001      	movs	r0, #1
     c94:	4b2f      	ldr	r3, [pc, #188]	; (d54 <sysclk_enable_peripheral_clock+0x3f8>)
     c96:	4798      	blx	r3

	case HCACHE_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HRAMC1_DATA);
		sysclk_enable_pbb_module(SYSCLK_HRAMC1_REGS);
     c98:	2001      	movs	r0, #1
     c9a:	4b2f      	ldr	r3, [pc, #188]	; (d58 <sysclk_enable_peripheral_clock+0x3fc>)
     c9c:	4798      	blx	r3
		break;
     c9e:	bd08      	pop	{r3, pc}

	case HMATRIX_ADDR:
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
     ca0:	2002      	movs	r0, #2
     ca2:	4b2d      	ldr	r3, [pc, #180]	; (d58 <sysclk_enable_peripheral_clock+0x3fc>)
     ca4:	4798      	blx	r3
		break;
     ca6:	bd08      	pop	{r3, pc}
     ca8:	2100      	movs	r1, #0
     caa:	2001      	movs	r0, #1
     cac:	4b29      	ldr	r3, [pc, #164]	; (d54 <sysclk_enable_peripheral_clock+0x3f8>)
     cae:	4798      	blx	r3

	case PDCA_ADDR:
		sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
		sysclk_enable_pbb_module(SYSCLK_PDCA_PB);
     cb0:	2003      	movs	r0, #3
     cb2:	4b29      	ldr	r3, [pc, #164]	; (d58 <sysclk_enable_peripheral_clock+0x3fc>)
     cb4:	4798      	blx	r3
		break;
     cb6:	bd08      	pop	{r3, pc}
     cb8:	2104      	movs	r1, #4
     cba:	2001      	movs	r0, #1
     cbc:	4b25      	ldr	r3, [pc, #148]	; (d54 <sysclk_enable_peripheral_clock+0x3f8>)
     cbe:	4798      	blx	r3

	case CRCCU_ADDR:
		sysclk_enable_hsb_module(SYSCLK_CRCCU_DATA);
		sysclk_enable_pbb_module(SYSCLK_CRCCU_REGS);
     cc0:	2004      	movs	r0, #4
     cc2:	4b25      	ldr	r3, [pc, #148]	; (d58 <sysclk_enable_peripheral_clock+0x3fc>)
     cc4:	4798      	blx	r3
		break;
     cc6:	bd08      	pop	{r3, pc}
     cc8:	2103      	movs	r1, #3
     cca:	2001      	movs	r0, #1
     ccc:	4b21      	ldr	r3, [pc, #132]	; (d54 <sysclk_enable_peripheral_clock+0x3f8>)
     cce:	4798      	blx	r3

	case USBC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_USBC_DATA);
		sysclk_enable_pbb_module(SYSCLK_USBC_REGS);
     cd0:	2005      	movs	r0, #5
     cd2:	4b21      	ldr	r3, [pc, #132]	; (d58 <sysclk_enable_peripheral_clock+0x3fc>)
     cd4:	4798      	blx	r3
		break;
     cd6:	bd08      	pop	{r3, pc}

	case PEVC_ADDR:
		sysclk_enable_pbb_module(SYSCLK_PEVC);
     cd8:	2006      	movs	r0, #6
     cda:	4b1f      	ldr	r3, [pc, #124]	; (d58 <sysclk_enable_peripheral_clock+0x3fc>)
     cdc:	4798      	blx	r3
		break;
     cde:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbc_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_PBC, module_index);
     ce0:	2100      	movs	r1, #0
     ce2:	2004      	movs	r0, #4
     ce4:	4b1b      	ldr	r3, [pc, #108]	; (d54 <sysclk_enable_peripheral_clock+0x3f8>)
     ce6:	4798      	blx	r3
     ce8:	bd08      	pop	{r3, pc}
     cea:	2101      	movs	r1, #1
     cec:	2004      	movs	r0, #4
     cee:	4b19      	ldr	r3, [pc, #100]	; (d54 <sysclk_enable_peripheral_clock+0x3f8>)
     cf0:	4798      	blx	r3
     cf2:	bd08      	pop	{r3, pc}
     cf4:	2102      	movs	r1, #2
     cf6:	2004      	movs	r0, #4
     cf8:	4b16      	ldr	r3, [pc, #88]	; (d54 <sysclk_enable_peripheral_clock+0x3f8>)
     cfa:	4798      	blx	r3
     cfc:	bd08      	pop	{r3, pc}
     cfe:	2103      	movs	r1, #3
     d00:	2004      	movs	r0, #4
     d02:	4b14      	ldr	r3, [pc, #80]	; (d54 <sysclk_enable_peripheral_clock+0x3f8>)
     d04:	4798      	blx	r3
     d06:	bd08      	pop	{r3, pc}
     d08:	2104      	movs	r1, #4
     d0a:	4608      	mov	r0, r1
     d0c:	4b11      	ldr	r3, [pc, #68]	; (d54 <sysclk_enable_peripheral_clock+0x3f8>)
     d0e:	4798      	blx	r3
     d10:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbd_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_PBD, module_index);
     d12:	2100      	movs	r1, #0
     d14:	2005      	movs	r0, #5
     d16:	4b0f      	ldr	r3, [pc, #60]	; (d54 <sysclk_enable_peripheral_clock+0x3f8>)
     d18:	4798      	blx	r3
     d1a:	bd08      	pop	{r3, pc}
     d1c:	2101      	movs	r1, #1
     d1e:	2005      	movs	r0, #5
     d20:	4b0c      	ldr	r3, [pc, #48]	; (d54 <sysclk_enable_peripheral_clock+0x3f8>)
     d22:	4798      	blx	r3
     d24:	bd08      	pop	{r3, pc}
     d26:	2102      	movs	r1, #2
     d28:	2005      	movs	r0, #5
     d2a:	4b0a      	ldr	r3, [pc, #40]	; (d54 <sysclk_enable_peripheral_clock+0x3f8>)
     d2c:	4798      	blx	r3
     d2e:	bd08      	pop	{r3, pc}
     d30:	2103      	movs	r1, #3
     d32:	2005      	movs	r0, #5
     d34:	4b07      	ldr	r3, [pc, #28]	; (d54 <sysclk_enable_peripheral_clock+0x3f8>)
     d36:	4798      	blx	r3
     d38:	bd08      	pop	{r3, pc}
     d3a:	2104      	movs	r1, #4
     d3c:	2005      	movs	r0, #5
     d3e:	4b05      	ldr	r3, [pc, #20]	; (d54 <sysclk_enable_peripheral_clock+0x3f8>)
     d40:	4798      	blx	r3
     d42:	bd08      	pop	{r3, pc}
     d44:	2105      	movs	r1, #5
     d46:	4608      	mov	r0, r1
     d48:	4b02      	ldr	r3, [pc, #8]	; (d54 <sysclk_enable_peripheral_clock+0x3f8>)
     d4a:	4798      	blx	r3
     d4c:	bd08      	pop	{r3, pc}
     d4e:	bf00      	nop
     d50:	00000649 	.word	0x00000649
     d54:	00000589 	.word	0x00000589
     d58:	000006f1 	.word	0x000006f1

00000d5c <sysclk_disable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be disabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
     d5c:	b508      	push	{r3, lr}
	switch ((uintptr_t)module) {
     d5e:	4bb4      	ldr	r3, [pc, #720]	; (1030 <__stack_size__+0x30>)
     d60:	4298      	cmp	r0, r3
     d62:	f000 8130 	beq.w	fc6 <sysclk_disable_peripheral_clock+0x26a>
     d66:	d86a      	bhi.n	e3e <sysclk_disable_peripheral_clock+0xe2>
     d68:	f5a3 23a0 	sub.w	r3, r3, #327680	; 0x50000
     d6c:	4298      	cmp	r0, r3
     d6e:	f000 80fe 	beq.w	f6e <sysclk_disable_peripheral_clock+0x212>
     d72:	d82f      	bhi.n	dd4 <sysclk_disable_peripheral_clock+0x78>
     d74:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
     d78:	4298      	cmp	r0, r3
     d7a:	f000 80e4 	beq.w	f46 <sysclk_disable_peripheral_clock+0x1ea>
     d7e:	d814      	bhi.n	daa <sysclk_disable_peripheral_clock+0x4e>
     d80:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
     d84:	4298      	cmp	r0, r3
     d86:	f000 80d2 	beq.w	f2e <sysclk_disable_peripheral_clock+0x1d2>
     d8a:	d804      	bhi.n	d96 <sysclk_disable_peripheral_clock+0x3a>
     d8c:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
     d90:	f000 80c9 	beq.w	f26 <sysclk_disable_peripheral_clock+0x1ca>
     d94:	bd08      	pop	{r3, pc}
     d96:	4ba7      	ldr	r3, [pc, #668]	; (1034 <__stack_size__+0x34>)
     d98:	4298      	cmp	r0, r3
     d9a:	f000 80cc 	beq.w	f36 <sysclk_disable_peripheral_clock+0x1da>
     d9e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     da2:	4298      	cmp	r0, r3
     da4:	f000 80cb 	beq.w	f3e <sysclk_disable_peripheral_clock+0x1e2>
     da8:	bd08      	pop	{r3, pc}
     daa:	4ba3      	ldr	r3, [pc, #652]	; (1038 <__stack_size__+0x38>)
     dac:	4298      	cmp	r0, r3
     dae:	f000 80d2 	beq.w	f56 <sysclk_disable_peripheral_clock+0x1fa>
     db2:	d805      	bhi.n	dc0 <sysclk_disable_peripheral_clock+0x64>
     db4:	f5a3 5370 	sub.w	r3, r3, #15360	; 0x3c00
     db8:	4298      	cmp	r0, r3
     dba:	f000 80c8 	beq.w	f4e <sysclk_disable_peripheral_clock+0x1f2>
     dbe:	bd08      	pop	{r3, pc}
     dc0:	4b9e      	ldr	r3, [pc, #632]	; (103c <__stack_size__+0x3c>)
     dc2:	4298      	cmp	r0, r3
     dc4:	f000 80cb 	beq.w	f5e <sysclk_disable_peripheral_clock+0x202>
     dc8:	f503 43f8 	add.w	r3, r3, #31744	; 0x7c00
     dcc:	4298      	cmp	r0, r3
     dce:	f000 80ca 	beq.w	f66 <sysclk_disable_peripheral_clock+0x20a>
     dd2:	bd08      	pop	{r3, pc}
     dd4:	4b9a      	ldr	r3, [pc, #616]	; (1040 <__stack_size__+0x40>)
     dd6:	4298      	cmp	r0, r3
     dd8:	f000 80dd 	beq.w	f96 <sysclk_disable_peripheral_clock+0x23a>
     ddc:	d815      	bhi.n	e0a <sysclk_disable_peripheral_clock+0xae>
     dde:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
     de2:	4298      	cmp	r0, r3
     de4:	f000 80cb 	beq.w	f7e <sysclk_disable_peripheral_clock+0x222>
     de8:	d805      	bhi.n	df6 <sysclk_disable_peripheral_clock+0x9a>
     dea:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     dee:	4298      	cmp	r0, r3
     df0:	f000 80c1 	beq.w	f76 <sysclk_disable_peripheral_clock+0x21a>
     df4:	bd08      	pop	{r3, pc}
     df6:	4b93      	ldr	r3, [pc, #588]	; (1044 <__stack_size__+0x44>)
     df8:	4298      	cmp	r0, r3
     dfa:	f000 80c4 	beq.w	f86 <sysclk_disable_peripheral_clock+0x22a>
     dfe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     e02:	4298      	cmp	r0, r3
     e04:	f000 80c3 	beq.w	f8e <sysclk_disable_peripheral_clock+0x232>
     e08:	bd08      	pop	{r3, pc}
     e0a:	4b8f      	ldr	r3, [pc, #572]	; (1048 <__stack_size__+0x48>)
     e0c:	4298      	cmp	r0, r3
     e0e:	f000 80ce 	beq.w	fae <sysclk_disable_peripheral_clock+0x252>
     e12:	d80a      	bhi.n	e2a <sysclk_disable_peripheral_clock+0xce>
     e14:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
     e18:	4298      	cmp	r0, r3
     e1a:	f000 80c0 	beq.w	f9e <sysclk_disable_peripheral_clock+0x242>
     e1e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     e22:	4298      	cmp	r0, r3
     e24:	f000 80bf 	beq.w	fa6 <sysclk_disable_peripheral_clock+0x24a>
     e28:	bd08      	pop	{r3, pc}
     e2a:	4b88      	ldr	r3, [pc, #544]	; (104c <__stack_size__+0x4c>)
     e2c:	4298      	cmp	r0, r3
     e2e:	f000 80c2 	beq.w	fb6 <sysclk_disable_peripheral_clock+0x25a>
     e32:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     e36:	4298      	cmp	r0, r3
     e38:	f000 80c1 	beq.w	fbe <sysclk_disable_peripheral_clock+0x262>
     e3c:	bd08      	pop	{r3, pc}
     e3e:	4b84      	ldr	r3, [pc, #528]	; (1050 <__stack_size__+0x50>)
     e40:	4298      	cmp	r0, r3
     e42:	f000 811f 	beq.w	1084 <__stack_size__+0x84>
     e46:	d834      	bhi.n	eb2 <sysclk_disable_peripheral_clock+0x156>
     e48:	f5a3 337c 	sub.w	r3, r3, #258048	; 0x3f000
     e4c:	4298      	cmp	r0, r3
     e4e:	f000 80d2 	beq.w	ff6 <sysclk_disable_peripheral_clock+0x29a>
     e52:	d815      	bhi.n	e80 <sysclk_disable_peripheral_clock+0x124>
     e54:	f5a3 3304 	sub.w	r3, r3, #135168	; 0x21000
     e58:	4298      	cmp	r0, r3
     e5a:	f000 80bc 	beq.w	fd6 <sysclk_disable_peripheral_clock+0x27a>
     e5e:	d805      	bhi.n	e6c <sysclk_disable_peripheral_clock+0x110>
     e60:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     e64:	4298      	cmp	r0, r3
     e66:	f000 80b2 	beq.w	fce <sysclk_disable_peripheral_clock+0x272>
     e6a:	bd08      	pop	{r3, pc}
     e6c:	4b79      	ldr	r3, [pc, #484]	; (1054 <__stack_size__+0x54>)
     e6e:	4298      	cmp	r0, r3
     e70:	f000 80b5 	beq.w	fde <sysclk_disable_peripheral_clock+0x282>
     e74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     e78:	4298      	cmp	r0, r3
     e7a:	f000 80b4 	beq.w	fe6 <sysclk_disable_peripheral_clock+0x28a>
     e7e:	bd08      	pop	{r3, pc}
     e80:	4b75      	ldr	r3, [pc, #468]	; (1058 <__stack_size__+0x58>)
     e82:	4298      	cmp	r0, r3
     e84:	f000 80cb 	beq.w	101e <__stack_size__+0x1e>
     e88:	d80a      	bhi.n	ea0 <sysclk_disable_peripheral_clock+0x144>
     e8a:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
     e8e:	4298      	cmp	r0, r3
     e90:	f000 80b5 	beq.w	ffe <sysclk_disable_peripheral_clock+0x2a2>
     e94:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     e98:	4298      	cmp	r0, r3
     e9a:	f000 80b8 	beq.w	100e <__stack_size__+0xe>
     e9e:	bd08      	pop	{r3, pc}
     ea0:	4b6e      	ldr	r3, [pc, #440]	; (105c <__stack_size__+0x5c>)
     ea2:	4298      	cmp	r0, r3
     ea4:	f000 80ea 	beq.w	107c <__stack_size__+0x7c>
     ea8:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
     eac:	4298      	cmp	r0, r3
     eae:	d035      	beq.n	f1c <sysclk_disable_peripheral_clock+0x1c0>
     eb0:	bd08      	pop	{r3, pc}
     eb2:	4b6b      	ldr	r3, [pc, #428]	; (1060 <__stack_size__+0x60>)
     eb4:	4298      	cmp	r0, r3
     eb6:	f000 80fe 	beq.w	10b6 <__stack_size__+0xb6>
     eba:	d815      	bhi.n	ee8 <sysclk_disable_peripheral_clock+0x18c>
     ebc:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
     ec0:	4298      	cmp	r0, r3
     ec2:	f000 80e9 	beq.w	1098 <__stack_size__+0x98>
     ec6:	d805      	bhi.n	ed4 <sysclk_disable_peripheral_clock+0x178>
     ec8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
     ecc:	4298      	cmp	r0, r3
     ece:	f000 80de 	beq.w	108e <__stack_size__+0x8e>
     ed2:	bd08      	pop	{r3, pc}
     ed4:	4b63      	ldr	r3, [pc, #396]	; (1064 <__stack_size__+0x64>)
     ed6:	4298      	cmp	r0, r3
     ed8:	f000 80e3 	beq.w	10a2 <__stack_size__+0xa2>
     edc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     ee0:	4298      	cmp	r0, r3
     ee2:	f000 80e3 	beq.w	10ac <__stack_size__+0xac>
     ee6:	bd08      	pop	{r3, pc}
     ee8:	4b5f      	ldr	r3, [pc, #380]	; (1068 <__stack_size__+0x68>)
     eea:	4298      	cmp	r0, r3
     eec:	f000 80f2 	beq.w	10d4 <__stack_size__+0xd4>
     ef0:	d80a      	bhi.n	f08 <sysclk_disable_peripheral_clock+0x1ac>
     ef2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
     ef6:	4298      	cmp	r0, r3
     ef8:	f000 80e2 	beq.w	10c0 <__stack_size__+0xc0>
     efc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     f00:	4298      	cmp	r0, r3
     f02:	f000 80e2 	beq.w	10ca <__stack_size__+0xca>
     f06:	bd08      	pop	{r3, pc}
     f08:	4b58      	ldr	r3, [pc, #352]	; (106c <__stack_size__+0x6c>)
     f0a:	4298      	cmp	r0, r3
     f0c:	f000 80e7 	beq.w	10de <__stack_size__+0xde>
     f10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     f14:	4298      	cmp	r0, r3
     f16:	f000 80e7 	beq.w	10e8 <__stack_size__+0xe8>
     f1a:	bd08      	pop	{r3, pc}
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
     f1c:	2109      	movs	r1, #9
     f1e:	2001      	movs	r0, #1
     f20:	4b53      	ldr	r3, [pc, #332]	; (1070 <__stack_size__+0x70>)
     f22:	4798      	blx	r3
     f24:	e0e4      	b.n	10f0 <__stack_size__+0xf0>
		sysclk_disable_hsb_module(SYSCLK_AESA_HSB);
		break;
	#endif

	case IISC_ADDR:
		sysclk_disable_pba_module(SYSCLK_IISC);
     f26:	2000      	movs	r0, #0
     f28:	4b52      	ldr	r3, [pc, #328]	; (1074 <__stack_size__+0x74>)
     f2a:	4798      	blx	r3
		break;
     f2c:	e0e0      	b.n	10f0 <__stack_size__+0xf0>

	case SPI_ADDR:
		sysclk_disable_pba_module(SYSCLK_SPI);
     f2e:	2001      	movs	r0, #1
     f30:	4b50      	ldr	r3, [pc, #320]	; (1074 <__stack_size__+0x74>)
     f32:	4798      	blx	r3
		break;
     f34:	e0dc      	b.n	10f0 <__stack_size__+0xf0>

	case TC0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TC0);
     f36:	2002      	movs	r0, #2
     f38:	4b4e      	ldr	r3, [pc, #312]	; (1074 <__stack_size__+0x74>)
     f3a:	4798      	blx	r3
		break;
     f3c:	e0d8      	b.n	10f0 <__stack_size__+0xf0>

	case TC1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TC1);
     f3e:	2003      	movs	r0, #3
     f40:	4b4c      	ldr	r3, [pc, #304]	; (1074 <__stack_size__+0x74>)
     f42:	4798      	blx	r3
		break;
     f44:	e0d4      	b.n	10f0 <__stack_size__+0xf0>

	case TWIM0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM0);
     f46:	2004      	movs	r0, #4
     f48:	4b4a      	ldr	r3, [pc, #296]	; (1074 <__stack_size__+0x74>)
     f4a:	4798      	blx	r3
		break;
     f4c:	e0d0      	b.n	10f0 <__stack_size__+0xf0>

	case TWIS0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIS0);
     f4e:	2005      	movs	r0, #5
     f50:	4b48      	ldr	r3, [pc, #288]	; (1074 <__stack_size__+0x74>)
     f52:	4798      	blx	r3
		break;
     f54:	e0cc      	b.n	10f0 <__stack_size__+0xf0>

	case TWIM1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM1);
     f56:	2006      	movs	r0, #6
     f58:	4b46      	ldr	r3, [pc, #280]	; (1074 <__stack_size__+0x74>)
     f5a:	4798      	blx	r3
		break;
     f5c:	e0c8      	b.n	10f0 <__stack_size__+0xf0>

	case TWIS1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIS1);
     f5e:	2007      	movs	r0, #7
     f60:	4b44      	ldr	r3, [pc, #272]	; (1074 <__stack_size__+0x74>)
     f62:	4798      	blx	r3
		break;
     f64:	e0c4      	b.n	10f0 <__stack_size__+0xf0>

	case USART0_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART0);
     f66:	2008      	movs	r0, #8
     f68:	4b42      	ldr	r3, [pc, #264]	; (1074 <__stack_size__+0x74>)
     f6a:	4798      	blx	r3
		break;
     f6c:	e0c0      	b.n	10f0 <__stack_size__+0xf0>

	case USART1_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART1);
     f6e:	2009      	movs	r0, #9
     f70:	4b40      	ldr	r3, [pc, #256]	; (1074 <__stack_size__+0x74>)
     f72:	4798      	blx	r3
		break;
     f74:	e0bc      	b.n	10f0 <__stack_size__+0xf0>

	case USART2_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART2);
     f76:	200a      	movs	r0, #10
     f78:	4b3e      	ldr	r3, [pc, #248]	; (1074 <__stack_size__+0x74>)
     f7a:	4798      	blx	r3
		break;
     f7c:	e0b8      	b.n	10f0 <__stack_size__+0xf0>

	case USART3_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART3);
     f7e:	200b      	movs	r0, #11
     f80:	4b3c      	ldr	r3, [pc, #240]	; (1074 <__stack_size__+0x74>)
     f82:	4798      	blx	r3
		break;
     f84:	e0b4      	b.n	10f0 <__stack_size__+0xf0>

	case ADCIFE_ADDR:
		sysclk_disable_pba_module(SYSCLK_ADCIFE);
     f86:	200c      	movs	r0, #12
     f88:	4b3a      	ldr	r3, [pc, #232]	; (1074 <__stack_size__+0x74>)
     f8a:	4798      	blx	r3
		break;
     f8c:	e0b0      	b.n	10f0 <__stack_size__+0xf0>

	case DACC_ADDR:
		sysclk_disable_pba_module(SYSCLK_DACC);
     f8e:	200d      	movs	r0, #13
     f90:	4b38      	ldr	r3, [pc, #224]	; (1074 <__stack_size__+0x74>)
     f92:	4798      	blx	r3
		break;
     f94:	e0ac      	b.n	10f0 <__stack_size__+0xf0>

	case ACIFC_ADDR:
		sysclk_disable_pba_module(SYSCLK_ACIFC);
     f96:	200e      	movs	r0, #14
     f98:	4b36      	ldr	r3, [pc, #216]	; (1074 <__stack_size__+0x74>)
     f9a:	4798      	blx	r3
		break;
     f9c:	e0a8      	b.n	10f0 <__stack_size__+0xf0>

	case GLOC_ADDR:
		sysclk_disable_pba_module(SYSCLK_GLOC);
     f9e:	200f      	movs	r0, #15
     fa0:	4b34      	ldr	r3, [pc, #208]	; (1074 <__stack_size__+0x74>)
     fa2:	4798      	blx	r3
		break;
     fa4:	e0a4      	b.n	10f0 <__stack_size__+0xf0>

	case ABDACB_ADDR:
		sysclk_disable_pba_module(SYSCLK_ABDACB);
     fa6:	2010      	movs	r0, #16
     fa8:	4b32      	ldr	r3, [pc, #200]	; (1074 <__stack_size__+0x74>)
     faa:	4798      	blx	r3
		break;
     fac:	e0a0      	b.n	10f0 <__stack_size__+0xf0>

	case TRNG_ADDR:
		sysclk_disable_pba_module(SYSCLK_TRNG);
     fae:	2011      	movs	r0, #17
     fb0:	4b30      	ldr	r3, [pc, #192]	; (1074 <__stack_size__+0x74>)
     fb2:	4798      	blx	r3
		break;
     fb4:	e09c      	b.n	10f0 <__stack_size__+0xf0>

	case PARC_ADDR:
		sysclk_disable_pba_module(SYSCLK_PARC);
     fb6:	2012      	movs	r0, #18
     fb8:	4b2e      	ldr	r3, [pc, #184]	; (1074 <__stack_size__+0x74>)
     fba:	4798      	blx	r3
		break;
     fbc:	e098      	b.n	10f0 <__stack_size__+0xf0>

	case CATB_ADDR:
		sysclk_disable_pba_module(SYSCLK_CATB);
     fbe:	2013      	movs	r0, #19
     fc0:	4b2c      	ldr	r3, [pc, #176]	; (1074 <__stack_size__+0x74>)
     fc2:	4798      	blx	r3
		break;
     fc4:	e094      	b.n	10f0 <__stack_size__+0xf0>

	case TWIM2_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM2);
     fc6:	2015      	movs	r0, #21
     fc8:	4b2a      	ldr	r3, [pc, #168]	; (1074 <__stack_size__+0x74>)
     fca:	4798      	blx	r3
		break;
     fcc:	e090      	b.n	10f0 <__stack_size__+0xf0>

	case TWIM3_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM3);
     fce:	2016      	movs	r0, #22
     fd0:	4b28      	ldr	r3, [pc, #160]	; (1074 <__stack_size__+0x74>)
     fd2:	4798      	blx	r3
		break;
     fd4:	e08c      	b.n	10f0 <__stack_size__+0xf0>

	#if !SAM4LS
	case LCDCA_ADDR:
		sysclk_disable_pba_module(SYSCLK_LCDCA);
     fd6:	2017      	movs	r0, #23
     fd8:	4b26      	ldr	r3, [pc, #152]	; (1074 <__stack_size__+0x74>)
     fda:	4798      	blx	r3
		break;
     fdc:	e088      	b.n	10f0 <__stack_size__+0xf0>
	#endif

	case HFLASHC_ADDR:
		sysclk_disable_pbb_module(SYSCLK_HFLASHC_REGS);
     fde:	2000      	movs	r0, #0
     fe0:	4b25      	ldr	r3, [pc, #148]	; (1078 <__stack_size__+0x78>)
     fe2:	4798      	blx	r3
		break;
     fe4:	e084      	b.n	10f0 <__stack_size__+0xf0>
     fe6:	2102      	movs	r1, #2
     fe8:	2001      	movs	r0, #1
     fea:	4b21      	ldr	r3, [pc, #132]	; (1070 <__stack_size__+0x70>)
     fec:	4798      	blx	r3

	case HCACHE_ADDR:
		sysclk_disable_hsb_module(SYSCLK_HRAMC1_DATA);
		sysclk_disable_pbb_module(SYSCLK_HRAMC1_REGS);
     fee:	2001      	movs	r0, #1
     ff0:	4b21      	ldr	r3, [pc, #132]	; (1078 <__stack_size__+0x78>)
     ff2:	4798      	blx	r3
		break;
     ff4:	e07c      	b.n	10f0 <__stack_size__+0xf0>

	case HMATRIX_ADDR:
		sysclk_disable_pbb_module(SYSCLK_HMATRIX);
     ff6:	2002      	movs	r0, #2
     ff8:	4b1f      	ldr	r3, [pc, #124]	; (1078 <__stack_size__+0x78>)
     ffa:	4798      	blx	r3
		break;
     ffc:	e078      	b.n	10f0 <__stack_size__+0xf0>
     ffe:	2100      	movs	r1, #0
    1000:	2001      	movs	r0, #1
    1002:	4b1b      	ldr	r3, [pc, #108]	; (1070 <__stack_size__+0x70>)
    1004:	4798      	blx	r3

	case PDCA_ADDR:
		sysclk_disable_hsb_module(SYSCLK_PDCA_HSB);
		sysclk_disable_pbb_module(SYSCLK_PDCA_PB);
    1006:	2003      	movs	r0, #3
    1008:	4b1b      	ldr	r3, [pc, #108]	; (1078 <__stack_size__+0x78>)
    100a:	4798      	blx	r3
		break;
    100c:	e070      	b.n	10f0 <__stack_size__+0xf0>
    100e:	2104      	movs	r1, #4
    1010:	2001      	movs	r0, #1
    1012:	4b17      	ldr	r3, [pc, #92]	; (1070 <__stack_size__+0x70>)
    1014:	4798      	blx	r3

	case CRCCU_ADDR:
		sysclk_disable_hsb_module(SYSCLK_CRCCU_DATA);
		sysclk_disable_pbb_module(SYSCLK_CRCCU_REGS);
    1016:	2004      	movs	r0, #4
    1018:	4b17      	ldr	r3, [pc, #92]	; (1078 <__stack_size__+0x78>)
    101a:	4798      	blx	r3
		break;
    101c:	e068      	b.n	10f0 <__stack_size__+0xf0>
    101e:	2103      	movs	r1, #3
    1020:	2001      	movs	r0, #1
    1022:	4b13      	ldr	r3, [pc, #76]	; (1070 <__stack_size__+0x70>)
    1024:	4798      	blx	r3

	case USBC_ADDR:
		sysclk_disable_hsb_module(SYSCLK_USBC_DATA);
		sysclk_disable_pbb_module(SYSCLK_USBC_REGS);
    1026:	2005      	movs	r0, #5
    1028:	4b13      	ldr	r3, [pc, #76]	; (1078 <__stack_size__+0x78>)
    102a:	4798      	blx	r3
		break;
    102c:	e060      	b.n	10f0 <__stack_size__+0xf0>
    102e:	bf00      	nop
    1030:	40078000 	.word	0x40078000
    1034:	40010000 	.word	0x40010000
    1038:	4001c000 	.word	0x4001c000
    103c:	4001c400 	.word	0x4001c400
    1040:	40040000 	.word	0x40040000
    1044:	40038000 	.word	0x40038000
    1048:	40068000 	.word	0x40068000
    104c:	4006c000 	.word	0x4006c000
    1050:	400e0000 	.word	0x400e0000
    1054:	400a0000 	.word	0x400a0000
    1058:	400a5000 	.word	0x400a5000
    105c:	400a6000 	.word	0x400a6000
    1060:	400f0000 	.word	0x400f0000
    1064:	400e0c00 	.word	0x400e0c00
    1068:	400f0c00 	.word	0x400f0c00
    106c:	400f1000 	.word	0x400f1000
    1070:	000005e9 	.word	0x000005e9
    1074:	0000069d 	.word	0x0000069d
    1078:	00000745 	.word	0x00000745

	case PEVC_ADDR:
		sysclk_disable_pbb_module(SYSCLK_PEVC);
    107c:	2006      	movs	r0, #6
    107e:	4b23      	ldr	r3, [pc, #140]	; (110c <__stack_size__+0x10c>)
    1080:	4798      	blx	r3
		break;
    1082:	e035      	b.n	10f0 <__stack_size__+0xf0>
 * \brief Disable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbc_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_PBC, module_index);
    1084:	2100      	movs	r1, #0
    1086:	2004      	movs	r0, #4
    1088:	4b21      	ldr	r3, [pc, #132]	; (1110 <__stack_size__+0x110>)
    108a:	4798      	blx	r3
    108c:	e030      	b.n	10f0 <__stack_size__+0xf0>
    108e:	2101      	movs	r1, #1
    1090:	2004      	movs	r0, #4
    1092:	4b1f      	ldr	r3, [pc, #124]	; (1110 <__stack_size__+0x110>)
    1094:	4798      	blx	r3
    1096:	e02b      	b.n	10f0 <__stack_size__+0xf0>
    1098:	2102      	movs	r1, #2
    109a:	2004      	movs	r0, #4
    109c:	4b1c      	ldr	r3, [pc, #112]	; (1110 <__stack_size__+0x110>)
    109e:	4798      	blx	r3
    10a0:	e026      	b.n	10f0 <__stack_size__+0xf0>
    10a2:	2103      	movs	r1, #3
    10a4:	2004      	movs	r0, #4
    10a6:	4b1a      	ldr	r3, [pc, #104]	; (1110 <__stack_size__+0x110>)
    10a8:	4798      	blx	r3
    10aa:	e021      	b.n	10f0 <__stack_size__+0xf0>
    10ac:	2104      	movs	r1, #4
    10ae:	4608      	mov	r0, r1
    10b0:	4b17      	ldr	r3, [pc, #92]	; (1110 <__stack_size__+0x110>)
    10b2:	4798      	blx	r3
    10b4:	e01c      	b.n	10f0 <__stack_size__+0xf0>
 * \brief Disable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbd_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_PBD, module_index);
    10b6:	2100      	movs	r1, #0
    10b8:	2005      	movs	r0, #5
    10ba:	4b15      	ldr	r3, [pc, #84]	; (1110 <__stack_size__+0x110>)
    10bc:	4798      	blx	r3
    10be:	e017      	b.n	10f0 <__stack_size__+0xf0>
    10c0:	2101      	movs	r1, #1
    10c2:	2005      	movs	r0, #5
    10c4:	4b12      	ldr	r3, [pc, #72]	; (1110 <__stack_size__+0x110>)
    10c6:	4798      	blx	r3
    10c8:	e012      	b.n	10f0 <__stack_size__+0xf0>
    10ca:	2102      	movs	r1, #2
    10cc:	2005      	movs	r0, #5
    10ce:	4b10      	ldr	r3, [pc, #64]	; (1110 <__stack_size__+0x110>)
    10d0:	4798      	blx	r3
    10d2:	e00d      	b.n	10f0 <__stack_size__+0xf0>
    10d4:	2103      	movs	r1, #3
    10d6:	2005      	movs	r0, #5
    10d8:	4b0d      	ldr	r3, [pc, #52]	; (1110 <__stack_size__+0x110>)
    10da:	4798      	blx	r3
    10dc:	e008      	b.n	10f0 <__stack_size__+0xf0>
    10de:	2104      	movs	r1, #4
    10e0:	2005      	movs	r0, #5
    10e2:	4b0b      	ldr	r3, [pc, #44]	; (1110 <__stack_size__+0x110>)
    10e4:	4798      	blx	r3
    10e6:	e003      	b.n	10f0 <__stack_size__+0xf0>
    10e8:	2105      	movs	r1, #5
    10ea:	4608      	mov	r0, r1
    10ec:	4b08      	ldr	r3, [pc, #32]	; (1110 <__stack_size__+0x110>)
    10ee:	4798      	blx	r3
							(1 << SYSCLK_TC1) | \
							(1 << SYSCLK_USART0) | \
							(1 << SYSCLK_USART1) | \
							(1 << SYSCLK_USART2) | \
							(1 << SYSCLK_USART3))
	if ((PM->PM_PBAMASK & PBADIV_CLKSRC_MASK) == 0) {
    10f0:	4b08      	ldr	r3, [pc, #32]	; (1114 <__stack_size__+0x114>)
    10f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    10f4:	f640 730c 	movw	r3, #3852	; 0xf0c
    10f8:	421a      	tst	r2, r3
    10fa:	d106      	bne.n	110a <__stack_size__+0x10a>
 */
static inline void sysclk_disable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    10fc:	4b05      	ldr	r3, [pc, #20]	; (1114 <__stack_size__+0x114>)
    10fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask &= ~mask;
    1100:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1104:	4904      	ldr	r1, [pc, #16]	; (1118 <__stack_size__+0x118>)
    1106:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    1108:	641a      	str	r2, [r3, #64]	; 0x40
    110a:	bd08      	pop	{r3, pc}
    110c:	00000745 	.word	0x00000745
    1110:	000005e9 	.word	0x000005e9
    1114:	400e0000 	.word	0x400e0000
    1118:	aa000040 	.word	0xaa000040

0000111c <sysclk_init>:
   genclk_disable(7);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
    111c:	b530      	push	{r4, r5, lr}
    111e:	b083      	sub	sp, #12
	uint32_t ps_value = 0;
	bool is_fwu_enabled = false;

#if CONFIG_HCACHE_ENABLE == 1
	/* Enable HCACHE */
	sysclk_enable_peripheral_clock(HCACHE);
    1120:	4c16      	ldr	r4, [pc, #88]	; (117c <sysclk_init+0x60>)
    1122:	4620      	mov	r0, r4
    1124:	4b16      	ldr	r3, [pc, #88]	; (1180 <sysclk_init+0x64>)
    1126:	4798      	blx	r3
	HCACHE->HCACHE_CTRL = HCACHE_CTRL_CEN_YES;
    1128:	2301      	movs	r3, #1
    112a:	60a3      	str	r3, [r4, #8]
	while (!(HCACHE->HCACHE_SR & HCACHE_SR_CSTS_EN));
    112c:	4622      	mov	r2, r4
    112e:	68d3      	ldr	r3, [r2, #12]
    1130:	f013 0f01 	tst.w	r3, #1
    1134:	d0fb      	beq.n	112e <sysclk_init+0x12>
	if (!no_halt) {
		bpm_power_scaling_cpu(bpm, ps_value);
		return true;
	}

	return bpm_power_scaling_cpu_failsafe(bpm, ps_value, 240000);
    1136:	4a13      	ldr	r2, [pc, #76]	; (1184 <sysclk_init+0x68>)
    1138:	2100      	movs	r1, #0
    113a:	4813      	ldr	r0, [pc, #76]	; (1188 <sysclk_init+0x6c>)
    113c:	4b13      	ldr	r3, [pc, #76]	; (118c <sysclk_init+0x70>)
    113e:	4798      	blx	r3
		Assert(false);
	}

	/* Automatically switch to low power mode */
	bpm_configure_power_scaling(BPM, ps_value, BPM_PSCM_CPU_NOT_HALT);
	while ((bpm_get_status(BPM) & BPM_SR_PSOK) == 0);
    1140:	4d11      	ldr	r5, [pc, #68]	; (1188 <sysclk_init+0x6c>)
    1142:	4c13      	ldr	r4, [pc, #76]	; (1190 <sysclk_init+0x74>)
    1144:	4628      	mov	r0, r5
    1146:	47a0      	blx	r4
    1148:	f010 0f01 	tst.w	r0, #1
    114c:	d0fa      	beq.n	1144 <sysclk_init+0x28>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    114e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1152:	fab3 f383 	clz	r3, r3
    1156:	095b      	lsrs	r3, r3, #5
    1158:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    115a:	b672      	cpsid	i
    115c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1160:	2200      	movs	r2, #0
    1162:	4b0c      	ldr	r3, [pc, #48]	; (1194 <sysclk_init+0x78>)
    1164:	701a      	strb	r2, [r3, #0]
	return flags;
    1166:	9b01      	ldr	r3, [sp, #4]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1168:	b12b      	cbz	r3, 1176 <sysclk_init+0x5a>
		cpu_irq_enable();
    116a:	2201      	movs	r2, #1
    116c:	4b09      	ldr	r3, [pc, #36]	; (1194 <sysclk_init+0x78>)
    116e:	701a      	strb	r2, [r3, #0]
    1170:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1174:	b662      	cpsie	i

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
    1176:	b003      	add	sp, #12
    1178:	bd30      	pop	{r4, r5, pc}
    117a:	bf00      	nop
    117c:	400a0400 	.word	0x400a0400
    1180:	0000095d 	.word	0x0000095d
    1184:	0003a980 	.word	0x0003a980
    1188:	400f0000 	.word	0x400f0000
    118c:	00001239 	.word	0x00001239
    1190:	000012ad 	.word	0x000012ad
    1194:	20000038 	.word	0x20000038

00001198 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_disable_pin(pin);\
	} while (0)

void board_init(void)
{
    1198:	b500      	push	{lr}
    119a:	b089      	sub	sp, #36	; 0x24
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	struct wdt_dev_inst wdt_inst;
	struct wdt_config   wdt_cfg;

	wdt_get_config_defaults(&wdt_cfg);
    119c:	a801      	add	r0, sp, #4
    119e:	4b1f      	ldr	r3, [pc, #124]	; (121c <board_init+0x84>)
    11a0:	4798      	blx	r3
	wdt_init(&wdt_inst, WDT, &wdt_cfg);
    11a2:	aa01      	add	r2, sp, #4
    11a4:	491e      	ldr	r1, [pc, #120]	; (1220 <board_init+0x88>)
    11a6:	a806      	add	r0, sp, #24
    11a8:	4b1e      	ldr	r3, [pc, #120]	; (1224 <board_init+0x8c>)
    11aa:	4798      	blx	r3
	wdt_disable(&wdt_inst);
    11ac:	a806      	add	r0, sp, #24
    11ae:	4b1e      	ldr	r3, [pc, #120]	; (1228 <board_init+0x90>)
    11b0:	4798      	blx	r3
}

__always_inline static void arch_ioport_init(void)
{
	sysclk_enable_peripheral_clock(GPIO);
    11b2:	481e      	ldr	r0, [pc, #120]	; (122c <board_init+0x94>)
    11b4:	4b1e      	ldr	r3, [pc, #120]	; (1230 <board_init+0x98>)
    11b6:	4798      	blx	r3

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    11b8:	4b1e      	ldr	r3, [pc, #120]	; (1234 <board_init+0x9c>)
    11ba:	2280      	movs	r2, #128	; 0x80
    11bc:	645a      	str	r2, [r3, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    11be:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    11c2:	655a      	str	r2, [r3, #84]	; 0x54
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    11c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    11c8:	649a      	str	r2, [r3, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    11ca:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
    11ce:	675a      	str	r2, [r3, #116]	; 0x74

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    11d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    11d4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    11d8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    11dc:	619a      	str	r2, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    11de:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    11e0:	639a      	str	r2, [r3, #56]	; 0x38
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    11e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    11e6:	679a      	str	r2, [r3, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    11e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    11ec:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    11f0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    11f4:	619a      	str	r2, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    11f6:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    11f8:	639a      	str	r2, [r3, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    11fa:	609a      	str	r2, [r3, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    11fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    1200:	679a      	str	r2, [r3, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    1202:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    1206:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    120a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    120e:	619a      	str	r2, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    1210:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    1212:	639a      	str	r2, [r3, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    1214:	609a      	str	r2, [r3, #8]
	ioport_set_pin_dir(UG_2832HSWEG04_DATA_CMD_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(UG_2832HSWEG04_DATA_CMD_GPIO, IOPORT_MODE_PULLUP);
	ioport_set_pin_dir(UG_2832HSWEG04_RESET_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(UG_2832HSWEG04_RESET_GPIO, IOPORT_MODE_PULLUP);
#endif
}
    1216:	b009      	add	sp, #36	; 0x24
    1218:	f85d fb04 	ldr.w	pc, [sp], #4
    121c:	000012e9 	.word	0x000012e9
    1220:	400f0c00 	.word	0x400f0c00
    1224:	00001301 	.word	0x00001301
    1228:	000013b1 	.word	0x000013b1
    122c:	400e1000 	.word	0x400e1000
    1230:	0000095d 	.word	0x0000095d
    1234:	400e1400 	.word	0x400e1400

00001238 <bpm_power_scaling_cpu_failsafe>:
}


bool bpm_power_scaling_cpu_failsafe(Bpm *bpm, uint32_t ps_value,
	uint32_t timeout)
{
    1238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    123c:	b083      	sub	sp, #12
	uint32_t pmcon = 0;

	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;
    123e:	69c3      	ldr	r3, [r0, #28]
    1240:	f023 0303 	bic.w	r3, r3, #3
    1244:	f043 030c 	orr.w	r3, r3, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1248:	f3ef 8410 	mrs	r4, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    124c:	fab4 f484 	clz	r4, r4
    1250:	0964      	lsrs	r4, r4, #5
    1252:	9401      	str	r4, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1254:	b672      	cpsid	i
    1256:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    125a:	2500      	movs	r5, #0
    125c:	4c10      	ldr	r4, [pc, #64]	; (12a0 <bpm_power_scaling_cpu_failsafe+0x68>)
    125e:	7025      	strb	r5, [r4, #0]
	return flags;
    1260:	9e01      	ldr	r6, [sp, #4]
	uint32_t ctrl, load, val;
	/* Avoid interrupt while flash halt */
	flags = cpu_irq_save();

	/* Save SysTick */
	val = SysTick->VAL;
    1262:	4c10      	ldr	r4, [pc, #64]	; (12a4 <bpm_power_scaling_cpu_failsafe+0x6c>)
    1264:	f8d4 8008 	ldr.w	r8, [r4, #8]
	ctrl = SysTick->CTRL;
    1268:	6827      	ldr	r7, [r4, #0]
	load = SysTick->LOAD;
    126a:	f8d4 9004 	ldr.w	r9, [r4, #4]
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
    126e:	6062      	str	r2, [r4, #4]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1270:	2205      	movs	r2, #5
    1272:	6022      	str	r2, [r4, #0]

	b_psok = bpm_ps_no_halt_exec(bpm, pmcon);
    1274:	f001 0103 	and.w	r1, r1, #3
    1278:	4319      	orrs	r1, r3
    127a:	4b0b      	ldr	r3, [pc, #44]	; (12a8 <bpm_power_scaling_cpu_failsafe+0x70>)
    127c:	4798      	blx	r3

	/* Restore SysTick */
	SysTick->CTRL = 0;
    127e:	6025      	str	r5, [r4, #0]
	SysTick->LOAD = load;
    1280:	f8c4 9004 	str.w	r9, [r4, #4]
	SysTick->VAL = val;
    1284:	f8c4 8008 	str.w	r8, [r4, #8]
	SysTick->CTRL = ctrl;
    1288:	6027      	str	r7, [r4, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    128a:	b12e      	cbz	r6, 1298 <bpm_power_scaling_cpu_failsafe+0x60>
		cpu_irq_enable();
    128c:	2201      	movs	r2, #1
    128e:	4b04      	ldr	r3, [pc, #16]	; (12a0 <bpm_power_scaling_cpu_failsafe+0x68>)
    1290:	701a      	strb	r2, [r3, #0]
    1292:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1296:	b662      	cpsie	i

	cpu_irq_restore(flags);
	return b_psok;
}
    1298:	b003      	add	sp, #12
    129a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    129e:	bf00      	nop
    12a0:	20000038 	.word	0x20000038
    12a4:	e000e010 	.word	0xe000e010
    12a8:	2000000d 	.word	0x2000000d

000012ac <bpm_get_status>:
	bpm->BPM_ICR = sources;
}

uint32_t bpm_get_status(Bpm *bpm)
{
	return bpm->BPM_SR;
    12ac:	6940      	ldr	r0, [r0, #20]
}
    12ae:	4770      	bx	lr

000012b0 <wdt_set_ctrl>:
 *        to the WatchDog Timer key.
 *
 * \param ctrl  Value to set the WatchDog Timer Control register to.
 */
static void wdt_set_ctrl(uint32_t ctrl)
{
    12b0:	b082      	sub	sp, #8
	volatile uint32_t dly;

	/* Calculate delay for internal synchronization, see 44.1.2 WDT errata */
	if ((WDT->WDT_CTRL & WDT_CTRL_CSSEL) == WDT_CLK_SRC_RCSYS) {
    12b2:	4b0c      	ldr	r3, [pc, #48]	; (12e4 <wdt_set_ctrl+0x34>)
    12b4:	681b      	ldr	r3, [r3, #0]
    12b6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RCSYS_NOMINAL_HZ);
    12ba:	bf0c      	ite	eq
    12bc:	2302      	moveq	r3, #2
	} else { /* WDT_CLK_SRC_32K */
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RC32K_NOMINAL_HZ);
    12be:	2308      	movne	r3, #8
    12c0:	9301      	str	r3, [sp, #4]
	}
	dly >>= 3; /* ~8 cycles for one while loop */
    12c2:	9b01      	ldr	r3, [sp, #4]
    12c4:	08db      	lsrs	r3, r3, #3
    12c6:	9301      	str	r3, [sp, #4]
	while(dly--);
    12c8:	9b01      	ldr	r3, [sp, #4]
    12ca:	1e5a      	subs	r2, r3, #1
    12cc:	9201      	str	r2, [sp, #4]
    12ce:	2b00      	cmp	r3, #0
    12d0:	d1fa      	bne.n	12c8 <wdt_set_ctrl+0x18>
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_FIRST_KEY);
    12d2:	f040 42aa 	orr.w	r2, r0, #1426063360	; 0x55000000
    12d6:	4b03      	ldr	r3, [pc, #12]	; (12e4 <wdt_set_ctrl+0x34>)
    12d8:	601a      	str	r2, [r3, #0]
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_SECOND_KEY);
    12da:	f040 402a 	orr.w	r0, r0, #2852126720	; 0xaa000000
    12de:	6018      	str	r0, [r3, #0]
}
    12e0:	b002      	add	sp, #8
    12e2:	4770      	bx	lr
    12e4:	400f0c00 	.word	0x400f0c00

000012e8 <wdt_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(cfg);

	/* Default configuration values */
	cfg->clk_src = WDT_CLK_SRC_RCSYS;
    12e8:	2300      	movs	r3, #0
    12ea:	6003      	str	r3, [r0, #0]
	cfg->wdt_mode = WDT_MODE_BASIC;
    12ec:	6043      	str	r3, [r0, #4]
	cfg->wdt_int = WDT_INT_DIS;
    12ee:	6083      	str	r3, [r0, #8]
	cfg->timeout_period = WDT_PERIOD_131072_CLK;
    12f0:	2210      	movs	r2, #16
    12f2:	7302      	strb	r2, [r0, #12]
	cfg->window_period = WDT_PERIOD_NONE;
    12f4:	7343      	strb	r3, [r0, #13]
	cfg->disable_flash_cali = true;
    12f6:	2201      	movs	r2, #1
    12f8:	7382      	strb	r2, [r0, #14]
	cfg->disable_wdt_after_reset = true;
    12fa:	73c2      	strb	r2, [r0, #15]
	cfg->always_on = false;
    12fc:	7403      	strb	r3, [r0, #16]
    12fe:	4770      	bx	lr

00001300 <wdt_init>:
 */
bool wdt_init(
		struct wdt_dev_inst *const dev_inst,
		Wdt *const wdt,
		struct wdt_config *const cfg)
{
    1300:	b570      	push	{r4, r5, r6, lr}
    1302:	460c      	mov	r4, r1
    1304:	4616      	mov	r6, r2
	/* Sanity check arguments */
	Assert(dev_inst);
	Assert(wdt);
	Assert(cfg);

	dev_inst->hw_dev = wdt;
    1306:	6001      	str	r1, [r0, #0]
	dev_inst->wdt_cfg = cfg;
    1308:	6042      	str	r2, [r0, #4]

	/* Enable APB clock for WDT */
	sysclk_enable_peripheral_clock(wdt);
    130a:	4608      	mov	r0, r1
    130c:	4b25      	ldr	r3, [pc, #148]	; (13a4 <wdt_init+0xa4>)
    130e:	4798      	blx	r3

	/* Check SFV bit: if SFV bit is set, Control Register is locked */
	if (wdt->WDT_CTRL & WDT_CTRL_SFV) {
    1310:	6825      	ldr	r5, [r4, #0]
    1312:	f015 0508 	ands.w	r5, r5, #8
    1316:	d142      	bne.n	139e <wdt_init+0x9e>
		return false;
	}

	/* Disable the WDT */
	if (wdt->WDT_CTRL & WDT_CTRL_EN) {
    1318:	6823      	ldr	r3, [r4, #0]
    131a:	f013 0f01 	tst.w	r3, #1
    131e:	d008      	beq.n	1332 <wdt_init+0x32>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    1320:	6820      	ldr	r0, [r4, #0]
    1322:	f020 0001 	bic.w	r0, r0, #1
    1326:	4b20      	ldr	r3, [pc, #128]	; (13a8 <wdt_init+0xa8>)
    1328:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    132a:	6823      	ldr	r3, [r4, #0]
    132c:	f013 0f01 	tst.w	r3, #1
    1330:	d1fb      	bne.n	132a <wdt_init+0x2a>
		}
	}
	/* Disable the WDT clock */
	if (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    1332:	6823      	ldr	r3, [r4, #0]
    1334:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1338:	d008      	beq.n	134c <wdt_init+0x4c>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_CEN);
    133a:	6820      	ldr	r0, [r4, #0]
    133c:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    1340:	4b19      	ldr	r3, [pc, #100]	; (13a8 <wdt_init+0xa8>)
    1342:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    1344:	6823      	ldr	r3, [r4, #0]
    1346:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    134a:	d1fb      	bne.n	1344 <wdt_init+0x44>

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
			cfg->wdt_mode |
			cfg->wdt_int |
			WDT_CTRL_PSEL(cfg->timeout_period) |
    134c:	6830      	ldr	r0, [r6, #0]
    134e:	6873      	ldr	r3, [r6, #4]
    1350:	4318      	orrs	r0, r3
    1352:	68b3      	ldr	r3, [r6, #8]
    1354:	4318      	orrs	r0, r3
    1356:	7b33      	ldrb	r3, [r6, #12]
    1358:	021b      	lsls	r3, r3, #8
    135a:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    135e:	4318      	orrs	r0, r3
    1360:	7b73      	ldrb	r3, [r6, #13]
    1362:	049b      	lsls	r3, r3, #18
    1364:	f403 03f8 	and.w	r3, r3, #8126464	; 0x7c0000
    1368:	4303      	orrs	r3, r0
			WDT_CTRL_TBAN(cfg->window_period) |
    136a:	7bb2      	ldrb	r2, [r6, #14]
    136c:	2a00      	cmp	r2, #0
    136e:	bf0c      	ite	eq
    1370:	4628      	moveq	r0, r5
    1372:	2080      	movne	r0, #128	; 0x80
    1374:	4318      	orrs	r0, r3
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    1376:	7bf3      	ldrb	r3, [r6, #15]
    1378:	2b00      	cmp	r3, #0
    137a:	bf18      	it	ne
    137c:	2502      	movne	r5, #2
    137e:	4328      	orrs	r0, r5
    1380:	4d09      	ldr	r5, [pc, #36]	; (13a8 <wdt_init+0xa8>)
    1382:	47a8      	blx	r5
			WDT_CTRL_PSEL(cfg->timeout_period) |
			WDT_CTRL_TBAN(cfg->window_period) |
			(cfg->disable_flash_cali ? WDT_CTRL_FCD : 0) |
			(cfg->disable_wdt_after_reset ? WDT_CTRL_DAR : 0)
	);
	wdt_set_ctrl(wdt->WDT_CTRL | WDT_CTRL_CEN);
    1384:	6820      	ldr	r0, [r4, #0]
    1386:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    138a:	47a8      	blx	r5
	while (!(wdt->WDT_CTRL & WDT_CTRL_CEN)) {
    138c:	6823      	ldr	r3, [r4, #0]
    138e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1392:	d0fb      	beq.n	138c <wdt_init+0x8c>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    1394:	4620      	mov	r0, r4
    1396:	4b05      	ldr	r3, [pc, #20]	; (13ac <wdt_init+0xac>)
    1398:	4798      	blx	r3

	return true;
    139a:	2001      	movs	r0, #1
    139c:	bd70      	pop	{r4, r5, r6, pc}
	/* Enable APB clock for WDT */
	sysclk_enable_peripheral_clock(wdt);

	/* Check SFV bit: if SFV bit is set, Control Register is locked */
	if (wdt->WDT_CTRL & WDT_CTRL_SFV) {
		return false;
    139e:	2000      	movs	r0, #0

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);

	return true;
}
    13a0:	bd70      	pop	{r4, r5, r6, pc}
    13a2:	bf00      	nop
    13a4:	0000095d 	.word	0x0000095d
    13a8:	000012b1 	.word	0x000012b1
    13ac:	00000d5d 	.word	0x00000d5d

000013b0 <wdt_disable>:
 * \brief Disable the WDT module.
 *
 * \param dev_inst    Device structure pointer.
 */
void wdt_disable(struct wdt_dev_inst *const dev_inst)
{
    13b0:	b510      	push	{r4, lr}
	Wdt *wdt = dev_inst->hw_dev;
    13b2:	6804      	ldr	r4, [r0, #0]

	/* Disable the WDT */
	wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    13b4:	6820      	ldr	r0, [r4, #0]
    13b6:	f020 0001 	bic.w	r0, r0, #1
    13ba:	4b05      	ldr	r3, [pc, #20]	; (13d0 <wdt_disable+0x20>)
    13bc:	4798      	blx	r3
	while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    13be:	6823      	ldr	r3, [r4, #0]
    13c0:	f013 0f01 	tst.w	r3, #1
    13c4:	d1fb      	bne.n	13be <wdt_disable+0xe>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    13c6:	4620      	mov	r0, r4
    13c8:	4b02      	ldr	r3, [pc, #8]	; (13d4 <wdt_disable+0x24>)
    13ca:	4798      	blx	r3
    13cc:	bd10      	pop	{r4, pc}
    13ce:	bf00      	nop
    13d0:	000012b1 	.word	0x000012b1
    13d4:	00000d5d 	.word	0x00000d5d

000013d8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    13d8:	e7fe      	b.n	13d8 <Dummy_Handler>
    13da:	bf00      	nop

000013dc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    13dc:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
    13de:	4b19      	ldr	r3, [pc, #100]	; (1444 <Reset_Handler+0x68>)
    13e0:	4a19      	ldr	r2, [pc, #100]	; (1448 <Reset_Handler+0x6c>)
    13e2:	429a      	cmp	r2, r3
    13e4:	d003      	beq.n	13ee <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
    13e6:	4b19      	ldr	r3, [pc, #100]	; (144c <Reset_Handler+0x70>)
    13e8:	4a16      	ldr	r2, [pc, #88]	; (1444 <Reset_Handler+0x68>)
    13ea:	429a      	cmp	r2, r3
    13ec:	d304      	bcc.n	13f8 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    13ee:	4b18      	ldr	r3, [pc, #96]	; (1450 <Reset_Handler+0x74>)
    13f0:	4a18      	ldr	r2, [pc, #96]	; (1454 <Reset_Handler+0x78>)
    13f2:	429a      	cmp	r2, r3
    13f4:	d30f      	bcc.n	1416 <Reset_Handler+0x3a>
    13f6:	e01a      	b.n	142e <Reset_Handler+0x52>
    13f8:	4912      	ldr	r1, [pc, #72]	; (1444 <Reset_Handler+0x68>)
    13fa:	4b17      	ldr	r3, [pc, #92]	; (1458 <Reset_Handler+0x7c>)
    13fc:	1a5b      	subs	r3, r3, r1
    13fe:	f023 0303 	bic.w	r3, r3, #3
    1402:	3304      	adds	r3, #4
    1404:	4a10      	ldr	r2, [pc, #64]	; (1448 <Reset_Handler+0x6c>)
    1406:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
    1408:	f852 0b04 	ldr.w	r0, [r2], #4
    140c:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    1410:	429a      	cmp	r2, r3
    1412:	d1f9      	bne.n	1408 <Reset_Handler+0x2c>
    1414:	e7eb      	b.n	13ee <Reset_Handler+0x12>
    1416:	4b11      	ldr	r3, [pc, #68]	; (145c <Reset_Handler+0x80>)
    1418:	4a11      	ldr	r2, [pc, #68]	; (1460 <Reset_Handler+0x84>)
    141a:	1ad2      	subs	r2, r2, r3
    141c:	f022 0203 	bic.w	r2, r2, #3
    1420:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    1422:	3b04      	subs	r3, #4
		*pDest++ = 0;
    1424:	2100      	movs	r1, #0
    1426:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    142a:	4293      	cmp	r3, r2
    142c:	d1fb      	bne.n	1426 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) &_sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    142e:	4a0d      	ldr	r2, [pc, #52]	; (1464 <Reset_Handler+0x88>)
    1430:	4b0d      	ldr	r3, [pc, #52]	; (1468 <Reset_Handler+0x8c>)
    1432:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1436:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
    1438:	4b0c      	ldr	r3, [pc, #48]	; (146c <Reset_Handler+0x90>)
    143a:	4798      	blx	r3

	/* Branch to main function */
	main();
    143c:	4b0c      	ldr	r3, [pc, #48]	; (1470 <Reset_Handler+0x94>)
    143e:	4798      	blx	r3
    1440:	e7fe      	b.n	1440 <Reset_Handler+0x64>
    1442:	bf00      	nop
    1444:	20000000 	.word	0x20000000
    1448:	000049fc 	.word	0x000049fc
    144c:	200008a4 	.word	0x200008a4
    1450:	20000940 	.word	0x20000940
    1454:	200008a4 	.word	0x200008a4
    1458:	200008a3 	.word	0x200008a3
    145c:	200008a8 	.word	0x200008a8
    1460:	20000943 	.word	0x20000943
    1464:	e000ed00 	.word	0xe000ed00
    1468:	00000000 	.word	0x00000000
    146c:	00001ba9 	.word	0x00001ba9
    1470:	00001781 	.word	0x00001781

00001474 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
    1474:	4b09      	ldr	r3, [pc, #36]	; (149c <_sbrk+0x28>)
    1476:	681b      	ldr	r3, [r3, #0]
    1478:	b913      	cbnz	r3, 1480 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
    147a:	4a09      	ldr	r2, [pc, #36]	; (14a0 <_sbrk+0x2c>)
    147c:	4b07      	ldr	r3, [pc, #28]	; (149c <_sbrk+0x28>)
    147e:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    1480:	4b06      	ldr	r3, [pc, #24]	; (149c <_sbrk+0x28>)
    1482:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
    1484:	181a      	adds	r2, r3, r0
    1486:	4907      	ldr	r1, [pc, #28]	; (14a4 <_sbrk+0x30>)
    1488:	4291      	cmp	r1, r2
    148a:	db04      	blt.n	1496 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
    148c:	4610      	mov	r0, r2
    148e:	4a03      	ldr	r2, [pc, #12]	; (149c <_sbrk+0x28>)
    1490:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
    1492:	4618      	mov	r0, r3
    1494:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
    1496:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
    149a:	4770      	bx	lr
    149c:	200008f8 	.word	0x200008f8
    14a0:	20001940 	.word	0x20001940
    14a4:	20007ffc 	.word	0x20007ffc

000014a8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    14a8:	f04f 30ff 	mov.w	r0, #4294967295
    14ac:	4770      	bx	lr
    14ae:	bf00      	nop

000014b0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    14b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    14b4:	604b      	str	r3, [r1, #4]

	return 0;
}
    14b6:	2000      	movs	r0, #0
    14b8:	4770      	bx	lr
    14ba:	bf00      	nop

000014bc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    14bc:	2001      	movs	r0, #1
    14be:	4770      	bx	lr

000014c0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    14c0:	2000      	movs	r0, #0
    14c2:	4770      	bx	lr

000014c4 <buttonHandler_SW0>:
	// Clear current interrupts before enabling.
	gpio_clear_pin_interrupt_flag(pin);
	gpio_enable_pin_interrupt(pin);
}

void buttonHandler_SW0(void) {
    14c4:	b508      	push	{r3, lr}
	printf("Button 0 \r\n");
    14c6:	4802      	ldr	r0, [pc, #8]	; (14d0 <buttonHandler_SW0+0xc>)
    14c8:	4b02      	ldr	r3, [pc, #8]	; (14d4 <buttonHandler_SW0+0x10>)
    14ca:	4798      	blx	r3
    14cc:	bd08      	pop	{r3, pc}
    14ce:	bf00      	nop
    14d0:	000048d4 	.word	0x000048d4
    14d4:	00001bf9 	.word	0x00001bf9

000014d8 <buttonHandler_EXT9>:
}

void buttonHandler_EXT9(void) {
    14d8:	b508      	push	{r3, lr}
	printf("Button 1 \r\n");
    14da:	4802      	ldr	r0, [pc, #8]	; (14e4 <buttonHandler_EXT9+0xc>)
    14dc:	4b02      	ldr	r3, [pc, #8]	; (14e8 <buttonHandler_EXT9+0x10>)
    14de:	4798      	blx	r3
    14e0:	bd08      	pop	{r3, pc}
    14e2:	bf00      	nop
    14e4:	000048e0 	.word	0x000048e0
    14e8:	00001bf9 	.word	0x00001bf9

000014ec <buttonHandler_EXT3>:
}

void buttonHandler_EXT3(void) {
    14ec:	b508      	push	{r3, lr}
	printf("Button 2 \r\n");
    14ee:	4802      	ldr	r0, [pc, #8]	; (14f8 <buttonHandler_EXT3+0xc>)
    14f0:	4b02      	ldr	r3, [pc, #8]	; (14fc <buttonHandler_EXT3+0x10>)
    14f2:	4798      	blx	r3
    14f4:	bd08      	pop	{r3, pc}
    14f6:	bf00      	nop
    14f8:	000048ec 	.word	0x000048ec
    14fc:	00001bf9 	.word	0x00001bf9

00001500 <buttonHandler_EXT4>:
}

void buttonHandler_EXT4(void) {
    1500:	b508      	push	{r3, lr}
	printf("Button 3 \r\n");
    1502:	4802      	ldr	r0, [pc, #8]	; (150c <buttonHandler_EXT4+0xc>)
    1504:	4b02      	ldr	r3, [pc, #8]	; (1510 <buttonHandler_EXT4+0x10>)
    1506:	4798      	blx	r3
    1508:	bd08      	pop	{r3, pc}
    150a:	bf00      	nop
    150c:	000048f8 	.word	0x000048f8
    1510:	00001bf9 	.word	0x00001bf9

00001514 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
    1514:	b570      	push	{r4, r5, r6, lr}
    1516:	460c      	mov	r4, r1
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
    1518:	4b18      	ldr	r3, [pc, #96]	; (157c <usart_serial_putchar+0x68>)
    151a:	4298      	cmp	r0, r3
    151c:	d108      	bne.n	1530 <usart_serial_putchar+0x1c>
		while (usart_write(p_usart, c)!=0);
    151e:	461e      	mov	r6, r3
    1520:	4d17      	ldr	r5, [pc, #92]	; (1580 <usart_serial_putchar+0x6c>)
    1522:	4621      	mov	r1, r4
    1524:	4630      	mov	r0, r6
    1526:	47a8      	blx	r5
    1528:	2800      	cmp	r0, #0
    152a:	d1fa      	bne.n	1522 <usart_serial_putchar+0xe>
		return 1;
    152c:	2001      	movs	r0, #1
    152e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
    1530:	4b14      	ldr	r3, [pc, #80]	; (1584 <usart_serial_putchar+0x70>)
    1532:	4298      	cmp	r0, r3
    1534:	d108      	bne.n	1548 <usart_serial_putchar+0x34>
		while (usart_write(p_usart, c)!=0);
    1536:	461e      	mov	r6, r3
    1538:	4d11      	ldr	r5, [pc, #68]	; (1580 <usart_serial_putchar+0x6c>)
    153a:	4621      	mov	r1, r4
    153c:	4630      	mov	r0, r6
    153e:	47a8      	blx	r5
    1540:	2800      	cmp	r0, #0
    1542:	d1fa      	bne.n	153a <usart_serial_putchar+0x26>
		return 1;
    1544:	2001      	movs	r0, #1
    1546:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
    1548:	4b0f      	ldr	r3, [pc, #60]	; (1588 <usart_serial_putchar+0x74>)
    154a:	4298      	cmp	r0, r3
    154c:	d108      	bne.n	1560 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
    154e:	461e      	mov	r6, r3
    1550:	4d0b      	ldr	r5, [pc, #44]	; (1580 <usart_serial_putchar+0x6c>)
    1552:	4621      	mov	r1, r4
    1554:	4630      	mov	r0, r6
    1556:	47a8      	blx	r5
    1558:	2800      	cmp	r0, #0
    155a:	d1fa      	bne.n	1552 <usart_serial_putchar+0x3e>
		return 1;
    155c:	2001      	movs	r0, #1
    155e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
    1560:	4b0a      	ldr	r3, [pc, #40]	; (158c <usart_serial_putchar+0x78>)
    1562:	4298      	cmp	r0, r3
    1564:	d108      	bne.n	1578 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
    1566:	461e      	mov	r6, r3
    1568:	4d05      	ldr	r5, [pc, #20]	; (1580 <usart_serial_putchar+0x6c>)
    156a:	4621      	mov	r1, r4
    156c:	4630      	mov	r0, r6
    156e:	47a8      	blx	r5
    1570:	2800      	cmp	r0, #0
    1572:	d1fa      	bne.n	156a <usart_serial_putchar+0x56>
		return 1;
    1574:	2001      	movs	r0, #1
    1576:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
    1578:	2000      	movs	r0, #0
}
    157a:	bd70      	pop	{r4, r5, r6, pc}
    157c:	40024000 	.word	0x40024000
    1580:	0000030d 	.word	0x0000030d
    1584:	40028000 	.word	0x40028000
    1588:	4002c000 	.word	0x4002c000
    158c:	40030000 	.word	0x40030000

00001590 <setupLED>:
}

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
    1590:	0943      	lsrs	r3, r0, #5
    1592:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    1596:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    159a:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    159c:	f000 001f 	and.w	r0, r0, #31
    15a0:	2201      	movs	r2, #1
    15a2:	fa02 f000 	lsl.w	r0, r2, r0

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    15a6:	6458      	str	r0, [r3, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    15a8:	f8c3 0168 	str.w	r0, [r3, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    15ac:	6558      	str	r0, [r3, #84]	; 0x54
    15ae:	4770      	bx	lr

000015b0 <setupButton>:
void setupLED(ioport_pin_t pin) {
	ioport_set_pin_dir(pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(pin, IOPORT_PIN_LEVEL_HIGH);
}

void setupButton(ioport_pin_t pin) {
    15b0:	b538      	push	{r3, r4, r5, lr}

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    15b2:	0944      	lsrs	r4, r0, #5
    15b4:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
    15b8:	f504 64e1 	add.w	r4, r4, #1800	; 0x708
    15bc:	0264      	lsls	r4, r4, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    15be:	f000 031f 	and.w	r3, r0, #31
    15c2:	2501      	movs	r5, #1
    15c4:	409d      	lsls	r5, r3
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    15c6:	64a5      	str	r5, [r4, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    15c8:	f8c4 5164 	str.w	r5, [r4, #356]	; 0x164
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
    15cc:	6765      	str	r5, [r4, #116]	; 0x74

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    15ce:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    15d2:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    15d6:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    15da:	61a5      	str	r5, [r4, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    15dc:	62a5      	str	r5, [r4, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    15de:	63a5      	str	r5, [r4, #56]	; 0x38
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (pin_sense & 0x01) {
		base->GPIO_IMR0S = mask;
	} else {
		base->GPIO_IMR0C = mask;
    15e0:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
	}

	if (pin_sense & 0x02) {
		base->GPIO_IMR1S = mask;
    15e4:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
	ioport_set_pin_sense_mode(pin, IOPORT_SENSE_FALLING);
	
	// Get the corresponding LED and callback for the interrupt.
	ioport_pin_t LED_PIN;
	gpio_pin_callback_t callbackFunction;
	switch(pin) {
    15e8:	2805      	cmp	r0, #5
    15ea:	d01c      	beq.n	1626 <setupButton+0x76>
    15ec:	d802      	bhi.n	15f4 <setupButton+0x44>
    15ee:	2804      	cmp	r0, #4
    15f0:	d013      	beq.n	161a <setupButton+0x6a>
    15f2:	e01d      	b.n	1630 <setupButton+0x80>
    15f4:	2858      	cmp	r0, #88	; 0x58
    15f6:	d002      	beq.n	15fe <setupButton+0x4e>
    15f8:	2859      	cmp	r0, #89	; 0x59
    15fa:	d007      	beq.n	160c <setupButton+0x5c>
    15fc:	e018      	b.n	1630 <setupButton+0x80>
	case PIN_PC24:
		LED_PIN = LED0;
		callbackFunction = buttonHandler_SW0;
		// Set the glitch filter.
		GPIO->GPIO_PORT[IOPORT_GPIOC].GPIO_GFERS = (1u << 24);
    15fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    1602:	4b0f      	ldr	r3, [pc, #60]	; (1640 <setupButton+0x90>)
    1604:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
	ioport_pin_t LED_PIN;
	gpio_pin_callback_t callbackFunction;
	switch(pin) {
	case PIN_PC24:
		LED_PIN = LED0;
		callbackFunction = buttonHandler_SW0;
    1608:	490e      	ldr	r1, [pc, #56]	; (1644 <setupButton+0x94>)
		// Set the glitch filter.
		GPIO->GPIO_PORT[IOPORT_GPIOC].GPIO_GFERS = (1u << 24);
		break;
    160a:	e011      	b.n	1630 <setupButton+0x80>
	case EXT1_PIN_9:
		LED_PIN = EXT1_PIN_7;
		callbackFunction = buttonHandler_EXT9;
		// Set the glitch filter.
		GPIO->GPIO_PORT[IOPORT_GPIOC].GPIO_GFERS = (1u << 25);
    160c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    1610:	4b0b      	ldr	r3, [pc, #44]	; (1640 <setupButton+0x90>)
    1612:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
		// Set the glitch filter.
		GPIO->GPIO_PORT[IOPORT_GPIOC].GPIO_GFERS = (1u << 24);
		break;
	case EXT1_PIN_9:
		LED_PIN = EXT1_PIN_7;
		callbackFunction = buttonHandler_EXT9;
    1616:	490c      	ldr	r1, [pc, #48]	; (1648 <setupButton+0x98>)
		// Set the glitch filter.
		GPIO->GPIO_PORT[IOPORT_GPIOC].GPIO_GFERS = (1u << 25);
		break;
    1618:	e00a      	b.n	1630 <setupButton+0x80>
	case EXT1_PIN_3:
		LED_PIN = EXT1_PIN_8;
		callbackFunction = buttonHandler_EXT3;
		// Set the glitch filter.
		GPIO->GPIO_PORT[IOPORT_GPIOA].GPIO_GFERS = (1u << 4);
    161a:	2210      	movs	r2, #16
    161c:	4b08      	ldr	r3, [pc, #32]	; (1640 <setupButton+0x90>)
    161e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		// Set the glitch filter.
		GPIO->GPIO_PORT[IOPORT_GPIOC].GPIO_GFERS = (1u << 25);
		break;
	case EXT1_PIN_3:
		LED_PIN = EXT1_PIN_8;
		callbackFunction = buttonHandler_EXT3;
    1622:	490a      	ldr	r1, [pc, #40]	; (164c <setupButton+0x9c>)
		// Set the glitch filter.
		GPIO->GPIO_PORT[IOPORT_GPIOA].GPIO_GFERS = (1u << 4);
		break;
    1624:	e004      	b.n	1630 <setupButton+0x80>
	case EXT1_PIN_4:
		LED_PIN = EXT1_PIN_6;
		callbackFunction = buttonHandler_EXT4;
		// Set the glitch filter.
		GPIO->GPIO_PORT[IOPORT_GPIOA].GPIO_GFERS = (1u << 5);
    1626:	2220      	movs	r2, #32
    1628:	4b05      	ldr	r3, [pc, #20]	; (1640 <setupButton+0x90>)
    162a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		// Set the glitch filter.
		GPIO->GPIO_PORT[IOPORT_GPIOA].GPIO_GFERS = (1u << 4);
		break;
	case EXT1_PIN_4:
		LED_PIN = EXT1_PIN_6;
		callbackFunction = buttonHandler_EXT4;
    162e:	4908      	ldr	r1, [pc, #32]	; (1650 <setupButton+0xa0>)
		break;	
	}
	
	// Setup the button interrupts.
	// Tell the controller to call the button handler function with priority 1.
	gpio_set_pin_callback(pin, callbackFunction, 1);
    1630:	2201      	movs	r2, #1
    1632:	4b08      	ldr	r3, [pc, #32]	; (1654 <setupButton+0xa4>)
    1634:	4798      	blx	r3
 * \param [in] pin The pin number
 */
static inline void gpio_clear_pin_interrupt_flag(ioport_pin_t pin)
{
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[ioport_pin_to_port_id(pin)]);
	gpio_port->GPIO_IFRC = ioport_pin_to_mask(pin);
    1636:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 * \param [in] pin The pin number
 */
static inline void gpio_enable_pin_interrupt(ioport_pin_t pin)
{
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[ioport_pin_to_port_id(pin)]);
	gpio_port->GPIO_IERS = ioport_pin_to_mask(pin);
    163a:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
    163e:	bd38      	pop	{r3, r4, r5, pc}
    1640:	400e1000 	.word	0x400e1000
    1644:	000014c5 	.word	0x000014c5
    1648:	000014d9 	.word	0x000014d9
    164c:	000014ed 	.word	0x000014ed
    1650:	00001501 	.word	0x00001501
    1654:	000003f9 	.word	0x000003f9

00001658 <lightLED>:
	char ledToToggle;
	usart_serial_getchar(USART1, &ledToToggle);
	lightLED(ledToToggle);
}

void lightLED(char ledToToggle) {
    1658:	b508      	push	{r3, lr}
	
	//printf(" %c \r\n", ledToToggle);
	
	switch(ledToToggle) {
    165a:	3830      	subs	r0, #48	; 0x30
    165c:	2803      	cmp	r0, #3
    165e:	d813      	bhi.n	1688 <lightLED+0x30>
    1660:	e8df f000 	tbb	[pc, r0]
    1664:	0e0a0602 	.word	0x0e0a0602
	return arch_ioport_port_to_base(port)->GPIO_PVR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	arch_ioport_pin_to_base(pin)->GPIO_OVRT = arch_ioport_pin_to_mask(pin);
    1668:	2280      	movs	r2, #128	; 0x80
    166a:	4b09      	ldr	r3, [pc, #36]	; (1690 <lightLED+0x38>)
    166c:	65da      	str	r2, [r3, #92]	; 0x5c
    166e:	bd08      	pop	{r3, pc}
    1670:	2201      	movs	r2, #1
    1672:	4b07      	ldr	r3, [pc, #28]	; (1690 <lightLED+0x38>)
    1674:	65da      	str	r2, [r3, #92]	; 0x5c
    1676:	bd08      	pop	{r3, pc}
    1678:	2202      	movs	r2, #2
    167a:	4b05      	ldr	r3, [pc, #20]	; (1690 <lightLED+0x38>)
    167c:	65da      	str	r2, [r3, #92]	; 0x5c
    167e:	bd08      	pop	{r3, pc}
    1680:	2204      	movs	r2, #4
    1682:	4b03      	ldr	r3, [pc, #12]	; (1690 <lightLED+0x38>)
    1684:	65da      	str	r2, [r3, #92]	; 0x5c
    1686:	bd08      	pop	{r3, pc}
		break;
		case '3':
		ioport_toggle_pin_level(EXT1_PIN_6);
		break;
		default:
		printf("Unknown number! \r\n");
    1688:	4802      	ldr	r0, [pc, #8]	; (1694 <lightLED+0x3c>)
    168a:	4b03      	ldr	r3, [pc, #12]	; (1698 <lightLED+0x40>)
    168c:	4798      	blx	r3
    168e:	bd08      	pop	{r3, pc}
    1690:	400e1400 	.word	0x400e1400
    1694:	00004904 	.word	0x00004904
    1698:	00001bf9 	.word	0x00001bf9

0000169c <handleInput>:

void buttonHandler_EXT4(void) {
	printf("Button 3 \r\n");
}

void handleInput(void) {
    169c:	b570      	push	{r4, r5, r6, lr}
    169e:	b082      	sub	sp, #8
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
    16a0:	ac02      	add	r4, sp, #8
    16a2:	2300      	movs	r3, #0
    16a4:	f844 3d04 	str.w	r3, [r4, #-4]!
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_read(p_usart, &val));
    16a8:	4e06      	ldr	r6, [pc, #24]	; (16c4 <handleInput+0x28>)
    16aa:	4d07      	ldr	r5, [pc, #28]	; (16c8 <handleInput+0x2c>)
    16ac:	4621      	mov	r1, r4
    16ae:	4630      	mov	r0, r6
    16b0:	47a8      	blx	r5
    16b2:	2800      	cmp	r0, #0
    16b4:	d1fa      	bne.n	16ac <handleInput+0x10>
	// SET RX pin to interrupt?
	char ledToToggle;
	usart_serial_getchar(USART1, &ledToToggle);
	lightLED(ledToToggle);
    16b6:	f89d 0004 	ldrb.w	r0, [sp, #4]
    16ba:	4b04      	ldr	r3, [pc, #16]	; (16cc <handleInput+0x30>)
    16bc:	4798      	blx	r3
}
    16be:	b002      	add	sp, #8
    16c0:	bd70      	pop	{r4, r5, r6, pc}
    16c2:	bf00      	nop
    16c4:	40028000 	.word	0x40028000
    16c8:	00000321 	.word	0x00000321
    16cc:	00001659 	.word	0x00001659

000016d0 <sendChar>:
		break;
		
	}
}

void sendChar(uint16_t baudRate, char c) {
    16d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    16d4:	4d24      	ldr	r5, [pc, #144]	; (1768 <sendChar+0x98>)
    16d6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
    16da:	65ae      	str	r6, [r5, #88]	; 0x58
	uint16_t bitRate = 1000000/baudRate;
	
	// Pull low, default is high -- start bit
	ioport_set_pin_level(PIN_USART_TX, false);
	delay_us(bitRate);
    16dc:	4b23      	ldr	r3, [pc, #140]	; (176c <sendChar+0x9c>)
    16de:	fb93 f0f0 	sdiv	r0, r3, r0
    16e2:	b280      	uxth	r0, r0
    16e4:	4b22      	ldr	r3, [pc, #136]	; (1770 <sendChar+0xa0>)
    16e6:	fba0 8903 	umull	r8, r9, r0, r3
    16ea:	f8df a090 	ldr.w	sl, [pc, #144]	; 177c <sendChar+0xac>
    16ee:	4a21      	ldr	r2, [pc, #132]	; (1774 <sendChar+0xa4>)
    16f0:	2300      	movs	r3, #0
    16f2:	a11b      	add	r1, pc, #108	; (adr r1, 1760 <sendChar+0x90>)
    16f4:	e9d1 0100 	ldrd	r0, r1, [r1]
    16f8:	eb10 0008 	adds.w	r0, r0, r8
    16fc:	eb41 0109 	adc.w	r1, r1, r9
    1700:	47d0      	blx	sl
    1702:	4607      	mov	r7, r0
    1704:	4c1c      	ldr	r4, [pc, #112]	; (1778 <sendChar+0xa8>)
    1706:	47a0      	blx	r4

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    1708:	656e      	str	r6, [r5, #84]	; 0x54
	ioport_set_pin_level(PIN_USART_TX, true);
	delay_us(bitRate);
    170a:	4638      	mov	r0, r7
    170c:	47a0      	blx	r4
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    170e:	65ae      	str	r6, [r5, #88]	; 0x58
	
	ioport_set_pin_level(PIN_USART_TX, false);
	delay_us(bitRate);
    1710:	4638      	mov	r0, r7
    1712:	47a0      	blx	r4

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    1714:	656e      	str	r6, [r5, #84]	; 0x54
	ioport_set_pin_level(PIN_USART_TX, true);
	delay_us(bitRate);
    1716:	4638      	mov	r0, r7
    1718:	47a0      	blx	r4
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    171a:	65ae      	str	r6, [r5, #88]	; 0x58
	ioport_set_pin_level(PIN_USART_TX, false);
	delay_us(bitRate);
    171c:	4638      	mov	r0, r7
    171e:	47a0      	blx	r4
    1720:	65ae      	str	r6, [r5, #88]	; 0x58
	ioport_set_pin_level(PIN_USART_TX, false);
	delay_us(bitRate);
    1722:	4638      	mov	r0, r7
    1724:	47a0      	blx	r4
    1726:	65ae      	str	r6, [r5, #88]	; 0x58
	ioport_set_pin_level(PIN_USART_TX, false);
	delay_us(bitRate);
    1728:	4638      	mov	r0, r7
    172a:	47a0      	blx	r4
    172c:	65ae      	str	r6, [r5, #88]	; 0x58
	ioport_set_pin_level(PIN_USART_TX, false);
	delay_us(bitRate);
    172e:	4638      	mov	r0, r7
    1730:	47a0      	blx	r4
    1732:	65ae      	str	r6, [r5, #88]	; 0x58
	ioport_set_pin_level(PIN_USART_TX, false);
	delay_us(bitRate);
    1734:	4638      	mov	r0, r7
    1736:	47a0      	blx	r4
    1738:	65ae      	str	r6, [r5, #88]	; 0x58
	ioport_set_pin_level(PIN_USART_TX, false);
	delay_us(bitRate);
    173a:	4638      	mov	r0, r7
    173c:	47a0      	blx	r4

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    173e:	656e      	str	r6, [r5, #84]	; 0x54
	
	// High -- stop bit
	ioport_set_pin_level(PIN_USART_TX, true);
	delay_ms(bitRate);
    1740:	f243 62b0 	movw	r2, #14000	; 0x36b0
    1744:	2300      	movs	r3, #0
    1746:	f243 60af 	movw	r0, #13999	; 0x36af
    174a:	2100      	movs	r1, #0
    174c:	eb10 0008 	adds.w	r0, r0, r8
    1750:	eb41 0109 	adc.w	r1, r1, r9
    1754:	47d0      	blx	sl
    1756:	47a0      	blx	r4
    1758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    175c:	f3af 8000 	nop.w
    1760:	00d59f7f 	.word	0x00d59f7f
    1764:	00000000 	.word	0x00000000
    1768:	400e1400 	.word	0x400e1400
    176c:	000f4240 	.word	0x000f4240
    1770:	0001c138 	.word	0x0001c138
    1774:	00d59f80 	.word	0x00d59f80
    1778:	20000001 	.word	0x20000001
    177c:	00001891 	.word	0x00001891

00001780 <main>:
}


int main (void)
{
    1780:	b570      	push	{r4, r5, r6, lr}
    1782:	b086      	sub	sp, #24
	sysclk_init();
    1784:	4b2c      	ldr	r3, [pc, #176]	; (1838 <main+0xb8>)
    1786:	4798      	blx	r3
	board_init();
    1788:	4b2c      	ldr	r3, [pc, #176]	; (183c <main+0xbc>)
    178a:	4798      	blx	r3
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
    178c:	f44f 5516 	mov.w	r5, #9600	; 0x2580
    1790:	9500      	str	r5, [sp, #0]
	usart_settings.char_length = opt->charlength;
    1792:	23c0      	movs	r3, #192	; 0xc0
    1794:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
    1796:	f44f 6300 	mov.w	r3, #2048	; 0x800
    179a:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
    179c:	2600      	movs	r6, #0
    179e:	9603      	str	r6, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
    17a0:	9604      	str	r6, [sp, #16]
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_hz());
#endif
#if (SAM4L)
		sysclk_enable_peripheral_clock(p_usart);
    17a2:	4c27      	ldr	r4, [pc, #156]	; (1840 <main+0xc0>)
    17a4:	4620      	mov	r0, r4
    17a6:	4b27      	ldr	r3, [pc, #156]	; (1844 <main+0xc4>)
    17a8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
    17aa:	4620      	mov	r0, r4
    17ac:	4b26      	ldr	r3, [pc, #152]	; (1848 <main+0xc8>)
    17ae:	4798      	blx	r3
    17b0:	4602      	mov	r2, r0
    17b2:	4669      	mov	r1, sp
    17b4:	4620      	mov	r0, r4
    17b6:	4b25      	ldr	r3, [pc, #148]	; (184c <main+0xcc>)
    17b8:	4798      	blx	r3
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
    17ba:	4620      	mov	r0, r4
    17bc:	4b24      	ldr	r3, [pc, #144]	; (1850 <main+0xd0>)
    17be:	4798      	blx	r3
		usart_enable_rx(p_usart);
    17c0:	4620      	mov	r0, r4
    17c2:	4b24      	ldr	r3, [pc, #144]	; (1854 <main+0xd4>)
    17c4:	4798      	blx	r3
		.stopbits = US_MR_NBSTOP_1
	};

	usart_serial_init(USART1, &serial_config);
	
	stdio_base = USART1;
    17c6:	4b24      	ldr	r3, [pc, #144]	; (1858 <main+0xd8>)
    17c8:	601c      	str	r4, [r3, #0]
	ptr_put = (int(*)(void volatile*, char)) usart_serial_putchar;
    17ca:	4a24      	ldr	r2, [pc, #144]	; (185c <main+0xdc>)
    17cc:	4b24      	ldr	r3, [pc, #144]	; (1860 <main+0xe0>)
    17ce:	601a      	str	r2, [r3, #0]
	//ptr_get = (int(*)(void volatile*, char)) usart_serial_getchar;
	setbuf(stdout, NULL);
    17d0:	4b24      	ldr	r3, [pc, #144]	; (1864 <main+0xe4>)
    17d2:	681b      	ldr	r3, [r3, #0]
    17d4:	4631      	mov	r1, r6
    17d6:	6898      	ldr	r0, [r3, #8]
    17d8:	4b23      	ldr	r3, [pc, #140]	; (1868 <main+0xe8>)
    17da:	4798      	blx	r3
	
	// LED 0
	setupLED(LED0);
    17dc:	2047      	movs	r0, #71	; 0x47
    17de:	4c23      	ldr	r4, [pc, #140]	; (186c <main+0xec>)
    17e0:	47a0      	blx	r4
	// LED 1
	setupLED(EXT1_PIN_7);
    17e2:	2040      	movs	r0, #64	; 0x40
    17e4:	47a0      	blx	r4
	// LED 2
	setupLED(EXT1_PIN_8);
    17e6:	2041      	movs	r0, #65	; 0x41
    17e8:	47a0      	blx	r4
	// LED 3
	setupLED(EXT1_PIN_6);
    17ea:	2042      	movs	r0, #66	; 0x42
    17ec:	47a0      	blx	r4
	// Button 0 (SW0)
	setupButton(PIN_PC24);
    17ee:	2058      	movs	r0, #88	; 0x58
    17f0:	4c1f      	ldr	r4, [pc, #124]	; (1870 <main+0xf0>)
    17f2:	47a0      	blx	r4
	// Button 1
	setupButton(EXT1_PIN_9);
    17f4:	2059      	movs	r0, #89	; 0x59
    17f6:	47a0      	blx	r4
	// Button 2
	setupButton(EXT1_PIN_3);
    17f8:	2004      	movs	r0, #4
    17fa:	47a0      	blx	r4
	// Button 3
	setupButton(EXT1_PIN_4);
    17fc:	2005      	movs	r0, #5
    17fe:	47a0      	blx	r4
	
	// Setup the interrupt for USART.
	// Rx pin = PC28.
	// Tell the controller to call the button handler function with priority 1.
	gpio_set_pin_callback(PIN_PC26, handleInput, 1);
    1800:	2201      	movs	r2, #1
    1802:	491c      	ldr	r1, [pc, #112]	; (1874 <main+0xf4>)
    1804:	205a      	movs	r0, #90	; 0x5a
    1806:	4b1c      	ldr	r3, [pc, #112]	; (1878 <main+0xf8>)
    1808:	4798      	blx	r3
 * \param [in] pin The pin number
 */
static inline void gpio_clear_pin_interrupt_flag(ioport_pin_t pin)
{
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[ioport_pin_to_port_id(pin)]);
	gpio_port->GPIO_IFRC = ioport_pin_to_mask(pin);
    180a:	4b1c      	ldr	r3, [pc, #112]	; (187c <main+0xfc>)
    180c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    1810:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 * \param [in] pin The pin number
 */
static inline void gpio_enable_pin_interrupt(ioport_pin_t pin)
{
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[ioport_pin_to_port_id(pin)]);
	gpio_port->GPIO_IERS = ioport_pin_to_mask(pin);
    1814:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	
	// Clear current interrupts before enabling.
	gpio_clear_pin_interrupt_flag(PIN_PC26);
	gpio_enable_pin_interrupt(PIN_PC26);
	
	printf("Which LED should I light up - Press 0, 1, 2, or 3? \r\n");
    1818:	4819      	ldr	r0, [pc, #100]	; (1880 <main+0x100>)
    181a:	4c1a      	ldr	r4, [pc, #104]	; (1884 <main+0x104>)
    181c:	47a0      	blx	r4
	printf("Or PUSH a button to get a response! \r\n");
    181e:	481a      	ldr	r0, [pc, #104]	; (1888 <main+0x108>)
    1820:	47a0      	blx	r4
	sendChar(9600, 'A');
    1822:	2141      	movs	r1, #65	; 0x41
    1824:	4628      	mov	r0, r5
    1826:	4c19      	ldr	r4, [pc, #100]	; (188c <main+0x10c>)
    1828:	47a0      	blx	r4
	sendChar(9600, 'A');
    182a:	2141      	movs	r1, #65	; 0x41
    182c:	4628      	mov	r0, r5
    182e:	47a0      	blx	r4
	sendChar(9600, 'A');
    1830:	2141      	movs	r1, #65	; 0x41
    1832:	4628      	mov	r0, r5
    1834:	47a0      	blx	r4
    1836:	e7fe      	b.n	1836 <main+0xb6>
    1838:	0000111d 	.word	0x0000111d
    183c:	00001199 	.word	0x00001199
    1840:	40028000 	.word	0x40028000
    1844:	0000095d 	.word	0x0000095d
    1848:	00000799 	.word	0x00000799
    184c:	000002a9 	.word	0x000002a9
    1850:	000002fd 	.word	0x000002fd
    1854:	00000305 	.word	0x00000305
    1858:	20000938 	.word	0x20000938
    185c:	00001515 	.word	0x00001515
    1860:	20000934 	.word	0x20000934
    1864:	20000468 	.word	0x20000468
    1868:	00001cbd 	.word	0x00001cbd
    186c:	00001591 	.word	0x00001591
    1870:	000015b1 	.word	0x000015b1
    1874:	0000169d 	.word	0x0000169d
    1878:	000003f9 	.word	0x000003f9
    187c:	400e1400 	.word	0x400e1400
    1880:	00004918 	.word	0x00004918
    1884:	00001bf9 	.word	0x00001bf9
    1888:	00004950 	.word	0x00004950
    188c:	000016d1 	.word	0x000016d1

00001890 <__aeabi_uldivmod>:
    1890:	b953      	cbnz	r3, 18a8 <__aeabi_uldivmod+0x18>
    1892:	b94a      	cbnz	r2, 18a8 <__aeabi_uldivmod+0x18>
    1894:	2900      	cmp	r1, #0
    1896:	bf08      	it	eq
    1898:	2800      	cmpeq	r0, #0
    189a:	bf1c      	itt	ne
    189c:	f04f 31ff 	movne.w	r1, #4294967295
    18a0:	f04f 30ff 	movne.w	r0, #4294967295
    18a4:	f000 b97e 	b.w	1ba4 <__aeabi_idiv0>
    18a8:	f1ad 0c08 	sub.w	ip, sp, #8
    18ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    18b0:	f000 f806 	bl	18c0 <__udivmoddi4>
    18b4:	f8dd e004 	ldr.w	lr, [sp, #4]
    18b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    18bc:	b004      	add	sp, #16
    18be:	4770      	bx	lr

000018c0 <__udivmoddi4>:
    18c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    18c4:	468c      	mov	ip, r1
    18c6:	460e      	mov	r6, r1
    18c8:	4604      	mov	r4, r0
    18ca:	9d08      	ldr	r5, [sp, #32]
    18cc:	2b00      	cmp	r3, #0
    18ce:	d150      	bne.n	1972 <__udivmoddi4+0xb2>
    18d0:	428a      	cmp	r2, r1
    18d2:	4617      	mov	r7, r2
    18d4:	d96c      	bls.n	19b0 <__udivmoddi4+0xf0>
    18d6:	fab2 fe82 	clz	lr, r2
    18da:	f1be 0f00 	cmp.w	lr, #0
    18de:	d00b      	beq.n	18f8 <__udivmoddi4+0x38>
    18e0:	f1ce 0420 	rsb	r4, lr, #32
    18e4:	fa20 f404 	lsr.w	r4, r0, r4
    18e8:	fa01 f60e 	lsl.w	r6, r1, lr
    18ec:	ea44 0c06 	orr.w	ip, r4, r6
    18f0:	fa02 f70e 	lsl.w	r7, r2, lr
    18f4:	fa00 f40e 	lsl.w	r4, r0, lr
    18f8:	ea4f 4917 	mov.w	r9, r7, lsr #16
    18fc:	0c22      	lsrs	r2, r4, #16
    18fe:	fbbc f0f9 	udiv	r0, ip, r9
    1902:	fa1f f887 	uxth.w	r8, r7
    1906:	fb09 c610 	mls	r6, r9, r0, ip
    190a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    190e:	fb00 f308 	mul.w	r3, r0, r8
    1912:	42b3      	cmp	r3, r6
    1914:	d909      	bls.n	192a <__udivmoddi4+0x6a>
    1916:	19f6      	adds	r6, r6, r7
    1918:	f100 32ff 	add.w	r2, r0, #4294967295
    191c:	f080 8122 	bcs.w	1b64 <__udivmoddi4+0x2a4>
    1920:	42b3      	cmp	r3, r6
    1922:	f240 811f 	bls.w	1b64 <__udivmoddi4+0x2a4>
    1926:	3802      	subs	r0, #2
    1928:	443e      	add	r6, r7
    192a:	1af6      	subs	r6, r6, r3
    192c:	b2a2      	uxth	r2, r4
    192e:	fbb6 f3f9 	udiv	r3, r6, r9
    1932:	fb09 6613 	mls	r6, r9, r3, r6
    1936:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
    193a:	fb03 f808 	mul.w	r8, r3, r8
    193e:	45a0      	cmp	r8, r4
    1940:	d909      	bls.n	1956 <__udivmoddi4+0x96>
    1942:	19e4      	adds	r4, r4, r7
    1944:	f103 32ff 	add.w	r2, r3, #4294967295
    1948:	f080 810a 	bcs.w	1b60 <__udivmoddi4+0x2a0>
    194c:	45a0      	cmp	r8, r4
    194e:	f240 8107 	bls.w	1b60 <__udivmoddi4+0x2a0>
    1952:	3b02      	subs	r3, #2
    1954:	443c      	add	r4, r7
    1956:	ebc8 0404 	rsb	r4, r8, r4
    195a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    195e:	2100      	movs	r1, #0
    1960:	2d00      	cmp	r5, #0
    1962:	d062      	beq.n	1a2a <__udivmoddi4+0x16a>
    1964:	fa24 f40e 	lsr.w	r4, r4, lr
    1968:	2300      	movs	r3, #0
    196a:	602c      	str	r4, [r5, #0]
    196c:	606b      	str	r3, [r5, #4]
    196e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1972:	428b      	cmp	r3, r1
    1974:	d907      	bls.n	1986 <__udivmoddi4+0xc6>
    1976:	2d00      	cmp	r5, #0
    1978:	d055      	beq.n	1a26 <__udivmoddi4+0x166>
    197a:	2100      	movs	r1, #0
    197c:	e885 0041 	stmia.w	r5, {r0, r6}
    1980:	4608      	mov	r0, r1
    1982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1986:	fab3 f183 	clz	r1, r3
    198a:	2900      	cmp	r1, #0
    198c:	f040 8090 	bne.w	1ab0 <__udivmoddi4+0x1f0>
    1990:	42b3      	cmp	r3, r6
    1992:	d302      	bcc.n	199a <__udivmoddi4+0xda>
    1994:	4282      	cmp	r2, r0
    1996:	f200 80f8 	bhi.w	1b8a <__udivmoddi4+0x2ca>
    199a:	1a84      	subs	r4, r0, r2
    199c:	eb66 0603 	sbc.w	r6, r6, r3
    19a0:	2001      	movs	r0, #1
    19a2:	46b4      	mov	ip, r6
    19a4:	2d00      	cmp	r5, #0
    19a6:	d040      	beq.n	1a2a <__udivmoddi4+0x16a>
    19a8:	e885 1010 	stmia.w	r5, {r4, ip}
    19ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    19b0:	b912      	cbnz	r2, 19b8 <__udivmoddi4+0xf8>
    19b2:	2701      	movs	r7, #1
    19b4:	fbb7 f7f2 	udiv	r7, r7, r2
    19b8:	fab7 fe87 	clz	lr, r7
    19bc:	f1be 0f00 	cmp.w	lr, #0
    19c0:	d135      	bne.n	1a2e <__udivmoddi4+0x16e>
    19c2:	1bf3      	subs	r3, r6, r7
    19c4:	ea4f 4817 	mov.w	r8, r7, lsr #16
    19c8:	fa1f fc87 	uxth.w	ip, r7
    19cc:	2101      	movs	r1, #1
    19ce:	fbb3 f0f8 	udiv	r0, r3, r8
    19d2:	0c22      	lsrs	r2, r4, #16
    19d4:	fb08 3610 	mls	r6, r8, r0, r3
    19d8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    19dc:	fb0c f300 	mul.w	r3, ip, r0
    19e0:	42b3      	cmp	r3, r6
    19e2:	d907      	bls.n	19f4 <__udivmoddi4+0x134>
    19e4:	19f6      	adds	r6, r6, r7
    19e6:	f100 32ff 	add.w	r2, r0, #4294967295
    19ea:	d202      	bcs.n	19f2 <__udivmoddi4+0x132>
    19ec:	42b3      	cmp	r3, r6
    19ee:	f200 80ce 	bhi.w	1b8e <__udivmoddi4+0x2ce>
    19f2:	4610      	mov	r0, r2
    19f4:	1af6      	subs	r6, r6, r3
    19f6:	b2a2      	uxth	r2, r4
    19f8:	fbb6 f3f8 	udiv	r3, r6, r8
    19fc:	fb08 6613 	mls	r6, r8, r3, r6
    1a00:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
    1a04:	fb0c fc03 	mul.w	ip, ip, r3
    1a08:	45a4      	cmp	ip, r4
    1a0a:	d907      	bls.n	1a1c <__udivmoddi4+0x15c>
    1a0c:	19e4      	adds	r4, r4, r7
    1a0e:	f103 32ff 	add.w	r2, r3, #4294967295
    1a12:	d202      	bcs.n	1a1a <__udivmoddi4+0x15a>
    1a14:	45a4      	cmp	ip, r4
    1a16:	f200 80b5 	bhi.w	1b84 <__udivmoddi4+0x2c4>
    1a1a:	4613      	mov	r3, r2
    1a1c:	ebcc 0404 	rsb	r4, ip, r4
    1a20:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    1a24:	e79c      	b.n	1960 <__udivmoddi4+0xa0>
    1a26:	4629      	mov	r1, r5
    1a28:	4628      	mov	r0, r5
    1a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1a2e:	f1ce 0120 	rsb	r1, lr, #32
    1a32:	fa06 f30e 	lsl.w	r3, r6, lr
    1a36:	fa07 f70e 	lsl.w	r7, r7, lr
    1a3a:	fa20 f901 	lsr.w	r9, r0, r1
    1a3e:	ea4f 4817 	mov.w	r8, r7, lsr #16
    1a42:	40ce      	lsrs	r6, r1
    1a44:	ea49 0903 	orr.w	r9, r9, r3
    1a48:	fbb6 faf8 	udiv	sl, r6, r8
    1a4c:	ea4f 4419 	mov.w	r4, r9, lsr #16
    1a50:	fb08 661a 	mls	r6, r8, sl, r6
    1a54:	fa1f fc87 	uxth.w	ip, r7
    1a58:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
    1a5c:	fb0a f20c 	mul.w	r2, sl, ip
    1a60:	429a      	cmp	r2, r3
    1a62:	fa00 f40e 	lsl.w	r4, r0, lr
    1a66:	d90a      	bls.n	1a7e <__udivmoddi4+0x1be>
    1a68:	19db      	adds	r3, r3, r7
    1a6a:	f10a 31ff 	add.w	r1, sl, #4294967295
    1a6e:	f080 8087 	bcs.w	1b80 <__udivmoddi4+0x2c0>
    1a72:	429a      	cmp	r2, r3
    1a74:	f240 8084 	bls.w	1b80 <__udivmoddi4+0x2c0>
    1a78:	f1aa 0a02 	sub.w	sl, sl, #2
    1a7c:	443b      	add	r3, r7
    1a7e:	1a9b      	subs	r3, r3, r2
    1a80:	fa1f f989 	uxth.w	r9, r9
    1a84:	fbb3 f1f8 	udiv	r1, r3, r8
    1a88:	fb08 3311 	mls	r3, r8, r1, r3
    1a8c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
    1a90:	fb01 f60c 	mul.w	r6, r1, ip
    1a94:	429e      	cmp	r6, r3
    1a96:	d907      	bls.n	1aa8 <__udivmoddi4+0x1e8>
    1a98:	19db      	adds	r3, r3, r7
    1a9a:	f101 32ff 	add.w	r2, r1, #4294967295
    1a9e:	d26b      	bcs.n	1b78 <__udivmoddi4+0x2b8>
    1aa0:	429e      	cmp	r6, r3
    1aa2:	d969      	bls.n	1b78 <__udivmoddi4+0x2b8>
    1aa4:	3902      	subs	r1, #2
    1aa6:	443b      	add	r3, r7
    1aa8:	1b9b      	subs	r3, r3, r6
    1aaa:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
    1aae:	e78e      	b.n	19ce <__udivmoddi4+0x10e>
    1ab0:	f1c1 0e20 	rsb	lr, r1, #32
    1ab4:	fa22 f40e 	lsr.w	r4, r2, lr
    1ab8:	408b      	lsls	r3, r1
    1aba:	4323      	orrs	r3, r4
    1abc:	fa20 f70e 	lsr.w	r7, r0, lr
    1ac0:	fa06 f401 	lsl.w	r4, r6, r1
    1ac4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    1ac8:	fa26 f60e 	lsr.w	r6, r6, lr
    1acc:	433c      	orrs	r4, r7
    1ace:	fbb6 f9fc 	udiv	r9, r6, ip
    1ad2:	0c27      	lsrs	r7, r4, #16
    1ad4:	fb0c 6619 	mls	r6, ip, r9, r6
    1ad8:	fa1f f883 	uxth.w	r8, r3
    1adc:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    1ae0:	fb09 f708 	mul.w	r7, r9, r8
    1ae4:	42b7      	cmp	r7, r6
    1ae6:	fa02 f201 	lsl.w	r2, r2, r1
    1aea:	fa00 fa01 	lsl.w	sl, r0, r1
    1aee:	d908      	bls.n	1b02 <__udivmoddi4+0x242>
    1af0:	18f6      	adds	r6, r6, r3
    1af2:	f109 30ff 	add.w	r0, r9, #4294967295
    1af6:	d241      	bcs.n	1b7c <__udivmoddi4+0x2bc>
    1af8:	42b7      	cmp	r7, r6
    1afa:	d93f      	bls.n	1b7c <__udivmoddi4+0x2bc>
    1afc:	f1a9 0902 	sub.w	r9, r9, #2
    1b00:	441e      	add	r6, r3
    1b02:	1bf6      	subs	r6, r6, r7
    1b04:	b2a0      	uxth	r0, r4
    1b06:	fbb6 f4fc 	udiv	r4, r6, ip
    1b0a:	fb0c 6614 	mls	r6, ip, r4, r6
    1b0e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
    1b12:	fb04 f808 	mul.w	r8, r4, r8
    1b16:	45b8      	cmp	r8, r7
    1b18:	d907      	bls.n	1b2a <__udivmoddi4+0x26a>
    1b1a:	18ff      	adds	r7, r7, r3
    1b1c:	f104 30ff 	add.w	r0, r4, #4294967295
    1b20:	d228      	bcs.n	1b74 <__udivmoddi4+0x2b4>
    1b22:	45b8      	cmp	r8, r7
    1b24:	d926      	bls.n	1b74 <__udivmoddi4+0x2b4>
    1b26:	3c02      	subs	r4, #2
    1b28:	441f      	add	r7, r3
    1b2a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
    1b2e:	ebc8 0707 	rsb	r7, r8, r7
    1b32:	fba0 8902 	umull	r8, r9, r0, r2
    1b36:	454f      	cmp	r7, r9
    1b38:	4644      	mov	r4, r8
    1b3a:	464e      	mov	r6, r9
    1b3c:	d314      	bcc.n	1b68 <__udivmoddi4+0x2a8>
    1b3e:	d029      	beq.n	1b94 <__udivmoddi4+0x2d4>
    1b40:	b365      	cbz	r5, 1b9c <__udivmoddi4+0x2dc>
    1b42:	ebba 0304 	subs.w	r3, sl, r4
    1b46:	eb67 0706 	sbc.w	r7, r7, r6
    1b4a:	fa07 fe0e 	lsl.w	lr, r7, lr
    1b4e:	40cb      	lsrs	r3, r1
    1b50:	40cf      	lsrs	r7, r1
    1b52:	ea4e 0303 	orr.w	r3, lr, r3
    1b56:	e885 0088 	stmia.w	r5, {r3, r7}
    1b5a:	2100      	movs	r1, #0
    1b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1b60:	4613      	mov	r3, r2
    1b62:	e6f8      	b.n	1956 <__udivmoddi4+0x96>
    1b64:	4610      	mov	r0, r2
    1b66:	e6e0      	b.n	192a <__udivmoddi4+0x6a>
    1b68:	ebb8 0402 	subs.w	r4, r8, r2
    1b6c:	eb69 0603 	sbc.w	r6, r9, r3
    1b70:	3801      	subs	r0, #1
    1b72:	e7e5      	b.n	1b40 <__udivmoddi4+0x280>
    1b74:	4604      	mov	r4, r0
    1b76:	e7d8      	b.n	1b2a <__udivmoddi4+0x26a>
    1b78:	4611      	mov	r1, r2
    1b7a:	e795      	b.n	1aa8 <__udivmoddi4+0x1e8>
    1b7c:	4681      	mov	r9, r0
    1b7e:	e7c0      	b.n	1b02 <__udivmoddi4+0x242>
    1b80:	468a      	mov	sl, r1
    1b82:	e77c      	b.n	1a7e <__udivmoddi4+0x1be>
    1b84:	3b02      	subs	r3, #2
    1b86:	443c      	add	r4, r7
    1b88:	e748      	b.n	1a1c <__udivmoddi4+0x15c>
    1b8a:	4608      	mov	r0, r1
    1b8c:	e70a      	b.n	19a4 <__udivmoddi4+0xe4>
    1b8e:	3802      	subs	r0, #2
    1b90:	443e      	add	r6, r7
    1b92:	e72f      	b.n	19f4 <__udivmoddi4+0x134>
    1b94:	45c2      	cmp	sl, r8
    1b96:	d3e7      	bcc.n	1b68 <__udivmoddi4+0x2a8>
    1b98:	463e      	mov	r6, r7
    1b9a:	e7d1      	b.n	1b40 <__udivmoddi4+0x280>
    1b9c:	4629      	mov	r1, r5
    1b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1ba2:	bf00      	nop

00001ba4 <__aeabi_idiv0>:
    1ba4:	4770      	bx	lr
    1ba6:	bf00      	nop

00001ba8 <__libc_init_array>:
    1ba8:	b570      	push	{r4, r5, r6, lr}
    1baa:	4e0f      	ldr	r6, [pc, #60]	; (1be8 <__libc_init_array+0x40>)
    1bac:	4d0f      	ldr	r5, [pc, #60]	; (1bec <__libc_init_array+0x44>)
    1bae:	1b76      	subs	r6, r6, r5
    1bb0:	10b6      	asrs	r6, r6, #2
    1bb2:	bf18      	it	ne
    1bb4:	2400      	movne	r4, #0
    1bb6:	d005      	beq.n	1bc4 <__libc_init_array+0x1c>
    1bb8:	3401      	adds	r4, #1
    1bba:	f855 3b04 	ldr.w	r3, [r5], #4
    1bbe:	4798      	blx	r3
    1bc0:	42a6      	cmp	r6, r4
    1bc2:	d1f9      	bne.n	1bb8 <__libc_init_array+0x10>
    1bc4:	4e0a      	ldr	r6, [pc, #40]	; (1bf0 <__libc_init_array+0x48>)
    1bc6:	4d0b      	ldr	r5, [pc, #44]	; (1bf4 <__libc_init_array+0x4c>)
    1bc8:	1b76      	subs	r6, r6, r5
    1bca:	f002 ff01 	bl	49d0 <_init>
    1bce:	10b6      	asrs	r6, r6, #2
    1bd0:	bf18      	it	ne
    1bd2:	2400      	movne	r4, #0
    1bd4:	d006      	beq.n	1be4 <__libc_init_array+0x3c>
    1bd6:	3401      	adds	r4, #1
    1bd8:	f855 3b04 	ldr.w	r3, [r5], #4
    1bdc:	4798      	blx	r3
    1bde:	42a6      	cmp	r6, r4
    1be0:	d1f9      	bne.n	1bd6 <__libc_init_array+0x2e>
    1be2:	bd70      	pop	{r4, r5, r6, pc}
    1be4:	bd70      	pop	{r4, r5, r6, pc}
    1be6:	bf00      	nop
    1be8:	000049dc 	.word	0x000049dc
    1bec:	000049dc 	.word	0x000049dc
    1bf0:	000049e4 	.word	0x000049e4
    1bf4:	000049dc 	.word	0x000049dc

00001bf8 <iprintf>:
    1bf8:	b40f      	push	{r0, r1, r2, r3}
    1bfa:	b500      	push	{lr}
    1bfc:	4907      	ldr	r1, [pc, #28]	; (1c1c <iprintf+0x24>)
    1bfe:	b083      	sub	sp, #12
    1c00:	ab04      	add	r3, sp, #16
    1c02:	6808      	ldr	r0, [r1, #0]
    1c04:	f853 2b04 	ldr.w	r2, [r3], #4
    1c08:	6881      	ldr	r1, [r0, #8]
    1c0a:	9301      	str	r3, [sp, #4]
    1c0c:	f000 f942 	bl	1e94 <_vfiprintf_r>
    1c10:	b003      	add	sp, #12
    1c12:	f85d eb04 	ldr.w	lr, [sp], #4
    1c16:	b004      	add	sp, #16
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop
    1c1c:	20000468 	.word	0x20000468

00001c20 <memset>:
    1c20:	b470      	push	{r4, r5, r6}
    1c22:	0784      	lsls	r4, r0, #30
    1c24:	d046      	beq.n	1cb4 <memset+0x94>
    1c26:	1e54      	subs	r4, r2, #1
    1c28:	2a00      	cmp	r2, #0
    1c2a:	d041      	beq.n	1cb0 <memset+0x90>
    1c2c:	b2cd      	uxtb	r5, r1
    1c2e:	4603      	mov	r3, r0
    1c30:	e002      	b.n	1c38 <memset+0x18>
    1c32:	1e62      	subs	r2, r4, #1
    1c34:	b3e4      	cbz	r4, 1cb0 <memset+0x90>
    1c36:	4614      	mov	r4, r2
    1c38:	f803 5b01 	strb.w	r5, [r3], #1
    1c3c:	079a      	lsls	r2, r3, #30
    1c3e:	d1f8      	bne.n	1c32 <memset+0x12>
    1c40:	2c03      	cmp	r4, #3
    1c42:	d92e      	bls.n	1ca2 <memset+0x82>
    1c44:	b2cd      	uxtb	r5, r1
    1c46:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    1c4a:	2c0f      	cmp	r4, #15
    1c4c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    1c50:	d919      	bls.n	1c86 <memset+0x66>
    1c52:	f103 0210 	add.w	r2, r3, #16
    1c56:	4626      	mov	r6, r4
    1c58:	3e10      	subs	r6, #16
    1c5a:	2e0f      	cmp	r6, #15
    1c5c:	f842 5c10 	str.w	r5, [r2, #-16]
    1c60:	f842 5c0c 	str.w	r5, [r2, #-12]
    1c64:	f842 5c08 	str.w	r5, [r2, #-8]
    1c68:	f842 5c04 	str.w	r5, [r2, #-4]
    1c6c:	f102 0210 	add.w	r2, r2, #16
    1c70:	d8f2      	bhi.n	1c58 <memset+0x38>
    1c72:	f1a4 0210 	sub.w	r2, r4, #16
    1c76:	f022 020f 	bic.w	r2, r2, #15
    1c7a:	f004 040f 	and.w	r4, r4, #15
    1c7e:	3210      	adds	r2, #16
    1c80:	2c03      	cmp	r4, #3
    1c82:	4413      	add	r3, r2
    1c84:	d90d      	bls.n	1ca2 <memset+0x82>
    1c86:	461e      	mov	r6, r3
    1c88:	4622      	mov	r2, r4
    1c8a:	3a04      	subs	r2, #4
    1c8c:	2a03      	cmp	r2, #3
    1c8e:	f846 5b04 	str.w	r5, [r6], #4
    1c92:	d8fa      	bhi.n	1c8a <memset+0x6a>
    1c94:	1f22      	subs	r2, r4, #4
    1c96:	f022 0203 	bic.w	r2, r2, #3
    1c9a:	3204      	adds	r2, #4
    1c9c:	4413      	add	r3, r2
    1c9e:	f004 0403 	and.w	r4, r4, #3
    1ca2:	b12c      	cbz	r4, 1cb0 <memset+0x90>
    1ca4:	b2c9      	uxtb	r1, r1
    1ca6:	441c      	add	r4, r3
    1ca8:	f803 1b01 	strb.w	r1, [r3], #1
    1cac:	42a3      	cmp	r3, r4
    1cae:	d1fb      	bne.n	1ca8 <memset+0x88>
    1cb0:	bc70      	pop	{r4, r5, r6}
    1cb2:	4770      	bx	lr
    1cb4:	4614      	mov	r4, r2
    1cb6:	4603      	mov	r3, r0
    1cb8:	e7c2      	b.n	1c40 <memset+0x20>
    1cba:	bf00      	nop

00001cbc <setbuf>:
    1cbc:	2900      	cmp	r1, #0
    1cbe:	bf0c      	ite	eq
    1cc0:	2202      	moveq	r2, #2
    1cc2:	2200      	movne	r2, #0
    1cc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1cc8:	f000 b800 	b.w	1ccc <setvbuf>

00001ccc <setvbuf>:
    1ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1cd0:	4c51      	ldr	r4, [pc, #324]	; (1e18 <setvbuf+0x14c>)
    1cd2:	6825      	ldr	r5, [r4, #0]
    1cd4:	b083      	sub	sp, #12
    1cd6:	4604      	mov	r4, r0
    1cd8:	460f      	mov	r7, r1
    1cda:	4690      	mov	r8, r2
    1cdc:	461e      	mov	r6, r3
    1cde:	b115      	cbz	r5, 1ce6 <setvbuf+0x1a>
    1ce0:	6bab      	ldr	r3, [r5, #56]	; 0x38
    1ce2:	2b00      	cmp	r3, #0
    1ce4:	d079      	beq.n	1dda <setvbuf+0x10e>
    1ce6:	f1b8 0f02 	cmp.w	r8, #2
    1cea:	d004      	beq.n	1cf6 <setvbuf+0x2a>
    1cec:	f1b8 0f01 	cmp.w	r8, #1
    1cf0:	d87f      	bhi.n	1df2 <setvbuf+0x126>
    1cf2:	2e00      	cmp	r6, #0
    1cf4:	db7d      	blt.n	1df2 <setvbuf+0x126>
    1cf6:	4621      	mov	r1, r4
    1cf8:	4628      	mov	r0, r5
    1cfa:	f001 f917 	bl	2f2c <_fflush_r>
    1cfe:	6b21      	ldr	r1, [r4, #48]	; 0x30
    1d00:	b141      	cbz	r1, 1d14 <setvbuf+0x48>
    1d02:	f104 0340 	add.w	r3, r4, #64	; 0x40
    1d06:	4299      	cmp	r1, r3
    1d08:	d002      	beq.n	1d10 <setvbuf+0x44>
    1d0a:	4628      	mov	r0, r5
    1d0c:	f001 fa6c 	bl	31e8 <_free_r>
    1d10:	2300      	movs	r3, #0
    1d12:	6323      	str	r3, [r4, #48]	; 0x30
    1d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1d18:	2200      	movs	r2, #0
    1d1a:	61a2      	str	r2, [r4, #24]
    1d1c:	6062      	str	r2, [r4, #4]
    1d1e:	061a      	lsls	r2, r3, #24
    1d20:	d454      	bmi.n	1dcc <setvbuf+0x100>
    1d22:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    1d26:	f023 0303 	bic.w	r3, r3, #3
    1d2a:	f1b8 0f02 	cmp.w	r8, #2
    1d2e:	81a3      	strh	r3, [r4, #12]
    1d30:	d039      	beq.n	1da6 <setvbuf+0xda>
    1d32:	ab01      	add	r3, sp, #4
    1d34:	466a      	mov	r2, sp
    1d36:	4621      	mov	r1, r4
    1d38:	4628      	mov	r0, r5
    1d3a:	f001 fcf3 	bl	3724 <__swhatbuf_r>
    1d3e:	89a3      	ldrh	r3, [r4, #12]
    1d40:	4318      	orrs	r0, r3
    1d42:	81a0      	strh	r0, [r4, #12]
    1d44:	b326      	cbz	r6, 1d90 <setvbuf+0xc4>
    1d46:	b327      	cbz	r7, 1d92 <setvbuf+0xc6>
    1d48:	6bab      	ldr	r3, [r5, #56]	; 0x38
    1d4a:	2b00      	cmp	r3, #0
    1d4c:	d04d      	beq.n	1dea <setvbuf+0x11e>
    1d4e:	9b00      	ldr	r3, [sp, #0]
    1d50:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    1d54:	6027      	str	r7, [r4, #0]
    1d56:	429e      	cmp	r6, r3
    1d58:	bf1c      	itt	ne
    1d5a:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
    1d5e:	81a0      	strhne	r0, [r4, #12]
    1d60:	f1b8 0f01 	cmp.w	r8, #1
    1d64:	bf08      	it	eq
    1d66:	f040 0001 	orreq.w	r0, r0, #1
    1d6a:	b283      	uxth	r3, r0
    1d6c:	bf08      	it	eq
    1d6e:	81a0      	strheq	r0, [r4, #12]
    1d70:	f003 0008 	and.w	r0, r3, #8
    1d74:	b280      	uxth	r0, r0
    1d76:	6127      	str	r7, [r4, #16]
    1d78:	6166      	str	r6, [r4, #20]
    1d7a:	b318      	cbz	r0, 1dc4 <setvbuf+0xf8>
    1d7c:	f013 0001 	ands.w	r0, r3, #1
    1d80:	d02f      	beq.n	1de2 <setvbuf+0x116>
    1d82:	2000      	movs	r0, #0
    1d84:	4276      	negs	r6, r6
    1d86:	61a6      	str	r6, [r4, #24]
    1d88:	60a0      	str	r0, [r4, #8]
    1d8a:	b003      	add	sp, #12
    1d8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1d90:	9e00      	ldr	r6, [sp, #0]
    1d92:	4630      	mov	r0, r6
    1d94:	f001 fd3a 	bl	380c <malloc>
    1d98:	4607      	mov	r7, r0
    1d9a:	b368      	cbz	r0, 1df8 <setvbuf+0x12c>
    1d9c:	89a3      	ldrh	r3, [r4, #12]
    1d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1da2:	81a3      	strh	r3, [r4, #12]
    1da4:	e7d0      	b.n	1d48 <setvbuf+0x7c>
    1da6:	2000      	movs	r0, #0
    1da8:	f104 0243 	add.w	r2, r4, #67	; 0x43
    1dac:	f043 0302 	orr.w	r3, r3, #2
    1db0:	2500      	movs	r5, #0
    1db2:	2101      	movs	r1, #1
    1db4:	81a3      	strh	r3, [r4, #12]
    1db6:	60a5      	str	r5, [r4, #8]
    1db8:	6022      	str	r2, [r4, #0]
    1dba:	6122      	str	r2, [r4, #16]
    1dbc:	6161      	str	r1, [r4, #20]
    1dbe:	b003      	add	sp, #12
    1dc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1dc4:	60a0      	str	r0, [r4, #8]
    1dc6:	b003      	add	sp, #12
    1dc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1dcc:	6921      	ldr	r1, [r4, #16]
    1dce:	4628      	mov	r0, r5
    1dd0:	f001 fa0a 	bl	31e8 <_free_r>
    1dd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1dd8:	e7a3      	b.n	1d22 <setvbuf+0x56>
    1dda:	4628      	mov	r0, r5
    1ddc:	f001 f93a 	bl	3054 <__sinit>
    1de0:	e781      	b.n	1ce6 <setvbuf+0x1a>
    1de2:	60a6      	str	r6, [r4, #8]
    1de4:	b003      	add	sp, #12
    1de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1dea:	4628      	mov	r0, r5
    1dec:	f001 f932 	bl	3054 <__sinit>
    1df0:	e7ad      	b.n	1d4e <setvbuf+0x82>
    1df2:	f04f 30ff 	mov.w	r0, #4294967295
    1df6:	e7e2      	b.n	1dbe <setvbuf+0xf2>
    1df8:	f8dd 9000 	ldr.w	r9, [sp]
    1dfc:	45b1      	cmp	r9, r6
    1dfe:	d006      	beq.n	1e0e <setvbuf+0x142>
    1e00:	4648      	mov	r0, r9
    1e02:	f001 fd03 	bl	380c <malloc>
    1e06:	4607      	mov	r7, r0
    1e08:	b108      	cbz	r0, 1e0e <setvbuf+0x142>
    1e0a:	464e      	mov	r6, r9
    1e0c:	e7c6      	b.n	1d9c <setvbuf+0xd0>
    1e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1e12:	f04f 30ff 	mov.w	r0, #4294967295
    1e16:	e7c7      	b.n	1da8 <setvbuf+0xdc>
    1e18:	20000468 	.word	0x20000468

00001e1c <__sprint_r.part.0>:
    1e1c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    1e1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1e22:	049c      	lsls	r4, r3, #18
    1e24:	4692      	mov	sl, r2
    1e26:	d52c      	bpl.n	1e82 <__sprint_r.part.0+0x66>
    1e28:	6893      	ldr	r3, [r2, #8]
    1e2a:	6812      	ldr	r2, [r2, #0]
    1e2c:	b33b      	cbz	r3, 1e7e <__sprint_r.part.0+0x62>
    1e2e:	460f      	mov	r7, r1
    1e30:	4680      	mov	r8, r0
    1e32:	f102 0908 	add.w	r9, r2, #8
    1e36:	e919 0060 	ldmdb	r9, {r5, r6}
    1e3a:	08b6      	lsrs	r6, r6, #2
    1e3c:	d017      	beq.n	1e6e <__sprint_r.part.0+0x52>
    1e3e:	3d04      	subs	r5, #4
    1e40:	2400      	movs	r4, #0
    1e42:	e001      	b.n	1e48 <__sprint_r.part.0+0x2c>
    1e44:	42a6      	cmp	r6, r4
    1e46:	d010      	beq.n	1e6a <__sprint_r.part.0+0x4e>
    1e48:	463a      	mov	r2, r7
    1e4a:	f855 1f04 	ldr.w	r1, [r5, #4]!
    1e4e:	4640      	mov	r0, r8
    1e50:	f001 f96a 	bl	3128 <_fputwc_r>
    1e54:	1c43      	adds	r3, r0, #1
    1e56:	f104 0401 	add.w	r4, r4, #1
    1e5a:	d1f3      	bne.n	1e44 <__sprint_r.part.0+0x28>
    1e5c:	2300      	movs	r3, #0
    1e5e:	f8ca 3008 	str.w	r3, [sl, #8]
    1e62:	f8ca 3004 	str.w	r3, [sl, #4]
    1e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1e6a:	f8da 3008 	ldr.w	r3, [sl, #8]
    1e6e:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
    1e72:	f8ca 3008 	str.w	r3, [sl, #8]
    1e76:	f109 0908 	add.w	r9, r9, #8
    1e7a:	2b00      	cmp	r3, #0
    1e7c:	d1db      	bne.n	1e36 <__sprint_r.part.0+0x1a>
    1e7e:	2000      	movs	r0, #0
    1e80:	e7ec      	b.n	1e5c <__sprint_r.part.0+0x40>
    1e82:	f001 fa99 	bl	33b8 <__sfvwrite_r>
    1e86:	2300      	movs	r3, #0
    1e88:	f8ca 3008 	str.w	r3, [sl, #8]
    1e8c:	f8ca 3004 	str.w	r3, [sl, #4]
    1e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00001e94 <_vfiprintf_r>:
    1e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e98:	b0ab      	sub	sp, #172	; 0xac
    1e9a:	461c      	mov	r4, r3
    1e9c:	9100      	str	r1, [sp, #0]
    1e9e:	4690      	mov	r8, r2
    1ea0:	9304      	str	r3, [sp, #16]
    1ea2:	9005      	str	r0, [sp, #20]
    1ea4:	b118      	cbz	r0, 1eae <_vfiprintf_r+0x1a>
    1ea6:	6b83      	ldr	r3, [r0, #56]	; 0x38
    1ea8:	2b00      	cmp	r3, #0
    1eaa:	f000 80de 	beq.w	206a <_vfiprintf_r+0x1d6>
    1eae:	9800      	ldr	r0, [sp, #0]
    1eb0:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
    1eb4:	b28a      	uxth	r2, r1
    1eb6:	0495      	lsls	r5, r2, #18
    1eb8:	d407      	bmi.n	1eca <_vfiprintf_r+0x36>
    1eba:	6e43      	ldr	r3, [r0, #100]	; 0x64
    1ebc:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
    1ec0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1ec4:	8182      	strh	r2, [r0, #12]
    1ec6:	6643      	str	r3, [r0, #100]	; 0x64
    1ec8:	b292      	uxth	r2, r2
    1eca:	0711      	lsls	r1, r2, #28
    1ecc:	f140 80b1 	bpl.w	2032 <_vfiprintf_r+0x19e>
    1ed0:	9b00      	ldr	r3, [sp, #0]
    1ed2:	691b      	ldr	r3, [r3, #16]
    1ed4:	2b00      	cmp	r3, #0
    1ed6:	f000 80ac 	beq.w	2032 <_vfiprintf_r+0x19e>
    1eda:	f002 021a 	and.w	r2, r2, #26
    1ede:	2a0a      	cmp	r2, #10
    1ee0:	f000 80b5 	beq.w	204e <_vfiprintf_r+0x1ba>
    1ee4:	2300      	movs	r3, #0
    1ee6:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
    1eea:	9302      	str	r3, [sp, #8]
    1eec:	930f      	str	r3, [sp, #60]	; 0x3c
    1eee:	930e      	str	r3, [sp, #56]	; 0x38
    1ef0:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
    1ef4:	46da      	mov	sl, fp
    1ef6:	f898 3000 	ldrb.w	r3, [r8]
    1efa:	4644      	mov	r4, r8
    1efc:	b1fb      	cbz	r3, 1f3e <_vfiprintf_r+0xaa>
    1efe:	2b25      	cmp	r3, #37	; 0x25
    1f00:	d102      	bne.n	1f08 <_vfiprintf_r+0x74>
    1f02:	e01c      	b.n	1f3e <_vfiprintf_r+0xaa>
    1f04:	2b25      	cmp	r3, #37	; 0x25
    1f06:	d003      	beq.n	1f10 <_vfiprintf_r+0x7c>
    1f08:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    1f0c:	2b00      	cmp	r3, #0
    1f0e:	d1f9      	bne.n	1f04 <_vfiprintf_r+0x70>
    1f10:	ebc8 0504 	rsb	r5, r8, r4
    1f14:	b19d      	cbz	r5, 1f3e <_vfiprintf_r+0xaa>
    1f16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1f18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    1f1a:	f8ca 8000 	str.w	r8, [sl]
    1f1e:	3301      	adds	r3, #1
    1f20:	442a      	add	r2, r5
    1f22:	2b07      	cmp	r3, #7
    1f24:	f8ca 5004 	str.w	r5, [sl, #4]
    1f28:	920f      	str	r2, [sp, #60]	; 0x3c
    1f2a:	930e      	str	r3, [sp, #56]	; 0x38
    1f2c:	dd7b      	ble.n	2026 <_vfiprintf_r+0x192>
    1f2e:	2a00      	cmp	r2, #0
    1f30:	f040 8528 	bne.w	2984 <_vfiprintf_r+0xaf0>
    1f34:	9b02      	ldr	r3, [sp, #8]
    1f36:	920e      	str	r2, [sp, #56]	; 0x38
    1f38:	442b      	add	r3, r5
    1f3a:	46da      	mov	sl, fp
    1f3c:	9302      	str	r3, [sp, #8]
    1f3e:	7823      	ldrb	r3, [r4, #0]
    1f40:	2b00      	cmp	r3, #0
    1f42:	f000 843e 	beq.w	27c2 <_vfiprintf_r+0x92e>
    1f46:	2100      	movs	r1, #0
    1f48:	f04f 0300 	mov.w	r3, #0
    1f4c:	f04f 32ff 	mov.w	r2, #4294967295
    1f50:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    1f54:	f104 0801 	add.w	r8, r4, #1
    1f58:	7863      	ldrb	r3, [r4, #1]
    1f5a:	9201      	str	r2, [sp, #4]
    1f5c:	4608      	mov	r0, r1
    1f5e:	460e      	mov	r6, r1
    1f60:	460c      	mov	r4, r1
    1f62:	f108 0801 	add.w	r8, r8, #1
    1f66:	f1a3 0220 	sub.w	r2, r3, #32
    1f6a:	2a58      	cmp	r2, #88	; 0x58
    1f6c:	f200 8393 	bhi.w	2696 <_vfiprintf_r+0x802>
    1f70:	e8df f012 	tbh	[pc, r2, lsl #1]
    1f74:	03910346 	.word	0x03910346
    1f78:	034e0391 	.word	0x034e0391
    1f7c:	03910391 	.word	0x03910391
    1f80:	03910391 	.word	0x03910391
    1f84:	03910391 	.word	0x03910391
    1f88:	02670289 	.word	0x02670289
    1f8c:	00800391 	.word	0x00800391
    1f90:	0391026c 	.word	0x0391026c
    1f94:	025901c6 	.word	0x025901c6
    1f98:	02590259 	.word	0x02590259
    1f9c:	02590259 	.word	0x02590259
    1fa0:	02590259 	.word	0x02590259
    1fa4:	02590259 	.word	0x02590259
    1fa8:	03910391 	.word	0x03910391
    1fac:	03910391 	.word	0x03910391
    1fb0:	03910391 	.word	0x03910391
    1fb4:	03910391 	.word	0x03910391
    1fb8:	03910391 	.word	0x03910391
    1fbc:	039101cb 	.word	0x039101cb
    1fc0:	03910391 	.word	0x03910391
    1fc4:	03910391 	.word	0x03910391
    1fc8:	03910391 	.word	0x03910391
    1fcc:	03910391 	.word	0x03910391
    1fd0:	02140391 	.word	0x02140391
    1fd4:	03910391 	.word	0x03910391
    1fd8:	03910391 	.word	0x03910391
    1fdc:	02ee0391 	.word	0x02ee0391
    1fe0:	03910391 	.word	0x03910391
    1fe4:	03910311 	.word	0x03910311
    1fe8:	03910391 	.word	0x03910391
    1fec:	03910391 	.word	0x03910391
    1ff0:	03910391 	.word	0x03910391
    1ff4:	03910391 	.word	0x03910391
    1ff8:	03340391 	.word	0x03340391
    1ffc:	0391038a 	.word	0x0391038a
    2000:	03910391 	.word	0x03910391
    2004:	038a0367 	.word	0x038a0367
    2008:	03910391 	.word	0x03910391
    200c:	0391036c 	.word	0x0391036c
    2010:	02950379 	.word	0x02950379
    2014:	02e90085 	.word	0x02e90085
    2018:	029b0391 	.word	0x029b0391
    201c:	02ba0391 	.word	0x02ba0391
    2020:	03910391 	.word	0x03910391
    2024:	0353      	.short	0x0353
    2026:	f10a 0a08 	add.w	sl, sl, #8
    202a:	9b02      	ldr	r3, [sp, #8]
    202c:	442b      	add	r3, r5
    202e:	9302      	str	r3, [sp, #8]
    2030:	e785      	b.n	1f3e <_vfiprintf_r+0xaa>
    2032:	9900      	ldr	r1, [sp, #0]
    2034:	9805      	ldr	r0, [sp, #20]
    2036:	f000 fe61 	bl	2cfc <__swsetup_r>
    203a:	2800      	cmp	r0, #0
    203c:	f040 8558 	bne.w	2af0 <_vfiprintf_r+0xc5c>
    2040:	9b00      	ldr	r3, [sp, #0]
    2042:	899a      	ldrh	r2, [r3, #12]
    2044:	f002 021a 	and.w	r2, r2, #26
    2048:	2a0a      	cmp	r2, #10
    204a:	f47f af4b 	bne.w	1ee4 <_vfiprintf_r+0x50>
    204e:	9900      	ldr	r1, [sp, #0]
    2050:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    2054:	2b00      	cmp	r3, #0
    2056:	f6ff af45 	blt.w	1ee4 <_vfiprintf_r+0x50>
    205a:	4623      	mov	r3, r4
    205c:	4642      	mov	r2, r8
    205e:	9805      	ldr	r0, [sp, #20]
    2060:	f000 fe16 	bl	2c90 <__sbprintf>
    2064:	b02b      	add	sp, #172	; 0xac
    2066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    206a:	f000 fff3 	bl	3054 <__sinit>
    206e:	e71e      	b.n	1eae <_vfiprintf_r+0x1a>
    2070:	4264      	negs	r4, r4
    2072:	9304      	str	r3, [sp, #16]
    2074:	f046 0604 	orr.w	r6, r6, #4
    2078:	f898 3000 	ldrb.w	r3, [r8]
    207c:	e771      	b.n	1f62 <_vfiprintf_r+0xce>
    207e:	2130      	movs	r1, #48	; 0x30
    2080:	9804      	ldr	r0, [sp, #16]
    2082:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    2086:	9901      	ldr	r1, [sp, #4]
    2088:	9406      	str	r4, [sp, #24]
    208a:	f04f 0300 	mov.w	r3, #0
    208e:	2278      	movs	r2, #120	; 0x78
    2090:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    2094:	2900      	cmp	r1, #0
    2096:	4603      	mov	r3, r0
    2098:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
    209c:	6804      	ldr	r4, [r0, #0]
    209e:	f103 0304 	add.w	r3, r3, #4
    20a2:	f04f 0500 	mov.w	r5, #0
    20a6:	f046 0202 	orr.w	r2, r6, #2
    20aa:	f2c0 8525 	blt.w	2af8 <_vfiprintf_r+0xc64>
    20ae:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    20b2:	ea54 0205 	orrs.w	r2, r4, r5
    20b6:	f046 0602 	orr.w	r6, r6, #2
    20ba:	9304      	str	r3, [sp, #16]
    20bc:	f040 84bf 	bne.w	2a3e <_vfiprintf_r+0xbaa>
    20c0:	48b3      	ldr	r0, [pc, #716]	; (2390 <_vfiprintf_r+0x4fc>)
    20c2:	9b01      	ldr	r3, [sp, #4]
    20c4:	2b00      	cmp	r3, #0
    20c6:	f040 841c 	bne.w	2902 <_vfiprintf_r+0xa6e>
    20ca:	4699      	mov	r9, r3
    20cc:	2300      	movs	r3, #0
    20ce:	9301      	str	r3, [sp, #4]
    20d0:	9303      	str	r3, [sp, #12]
    20d2:	465f      	mov	r7, fp
    20d4:	9b01      	ldr	r3, [sp, #4]
    20d6:	9a03      	ldr	r2, [sp, #12]
    20d8:	4293      	cmp	r3, r2
    20da:	bfb8      	it	lt
    20dc:	4613      	movlt	r3, r2
    20de:	461d      	mov	r5, r3
    20e0:	f1b9 0f00 	cmp.w	r9, #0
    20e4:	d000      	beq.n	20e8 <_vfiprintf_r+0x254>
    20e6:	3501      	adds	r5, #1
    20e8:	f016 0302 	ands.w	r3, r6, #2
    20ec:	9307      	str	r3, [sp, #28]
    20ee:	bf18      	it	ne
    20f0:	3502      	addne	r5, #2
    20f2:	f016 0384 	ands.w	r3, r6, #132	; 0x84
    20f6:	9308      	str	r3, [sp, #32]
    20f8:	f040 82f1 	bne.w	26de <_vfiprintf_r+0x84a>
    20fc:	9b06      	ldr	r3, [sp, #24]
    20fe:	1b5c      	subs	r4, r3, r5
    2100:	2c00      	cmp	r4, #0
    2102:	f340 82ec 	ble.w	26de <_vfiprintf_r+0x84a>
    2106:	2c10      	cmp	r4, #16
    2108:	f340 8556 	ble.w	2bb8 <_vfiprintf_r+0xd24>
    210c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 2394 <_vfiprintf_r+0x500>
    2110:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
    2114:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    2116:	46d4      	mov	ip, sl
    2118:	2310      	movs	r3, #16
    211a:	46c2      	mov	sl, r8
    211c:	4670      	mov	r0, lr
    211e:	46a8      	mov	r8, r5
    2120:	464d      	mov	r5, r9
    2122:	f8dd 9014 	ldr.w	r9, [sp, #20]
    2126:	e007      	b.n	2138 <_vfiprintf_r+0x2a4>
    2128:	f100 0e02 	add.w	lr, r0, #2
    212c:	f10c 0c08 	add.w	ip, ip, #8
    2130:	4608      	mov	r0, r1
    2132:	3c10      	subs	r4, #16
    2134:	2c10      	cmp	r4, #16
    2136:	dd13      	ble.n	2160 <_vfiprintf_r+0x2cc>
    2138:	1c41      	adds	r1, r0, #1
    213a:	3210      	adds	r2, #16
    213c:	2907      	cmp	r1, #7
    213e:	920f      	str	r2, [sp, #60]	; 0x3c
    2140:	f8cc 5000 	str.w	r5, [ip]
    2144:	f8cc 3004 	str.w	r3, [ip, #4]
    2148:	910e      	str	r1, [sp, #56]	; 0x38
    214a:	dded      	ble.n	2128 <_vfiprintf_r+0x294>
    214c:	2a00      	cmp	r2, #0
    214e:	f040 82b7 	bne.w	26c0 <_vfiprintf_r+0x82c>
    2152:	3c10      	subs	r4, #16
    2154:	2c10      	cmp	r4, #16
    2156:	4610      	mov	r0, r2
    2158:	f04f 0e01 	mov.w	lr, #1
    215c:	46dc      	mov	ip, fp
    215e:	dceb      	bgt.n	2138 <_vfiprintf_r+0x2a4>
    2160:	46a9      	mov	r9, r5
    2162:	4670      	mov	r0, lr
    2164:	4645      	mov	r5, r8
    2166:	46d0      	mov	r8, sl
    2168:	46e2      	mov	sl, ip
    216a:	4422      	add	r2, r4
    216c:	2807      	cmp	r0, #7
    216e:	920f      	str	r2, [sp, #60]	; 0x3c
    2170:	f8ca 9000 	str.w	r9, [sl]
    2174:	f8ca 4004 	str.w	r4, [sl, #4]
    2178:	900e      	str	r0, [sp, #56]	; 0x38
    217a:	f300 8375 	bgt.w	2868 <_vfiprintf_r+0x9d4>
    217e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    2182:	f10a 0a08 	add.w	sl, sl, #8
    2186:	f100 0e01 	add.w	lr, r0, #1
    218a:	2b00      	cmp	r3, #0
    218c:	f040 82b0 	bne.w	26f0 <_vfiprintf_r+0x85c>
    2190:	9b07      	ldr	r3, [sp, #28]
    2192:	2b00      	cmp	r3, #0
    2194:	f000 82c3 	beq.w	271e <_vfiprintf_r+0x88a>
    2198:	3202      	adds	r2, #2
    219a:	a90c      	add	r1, sp, #48	; 0x30
    219c:	2302      	movs	r3, #2
    219e:	f1be 0f07 	cmp.w	lr, #7
    21a2:	920f      	str	r2, [sp, #60]	; 0x3c
    21a4:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
    21a8:	e88a 000a 	stmia.w	sl, {r1, r3}
    21ac:	f340 8378 	ble.w	28a0 <_vfiprintf_r+0xa0c>
    21b0:	2a00      	cmp	r2, #0
    21b2:	f040 840a 	bne.w	29ca <_vfiprintf_r+0xb36>
    21b6:	9b08      	ldr	r3, [sp, #32]
    21b8:	2b80      	cmp	r3, #128	; 0x80
    21ba:	f04f 0e01 	mov.w	lr, #1
    21be:	4610      	mov	r0, r2
    21c0:	46da      	mov	sl, fp
    21c2:	f040 82b0 	bne.w	2726 <_vfiprintf_r+0x892>
    21c6:	9b06      	ldr	r3, [sp, #24]
    21c8:	1b5c      	subs	r4, r3, r5
    21ca:	2c00      	cmp	r4, #0
    21cc:	f340 82ab 	ble.w	2726 <_vfiprintf_r+0x892>
    21d0:	2c10      	cmp	r4, #16
    21d2:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 2398 <_vfiprintf_r+0x504>
    21d6:	f340 850b 	ble.w	2bf0 <_vfiprintf_r+0xd5c>
    21da:	46d6      	mov	lr, sl
    21dc:	2310      	movs	r3, #16
    21de:	46c2      	mov	sl, r8
    21e0:	46a8      	mov	r8, r5
    21e2:	464d      	mov	r5, r9
    21e4:	f8dd 9014 	ldr.w	r9, [sp, #20]
    21e8:	e007      	b.n	21fa <_vfiprintf_r+0x366>
    21ea:	f100 0c02 	add.w	ip, r0, #2
    21ee:	f10e 0e08 	add.w	lr, lr, #8
    21f2:	4608      	mov	r0, r1
    21f4:	3c10      	subs	r4, #16
    21f6:	2c10      	cmp	r4, #16
    21f8:	dd13      	ble.n	2222 <_vfiprintf_r+0x38e>
    21fa:	1c41      	adds	r1, r0, #1
    21fc:	3210      	adds	r2, #16
    21fe:	2907      	cmp	r1, #7
    2200:	920f      	str	r2, [sp, #60]	; 0x3c
    2202:	f8ce 5000 	str.w	r5, [lr]
    2206:	f8ce 3004 	str.w	r3, [lr, #4]
    220a:	910e      	str	r1, [sp, #56]	; 0x38
    220c:	dded      	ble.n	21ea <_vfiprintf_r+0x356>
    220e:	2a00      	cmp	r2, #0
    2210:	f040 8315 	bne.w	283e <_vfiprintf_r+0x9aa>
    2214:	3c10      	subs	r4, #16
    2216:	2c10      	cmp	r4, #16
    2218:	f04f 0c01 	mov.w	ip, #1
    221c:	4610      	mov	r0, r2
    221e:	46de      	mov	lr, fp
    2220:	dceb      	bgt.n	21fa <_vfiprintf_r+0x366>
    2222:	46a9      	mov	r9, r5
    2224:	4645      	mov	r5, r8
    2226:	46d0      	mov	r8, sl
    2228:	46f2      	mov	sl, lr
    222a:	4422      	add	r2, r4
    222c:	f1bc 0f07 	cmp.w	ip, #7
    2230:	920f      	str	r2, [sp, #60]	; 0x3c
    2232:	f8ca 9000 	str.w	r9, [sl]
    2236:	f8ca 4004 	str.w	r4, [sl, #4]
    223a:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    223e:	f300 83d2 	bgt.w	29e6 <_vfiprintf_r+0xb52>
    2242:	9b01      	ldr	r3, [sp, #4]
    2244:	9903      	ldr	r1, [sp, #12]
    2246:	1a5c      	subs	r4, r3, r1
    2248:	2c00      	cmp	r4, #0
    224a:	f10a 0a08 	add.w	sl, sl, #8
    224e:	f10c 0e01 	add.w	lr, ip, #1
    2252:	4660      	mov	r0, ip
    2254:	f300 826d 	bgt.w	2732 <_vfiprintf_r+0x89e>
    2258:	9903      	ldr	r1, [sp, #12]
    225a:	f8ca 7000 	str.w	r7, [sl]
    225e:	440a      	add	r2, r1
    2260:	f1be 0f07 	cmp.w	lr, #7
    2264:	920f      	str	r2, [sp, #60]	; 0x3c
    2266:	f8ca 1004 	str.w	r1, [sl, #4]
    226a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
    226e:	f340 82ce 	ble.w	280e <_vfiprintf_r+0x97a>
    2272:	2a00      	cmp	r2, #0
    2274:	f040 833a 	bne.w	28ec <_vfiprintf_r+0xa58>
    2278:	0770      	lsls	r0, r6, #29
    227a:	920e      	str	r2, [sp, #56]	; 0x38
    227c:	d538      	bpl.n	22f0 <_vfiprintf_r+0x45c>
    227e:	9b06      	ldr	r3, [sp, #24]
    2280:	1b5c      	subs	r4, r3, r5
    2282:	2c00      	cmp	r4, #0
    2284:	dd34      	ble.n	22f0 <_vfiprintf_r+0x45c>
    2286:	46da      	mov	sl, fp
    2288:	2c10      	cmp	r4, #16
    228a:	f340 84ab 	ble.w	2be4 <_vfiprintf_r+0xd50>
    228e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 2394 <_vfiprintf_r+0x500>
    2292:	990e      	ldr	r1, [sp, #56]	; 0x38
    2294:	464f      	mov	r7, r9
    2296:	2610      	movs	r6, #16
    2298:	f8dd 9014 	ldr.w	r9, [sp, #20]
    229c:	e006      	b.n	22ac <_vfiprintf_r+0x418>
    229e:	1c88      	adds	r0, r1, #2
    22a0:	f10a 0a08 	add.w	sl, sl, #8
    22a4:	4619      	mov	r1, r3
    22a6:	3c10      	subs	r4, #16
    22a8:	2c10      	cmp	r4, #16
    22aa:	dd13      	ble.n	22d4 <_vfiprintf_r+0x440>
    22ac:	1c4b      	adds	r3, r1, #1
    22ae:	3210      	adds	r2, #16
    22b0:	2b07      	cmp	r3, #7
    22b2:	920f      	str	r2, [sp, #60]	; 0x3c
    22b4:	f8ca 7000 	str.w	r7, [sl]
    22b8:	f8ca 6004 	str.w	r6, [sl, #4]
    22bc:	930e      	str	r3, [sp, #56]	; 0x38
    22be:	ddee      	ble.n	229e <_vfiprintf_r+0x40a>
    22c0:	2a00      	cmp	r2, #0
    22c2:	f040 828e 	bne.w	27e2 <_vfiprintf_r+0x94e>
    22c6:	3c10      	subs	r4, #16
    22c8:	2c10      	cmp	r4, #16
    22ca:	f04f 0001 	mov.w	r0, #1
    22ce:	4611      	mov	r1, r2
    22d0:	46da      	mov	sl, fp
    22d2:	dceb      	bgt.n	22ac <_vfiprintf_r+0x418>
    22d4:	46b9      	mov	r9, r7
    22d6:	4422      	add	r2, r4
    22d8:	2807      	cmp	r0, #7
    22da:	920f      	str	r2, [sp, #60]	; 0x3c
    22dc:	f8ca 9000 	str.w	r9, [sl]
    22e0:	f8ca 4004 	str.w	r4, [sl, #4]
    22e4:	900e      	str	r0, [sp, #56]	; 0x38
    22e6:	f340 829b 	ble.w	2820 <_vfiprintf_r+0x98c>
    22ea:	2a00      	cmp	r2, #0
    22ec:	f040 8425 	bne.w	2b3a <_vfiprintf_r+0xca6>
    22f0:	9b02      	ldr	r3, [sp, #8]
    22f2:	9a06      	ldr	r2, [sp, #24]
    22f4:	42aa      	cmp	r2, r5
    22f6:	bfac      	ite	ge
    22f8:	189b      	addge	r3, r3, r2
    22fa:	195b      	addlt	r3, r3, r5
    22fc:	9302      	str	r3, [sp, #8]
    22fe:	e299      	b.n	2834 <_vfiprintf_r+0x9a0>
    2300:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    2304:	f898 3000 	ldrb.w	r3, [r8]
    2308:	e62b      	b.n	1f62 <_vfiprintf_r+0xce>
    230a:	9406      	str	r4, [sp, #24]
    230c:	2900      	cmp	r1, #0
    230e:	f040 84af 	bne.w	2c70 <_vfiprintf_r+0xddc>
    2312:	f046 0610 	orr.w	r6, r6, #16
    2316:	06b3      	lsls	r3, r6, #26
    2318:	f140 8312 	bpl.w	2940 <_vfiprintf_r+0xaac>
    231c:	9904      	ldr	r1, [sp, #16]
    231e:	3107      	adds	r1, #7
    2320:	f021 0107 	bic.w	r1, r1, #7
    2324:	e9d1 2300 	ldrd	r2, r3, [r1]
    2328:	3108      	adds	r1, #8
    232a:	9104      	str	r1, [sp, #16]
    232c:	4614      	mov	r4, r2
    232e:	461d      	mov	r5, r3
    2330:	2a00      	cmp	r2, #0
    2332:	f173 0300 	sbcs.w	r3, r3, #0
    2336:	f2c0 8386 	blt.w	2a46 <_vfiprintf_r+0xbb2>
    233a:	9b01      	ldr	r3, [sp, #4]
    233c:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
    2340:	2b00      	cmp	r3, #0
    2342:	f2c0 831a 	blt.w	297a <_vfiprintf_r+0xae6>
    2346:	ea54 0305 	orrs.w	r3, r4, r5
    234a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    234e:	f000 80ed 	beq.w	252c <_vfiprintf_r+0x698>
    2352:	2d00      	cmp	r5, #0
    2354:	bf08      	it	eq
    2356:	2c0a      	cmpeq	r4, #10
    2358:	f0c0 80ed 	bcc.w	2536 <_vfiprintf_r+0x6a2>
    235c:	465f      	mov	r7, fp
    235e:	4620      	mov	r0, r4
    2360:	4629      	mov	r1, r5
    2362:	220a      	movs	r2, #10
    2364:	2300      	movs	r3, #0
    2366:	f7ff fa93 	bl	1890 <__aeabi_uldivmod>
    236a:	3230      	adds	r2, #48	; 0x30
    236c:	f807 2d01 	strb.w	r2, [r7, #-1]!
    2370:	4620      	mov	r0, r4
    2372:	4629      	mov	r1, r5
    2374:	2300      	movs	r3, #0
    2376:	220a      	movs	r2, #10
    2378:	f7ff fa8a 	bl	1890 <__aeabi_uldivmod>
    237c:	4604      	mov	r4, r0
    237e:	460d      	mov	r5, r1
    2380:	ea54 0305 	orrs.w	r3, r4, r5
    2384:	d1eb      	bne.n	235e <_vfiprintf_r+0x4ca>
    2386:	ebc7 030b 	rsb	r3, r7, fp
    238a:	9303      	str	r3, [sp, #12]
    238c:	e6a2      	b.n	20d4 <_vfiprintf_r+0x240>
    238e:	bf00      	nop
    2390:	000049a4 	.word	0x000049a4
    2394:	000049c0 	.word	0x000049c0
    2398:	00004980 	.word	0x00004980
    239c:	9406      	str	r4, [sp, #24]
    239e:	2900      	cmp	r1, #0
    23a0:	f040 8462 	bne.w	2c68 <_vfiprintf_r+0xdd4>
    23a4:	f046 0610 	orr.w	r6, r6, #16
    23a8:	f016 0320 	ands.w	r3, r6, #32
    23ac:	f000 82ae 	beq.w	290c <_vfiprintf_r+0xa78>
    23b0:	9b04      	ldr	r3, [sp, #16]
    23b2:	3307      	adds	r3, #7
    23b4:	f023 0307 	bic.w	r3, r3, #7
    23b8:	f04f 0200 	mov.w	r2, #0
    23bc:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
    23c0:	e9d3 4500 	ldrd	r4, r5, [r3]
    23c4:	f103 0208 	add.w	r2, r3, #8
    23c8:	9b01      	ldr	r3, [sp, #4]
    23ca:	9204      	str	r2, [sp, #16]
    23cc:	2b00      	cmp	r3, #0
    23ce:	f2c0 8174 	blt.w	26ba <_vfiprintf_r+0x826>
    23d2:	ea54 0305 	orrs.w	r3, r4, r5
    23d6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    23da:	f040 816e 	bne.w	26ba <_vfiprintf_r+0x826>
    23de:	9b01      	ldr	r3, [sp, #4]
    23e0:	2b00      	cmp	r3, #0
    23e2:	f000 8430 	beq.w	2c46 <_vfiprintf_r+0xdb2>
    23e6:	f04f 0900 	mov.w	r9, #0
    23ea:	2400      	movs	r4, #0
    23ec:	2500      	movs	r5, #0
    23ee:	465f      	mov	r7, fp
    23f0:	08e2      	lsrs	r2, r4, #3
    23f2:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
    23f6:	08e9      	lsrs	r1, r5, #3
    23f8:	f004 0307 	and.w	r3, r4, #7
    23fc:	460d      	mov	r5, r1
    23fe:	4614      	mov	r4, r2
    2400:	3330      	adds	r3, #48	; 0x30
    2402:	ea54 0205 	orrs.w	r2, r4, r5
    2406:	f807 3d01 	strb.w	r3, [r7, #-1]!
    240a:	d1f1      	bne.n	23f0 <_vfiprintf_r+0x55c>
    240c:	07f4      	lsls	r4, r6, #31
    240e:	d5ba      	bpl.n	2386 <_vfiprintf_r+0x4f2>
    2410:	2b30      	cmp	r3, #48	; 0x30
    2412:	d0b8      	beq.n	2386 <_vfiprintf_r+0x4f2>
    2414:	2230      	movs	r2, #48	; 0x30
    2416:	1e7b      	subs	r3, r7, #1
    2418:	f807 2c01 	strb.w	r2, [r7, #-1]
    241c:	ebc3 020b 	rsb	r2, r3, fp
    2420:	9203      	str	r2, [sp, #12]
    2422:	461f      	mov	r7, r3
    2424:	e656      	b.n	20d4 <_vfiprintf_r+0x240>
    2426:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    242a:	2400      	movs	r4, #0
    242c:	f818 3b01 	ldrb.w	r3, [r8], #1
    2430:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    2434:	eb02 0444 	add.w	r4, r2, r4, lsl #1
    2438:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    243c:	2a09      	cmp	r2, #9
    243e:	d9f5      	bls.n	242c <_vfiprintf_r+0x598>
    2440:	e591      	b.n	1f66 <_vfiprintf_r+0xd2>
    2442:	f898 3000 	ldrb.w	r3, [r8]
    2446:	2101      	movs	r1, #1
    2448:	202b      	movs	r0, #43	; 0x2b
    244a:	e58a      	b.n	1f62 <_vfiprintf_r+0xce>
    244c:	f898 3000 	ldrb.w	r3, [r8]
    2450:	2b2a      	cmp	r3, #42	; 0x2a
    2452:	f108 0501 	add.w	r5, r8, #1
    2456:	f000 83dd 	beq.w	2c14 <_vfiprintf_r+0xd80>
    245a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    245e:	2a09      	cmp	r2, #9
    2460:	46a8      	mov	r8, r5
    2462:	bf98      	it	ls
    2464:	2500      	movls	r5, #0
    2466:	f200 83ce 	bhi.w	2c06 <_vfiprintf_r+0xd72>
    246a:	f818 3b01 	ldrb.w	r3, [r8], #1
    246e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2472:	eb02 0545 	add.w	r5, r2, r5, lsl #1
    2476:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    247a:	2a09      	cmp	r2, #9
    247c:	d9f5      	bls.n	246a <_vfiprintf_r+0x5d6>
    247e:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
    2482:	9201      	str	r2, [sp, #4]
    2484:	e56f      	b.n	1f66 <_vfiprintf_r+0xd2>
    2486:	9a04      	ldr	r2, [sp, #16]
    2488:	6814      	ldr	r4, [r2, #0]
    248a:	4613      	mov	r3, r2
    248c:	2c00      	cmp	r4, #0
    248e:	f103 0304 	add.w	r3, r3, #4
    2492:	f6ff aded 	blt.w	2070 <_vfiprintf_r+0x1dc>
    2496:	9304      	str	r3, [sp, #16]
    2498:	f898 3000 	ldrb.w	r3, [r8]
    249c:	e561      	b.n	1f62 <_vfiprintf_r+0xce>
    249e:	9406      	str	r4, [sp, #24]
    24a0:	2900      	cmp	r1, #0
    24a2:	d081      	beq.n	23a8 <_vfiprintf_r+0x514>
    24a4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    24a8:	e77e      	b.n	23a8 <_vfiprintf_r+0x514>
    24aa:	9a04      	ldr	r2, [sp, #16]
    24ac:	9406      	str	r4, [sp, #24]
    24ae:	6817      	ldr	r7, [r2, #0]
    24b0:	f04f 0300 	mov.w	r3, #0
    24b4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    24b8:	1d14      	adds	r4, r2, #4
    24ba:	9b01      	ldr	r3, [sp, #4]
    24bc:	2f00      	cmp	r7, #0
    24be:	f000 8386 	beq.w	2bce <_vfiprintf_r+0xd3a>
    24c2:	2b00      	cmp	r3, #0
    24c4:	f2c0 835f 	blt.w	2b86 <_vfiprintf_r+0xcf2>
    24c8:	461a      	mov	r2, r3
    24ca:	2100      	movs	r1, #0
    24cc:	4638      	mov	r0, r7
    24ce:	f001 fc5f 	bl	3d90 <memchr>
    24d2:	2800      	cmp	r0, #0
    24d4:	f000 838f 	beq.w	2bf6 <_vfiprintf_r+0xd62>
    24d8:	1bc3      	subs	r3, r0, r7
    24da:	9303      	str	r3, [sp, #12]
    24dc:	2300      	movs	r3, #0
    24de:	9404      	str	r4, [sp, #16]
    24e0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
    24e4:	9301      	str	r3, [sp, #4]
    24e6:	e5f5      	b.n	20d4 <_vfiprintf_r+0x240>
    24e8:	9406      	str	r4, [sp, #24]
    24ea:	2900      	cmp	r1, #0
    24ec:	f040 83b9 	bne.w	2c62 <_vfiprintf_r+0xdce>
    24f0:	f016 0920 	ands.w	r9, r6, #32
    24f4:	d135      	bne.n	2562 <_vfiprintf_r+0x6ce>
    24f6:	f016 0310 	ands.w	r3, r6, #16
    24fa:	d103      	bne.n	2504 <_vfiprintf_r+0x670>
    24fc:	f016 0940 	ands.w	r9, r6, #64	; 0x40
    2500:	f040 832a 	bne.w	2b58 <_vfiprintf_r+0xcc4>
    2504:	9a04      	ldr	r2, [sp, #16]
    2506:	4613      	mov	r3, r2
    2508:	6814      	ldr	r4, [r2, #0]
    250a:	9a01      	ldr	r2, [sp, #4]
    250c:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
    2510:	2a00      	cmp	r2, #0
    2512:	f103 0304 	add.w	r3, r3, #4
    2516:	f04f 0500 	mov.w	r5, #0
    251a:	f2c0 8332 	blt.w	2b82 <_vfiprintf_r+0xcee>
    251e:	ea54 0205 	orrs.w	r2, r4, r5
    2522:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    2526:	9304      	str	r3, [sp, #16]
    2528:	f47f af13 	bne.w	2352 <_vfiprintf_r+0x4be>
    252c:	9b01      	ldr	r3, [sp, #4]
    252e:	2b00      	cmp	r3, #0
    2530:	f43f adcc 	beq.w	20cc <_vfiprintf_r+0x238>
    2534:	2400      	movs	r4, #0
    2536:	af2a      	add	r7, sp, #168	; 0xa8
    2538:	3430      	adds	r4, #48	; 0x30
    253a:	f807 4d41 	strb.w	r4, [r7, #-65]!
    253e:	ebc7 030b 	rsb	r3, r7, fp
    2542:	9303      	str	r3, [sp, #12]
    2544:	e5c6      	b.n	20d4 <_vfiprintf_r+0x240>
    2546:	f046 0620 	orr.w	r6, r6, #32
    254a:	f898 3000 	ldrb.w	r3, [r8]
    254e:	e508      	b.n	1f62 <_vfiprintf_r+0xce>
    2550:	9406      	str	r4, [sp, #24]
    2552:	2900      	cmp	r1, #0
    2554:	f040 836e 	bne.w	2c34 <_vfiprintf_r+0xda0>
    2558:	f046 0610 	orr.w	r6, r6, #16
    255c:	f016 0920 	ands.w	r9, r6, #32
    2560:	d0c9      	beq.n	24f6 <_vfiprintf_r+0x662>
    2562:	9b04      	ldr	r3, [sp, #16]
    2564:	3307      	adds	r3, #7
    2566:	f023 0307 	bic.w	r3, r3, #7
    256a:	f04f 0200 	mov.w	r2, #0
    256e:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
    2572:	e9d3 4500 	ldrd	r4, r5, [r3]
    2576:	f103 0208 	add.w	r2, r3, #8
    257a:	9b01      	ldr	r3, [sp, #4]
    257c:	9204      	str	r2, [sp, #16]
    257e:	2b00      	cmp	r3, #0
    2580:	f2c0 81f9 	blt.w	2976 <_vfiprintf_r+0xae2>
    2584:	ea54 0305 	orrs.w	r3, r4, r5
    2588:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    258c:	f04f 0900 	mov.w	r9, #0
    2590:	f47f aedf 	bne.w	2352 <_vfiprintf_r+0x4be>
    2594:	e7ca      	b.n	252c <_vfiprintf_r+0x698>
    2596:	9406      	str	r4, [sp, #24]
    2598:	2900      	cmp	r1, #0
    259a:	f040 8351 	bne.w	2c40 <_vfiprintf_r+0xdac>
    259e:	06b2      	lsls	r2, r6, #26
    25a0:	48ae      	ldr	r0, [pc, #696]	; (285c <_vfiprintf_r+0x9c8>)
    25a2:	d541      	bpl.n	2628 <_vfiprintf_r+0x794>
    25a4:	9a04      	ldr	r2, [sp, #16]
    25a6:	3207      	adds	r2, #7
    25a8:	f022 0207 	bic.w	r2, r2, #7
    25ac:	e9d2 4500 	ldrd	r4, r5, [r2]
    25b0:	f102 0108 	add.w	r1, r2, #8
    25b4:	9104      	str	r1, [sp, #16]
    25b6:	f016 0901 	ands.w	r9, r6, #1
    25ba:	f000 8177 	beq.w	28ac <_vfiprintf_r+0xa18>
    25be:	ea54 0205 	orrs.w	r2, r4, r5
    25c2:	f040 8226 	bne.w	2a12 <_vfiprintf_r+0xb7e>
    25c6:	f04f 0300 	mov.w	r3, #0
    25ca:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    25ce:	9b01      	ldr	r3, [sp, #4]
    25d0:	2b00      	cmp	r3, #0
    25d2:	f2c0 8196 	blt.w	2902 <_vfiprintf_r+0xa6e>
    25d6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    25da:	e572      	b.n	20c2 <_vfiprintf_r+0x22e>
    25dc:	9a04      	ldr	r2, [sp, #16]
    25de:	9406      	str	r4, [sp, #24]
    25e0:	6813      	ldr	r3, [r2, #0]
    25e2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    25e6:	4613      	mov	r3, r2
    25e8:	f04f 0100 	mov.w	r1, #0
    25ec:	2501      	movs	r5, #1
    25ee:	3304      	adds	r3, #4
    25f0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
    25f4:	9304      	str	r3, [sp, #16]
    25f6:	9503      	str	r5, [sp, #12]
    25f8:	af10      	add	r7, sp, #64	; 0x40
    25fa:	2300      	movs	r3, #0
    25fc:	9301      	str	r3, [sp, #4]
    25fe:	e573      	b.n	20e8 <_vfiprintf_r+0x254>
    2600:	f898 3000 	ldrb.w	r3, [r8]
    2604:	2800      	cmp	r0, #0
    2606:	f47f acac 	bne.w	1f62 <_vfiprintf_r+0xce>
    260a:	2101      	movs	r1, #1
    260c:	2020      	movs	r0, #32
    260e:	e4a8      	b.n	1f62 <_vfiprintf_r+0xce>
    2610:	f046 0601 	orr.w	r6, r6, #1
    2614:	f898 3000 	ldrb.w	r3, [r8]
    2618:	e4a3      	b.n	1f62 <_vfiprintf_r+0xce>
    261a:	9406      	str	r4, [sp, #24]
    261c:	2900      	cmp	r1, #0
    261e:	f040 830c 	bne.w	2c3a <_vfiprintf_r+0xda6>
    2622:	06b2      	lsls	r2, r6, #26
    2624:	488e      	ldr	r0, [pc, #568]	; (2860 <_vfiprintf_r+0x9cc>)
    2626:	d4bd      	bmi.n	25a4 <_vfiprintf_r+0x710>
    2628:	9904      	ldr	r1, [sp, #16]
    262a:	06f7      	lsls	r7, r6, #27
    262c:	460a      	mov	r2, r1
    262e:	f100 819d 	bmi.w	296c <_vfiprintf_r+0xad8>
    2632:	0675      	lsls	r5, r6, #25
    2634:	f140 819a 	bpl.w	296c <_vfiprintf_r+0xad8>
    2638:	3204      	adds	r2, #4
    263a:	880c      	ldrh	r4, [r1, #0]
    263c:	9204      	str	r2, [sp, #16]
    263e:	2500      	movs	r5, #0
    2640:	e7b9      	b.n	25b6 <_vfiprintf_r+0x722>
    2642:	f046 0640 	orr.w	r6, r6, #64	; 0x40
    2646:	f898 3000 	ldrb.w	r3, [r8]
    264a:	e48a      	b.n	1f62 <_vfiprintf_r+0xce>
    264c:	f898 3000 	ldrb.w	r3, [r8]
    2650:	2b6c      	cmp	r3, #108	; 0x6c
    2652:	bf03      	ittte	eq
    2654:	f898 3001 	ldrbeq.w	r3, [r8, #1]
    2658:	f046 0620 	orreq.w	r6, r6, #32
    265c:	f108 0801 	addeq.w	r8, r8, #1
    2660:	f046 0610 	orrne.w	r6, r6, #16
    2664:	e47d      	b.n	1f62 <_vfiprintf_r+0xce>
    2666:	2900      	cmp	r1, #0
    2668:	f040 8309 	bne.w	2c7e <_vfiprintf_r+0xdea>
    266c:	06b4      	lsls	r4, r6, #26
    266e:	f140 821c 	bpl.w	2aaa <_vfiprintf_r+0xc16>
    2672:	9a04      	ldr	r2, [sp, #16]
    2674:	9902      	ldr	r1, [sp, #8]
    2676:	6813      	ldr	r3, [r2, #0]
    2678:	17cd      	asrs	r5, r1, #31
    267a:	4608      	mov	r0, r1
    267c:	3204      	adds	r2, #4
    267e:	4629      	mov	r1, r5
    2680:	9204      	str	r2, [sp, #16]
    2682:	e9c3 0100 	strd	r0, r1, [r3]
    2686:	e436      	b.n	1ef6 <_vfiprintf_r+0x62>
    2688:	9406      	str	r4, [sp, #24]
    268a:	2900      	cmp	r1, #0
    268c:	f43f ae43 	beq.w	2316 <_vfiprintf_r+0x482>
    2690:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    2694:	e63f      	b.n	2316 <_vfiprintf_r+0x482>
    2696:	9406      	str	r4, [sp, #24]
    2698:	2900      	cmp	r1, #0
    269a:	f040 82ed 	bne.w	2c78 <_vfiprintf_r+0xde4>
    269e:	2b00      	cmp	r3, #0
    26a0:	f000 808f 	beq.w	27c2 <_vfiprintf_r+0x92e>
    26a4:	2501      	movs	r5, #1
    26a6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    26aa:	f04f 0300 	mov.w	r3, #0
    26ae:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    26b2:	9503      	str	r5, [sp, #12]
    26b4:	af10      	add	r7, sp, #64	; 0x40
    26b6:	e7a0      	b.n	25fa <_vfiprintf_r+0x766>
    26b8:	9304      	str	r3, [sp, #16]
    26ba:	f04f 0900 	mov.w	r9, #0
    26be:	e696      	b.n	23ee <_vfiprintf_r+0x55a>
    26c0:	aa0d      	add	r2, sp, #52	; 0x34
    26c2:	9900      	ldr	r1, [sp, #0]
    26c4:	9309      	str	r3, [sp, #36]	; 0x24
    26c6:	4648      	mov	r0, r9
    26c8:	f7ff fba8 	bl	1e1c <__sprint_r.part.0>
    26cc:	2800      	cmp	r0, #0
    26ce:	d17f      	bne.n	27d0 <_vfiprintf_r+0x93c>
    26d0:	980e      	ldr	r0, [sp, #56]	; 0x38
    26d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    26d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    26d6:	f100 0e01 	add.w	lr, r0, #1
    26da:	46dc      	mov	ip, fp
    26dc:	e529      	b.n	2132 <_vfiprintf_r+0x29e>
    26de:	980e      	ldr	r0, [sp, #56]	; 0x38
    26e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    26e2:	f100 0e01 	add.w	lr, r0, #1
    26e6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    26ea:	2b00      	cmp	r3, #0
    26ec:	f43f ad50 	beq.w	2190 <_vfiprintf_r+0x2fc>
    26f0:	3201      	adds	r2, #1
    26f2:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
    26f6:	2301      	movs	r3, #1
    26f8:	f1be 0f07 	cmp.w	lr, #7
    26fc:	920f      	str	r2, [sp, #60]	; 0x3c
    26fe:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
    2702:	e88a 000a 	stmia.w	sl, {r1, r3}
    2706:	f340 80bf 	ble.w	2888 <_vfiprintf_r+0x9f4>
    270a:	2a00      	cmp	r2, #0
    270c:	f040 814e 	bne.w	29ac <_vfiprintf_r+0xb18>
    2710:	9907      	ldr	r1, [sp, #28]
    2712:	2900      	cmp	r1, #0
    2714:	f040 80be 	bne.w	2894 <_vfiprintf_r+0xa00>
    2718:	469e      	mov	lr, r3
    271a:	4610      	mov	r0, r2
    271c:	46da      	mov	sl, fp
    271e:	9b08      	ldr	r3, [sp, #32]
    2720:	2b80      	cmp	r3, #128	; 0x80
    2722:	f43f ad50 	beq.w	21c6 <_vfiprintf_r+0x332>
    2726:	9b01      	ldr	r3, [sp, #4]
    2728:	9903      	ldr	r1, [sp, #12]
    272a:	1a5c      	subs	r4, r3, r1
    272c:	2c00      	cmp	r4, #0
    272e:	f77f ad93 	ble.w	2258 <_vfiprintf_r+0x3c4>
    2732:	2c10      	cmp	r4, #16
    2734:	f8df 912c 	ldr.w	r9, [pc, #300]	; 2864 <_vfiprintf_r+0x9d0>
    2738:	dd25      	ble.n	2786 <_vfiprintf_r+0x8f2>
    273a:	46d4      	mov	ip, sl
    273c:	2310      	movs	r3, #16
    273e:	46c2      	mov	sl, r8
    2740:	46a8      	mov	r8, r5
    2742:	464d      	mov	r5, r9
    2744:	f8dd 9014 	ldr.w	r9, [sp, #20]
    2748:	e007      	b.n	275a <_vfiprintf_r+0x8c6>
    274a:	f100 0e02 	add.w	lr, r0, #2
    274e:	f10c 0c08 	add.w	ip, ip, #8
    2752:	4608      	mov	r0, r1
    2754:	3c10      	subs	r4, #16
    2756:	2c10      	cmp	r4, #16
    2758:	dd11      	ble.n	277e <_vfiprintf_r+0x8ea>
    275a:	1c41      	adds	r1, r0, #1
    275c:	3210      	adds	r2, #16
    275e:	2907      	cmp	r1, #7
    2760:	920f      	str	r2, [sp, #60]	; 0x3c
    2762:	f8cc 5000 	str.w	r5, [ip]
    2766:	f8cc 3004 	str.w	r3, [ip, #4]
    276a:	910e      	str	r1, [sp, #56]	; 0x38
    276c:	dded      	ble.n	274a <_vfiprintf_r+0x8b6>
    276e:	b9d2      	cbnz	r2, 27a6 <_vfiprintf_r+0x912>
    2770:	3c10      	subs	r4, #16
    2772:	2c10      	cmp	r4, #16
    2774:	f04f 0e01 	mov.w	lr, #1
    2778:	4610      	mov	r0, r2
    277a:	46dc      	mov	ip, fp
    277c:	dced      	bgt.n	275a <_vfiprintf_r+0x8c6>
    277e:	46a9      	mov	r9, r5
    2780:	4645      	mov	r5, r8
    2782:	46d0      	mov	r8, sl
    2784:	46e2      	mov	sl, ip
    2786:	4422      	add	r2, r4
    2788:	f1be 0f07 	cmp.w	lr, #7
    278c:	920f      	str	r2, [sp, #60]	; 0x3c
    278e:	f8ca 9000 	str.w	r9, [sl]
    2792:	f8ca 4004 	str.w	r4, [sl, #4]
    2796:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
    279a:	dc2e      	bgt.n	27fa <_vfiprintf_r+0x966>
    279c:	f10a 0a08 	add.w	sl, sl, #8
    27a0:	f10e 0e01 	add.w	lr, lr, #1
    27a4:	e558      	b.n	2258 <_vfiprintf_r+0x3c4>
    27a6:	aa0d      	add	r2, sp, #52	; 0x34
    27a8:	9900      	ldr	r1, [sp, #0]
    27aa:	9301      	str	r3, [sp, #4]
    27ac:	4648      	mov	r0, r9
    27ae:	f7ff fb35 	bl	1e1c <__sprint_r.part.0>
    27b2:	b968      	cbnz	r0, 27d0 <_vfiprintf_r+0x93c>
    27b4:	980e      	ldr	r0, [sp, #56]	; 0x38
    27b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    27b8:	9b01      	ldr	r3, [sp, #4]
    27ba:	f100 0e01 	add.w	lr, r0, #1
    27be:	46dc      	mov	ip, fp
    27c0:	e7c8      	b.n	2754 <_vfiprintf_r+0x8c0>
    27c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    27c4:	b123      	cbz	r3, 27d0 <_vfiprintf_r+0x93c>
    27c6:	9805      	ldr	r0, [sp, #20]
    27c8:	9900      	ldr	r1, [sp, #0]
    27ca:	aa0d      	add	r2, sp, #52	; 0x34
    27cc:	f7ff fb26 	bl	1e1c <__sprint_r.part.0>
    27d0:	9b00      	ldr	r3, [sp, #0]
    27d2:	899b      	ldrh	r3, [r3, #12]
    27d4:	065a      	lsls	r2, r3, #25
    27d6:	f100 818b 	bmi.w	2af0 <_vfiprintf_r+0xc5c>
    27da:	9802      	ldr	r0, [sp, #8]
    27dc:	b02b      	add	sp, #172	; 0xac
    27de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27e2:	aa0d      	add	r2, sp, #52	; 0x34
    27e4:	9900      	ldr	r1, [sp, #0]
    27e6:	4648      	mov	r0, r9
    27e8:	f7ff fb18 	bl	1e1c <__sprint_r.part.0>
    27ec:	2800      	cmp	r0, #0
    27ee:	d1ef      	bne.n	27d0 <_vfiprintf_r+0x93c>
    27f0:	990e      	ldr	r1, [sp, #56]	; 0x38
    27f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    27f4:	1c48      	adds	r0, r1, #1
    27f6:	46da      	mov	sl, fp
    27f8:	e555      	b.n	22a6 <_vfiprintf_r+0x412>
    27fa:	2a00      	cmp	r2, #0
    27fc:	f040 80fb 	bne.w	29f6 <_vfiprintf_r+0xb62>
    2800:	9a03      	ldr	r2, [sp, #12]
    2802:	921b      	str	r2, [sp, #108]	; 0x6c
    2804:	2301      	movs	r3, #1
    2806:	920f      	str	r2, [sp, #60]	; 0x3c
    2808:	971a      	str	r7, [sp, #104]	; 0x68
    280a:	930e      	str	r3, [sp, #56]	; 0x38
    280c:	46da      	mov	sl, fp
    280e:	f10a 0a08 	add.w	sl, sl, #8
    2812:	0771      	lsls	r1, r6, #29
    2814:	d504      	bpl.n	2820 <_vfiprintf_r+0x98c>
    2816:	9b06      	ldr	r3, [sp, #24]
    2818:	1b5c      	subs	r4, r3, r5
    281a:	2c00      	cmp	r4, #0
    281c:	f73f ad34 	bgt.w	2288 <_vfiprintf_r+0x3f4>
    2820:	9b02      	ldr	r3, [sp, #8]
    2822:	9906      	ldr	r1, [sp, #24]
    2824:	42a9      	cmp	r1, r5
    2826:	bfac      	ite	ge
    2828:	185b      	addge	r3, r3, r1
    282a:	195b      	addlt	r3, r3, r5
    282c:	9302      	str	r3, [sp, #8]
    282e:	2a00      	cmp	r2, #0
    2830:	f040 80b3 	bne.w	299a <_vfiprintf_r+0xb06>
    2834:	2300      	movs	r3, #0
    2836:	930e      	str	r3, [sp, #56]	; 0x38
    2838:	46da      	mov	sl, fp
    283a:	f7ff bb5c 	b.w	1ef6 <_vfiprintf_r+0x62>
    283e:	aa0d      	add	r2, sp, #52	; 0x34
    2840:	9900      	ldr	r1, [sp, #0]
    2842:	9307      	str	r3, [sp, #28]
    2844:	4648      	mov	r0, r9
    2846:	f7ff fae9 	bl	1e1c <__sprint_r.part.0>
    284a:	2800      	cmp	r0, #0
    284c:	d1c0      	bne.n	27d0 <_vfiprintf_r+0x93c>
    284e:	980e      	ldr	r0, [sp, #56]	; 0x38
    2850:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    2852:	9b07      	ldr	r3, [sp, #28]
    2854:	f100 0c01 	add.w	ip, r0, #1
    2858:	46de      	mov	lr, fp
    285a:	e4cb      	b.n	21f4 <_vfiprintf_r+0x360>
    285c:	00004990 	.word	0x00004990
    2860:	000049a4 	.word	0x000049a4
    2864:	00004980 	.word	0x00004980
    2868:	2a00      	cmp	r2, #0
    286a:	f040 8133 	bne.w	2ad4 <_vfiprintf_r+0xc40>
    286e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    2872:	2b00      	cmp	r3, #0
    2874:	f000 80f5 	beq.w	2a62 <_vfiprintf_r+0xbce>
    2878:	2301      	movs	r3, #1
    287a:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
    287e:	461a      	mov	r2, r3
    2880:	931b      	str	r3, [sp, #108]	; 0x6c
    2882:	469e      	mov	lr, r3
    2884:	911a      	str	r1, [sp, #104]	; 0x68
    2886:	46da      	mov	sl, fp
    2888:	4670      	mov	r0, lr
    288a:	f10a 0a08 	add.w	sl, sl, #8
    288e:	f10e 0e01 	add.w	lr, lr, #1
    2892:	e47d      	b.n	2190 <_vfiprintf_r+0x2fc>
    2894:	a90c      	add	r1, sp, #48	; 0x30
    2896:	2202      	movs	r2, #2
    2898:	469e      	mov	lr, r3
    289a:	911a      	str	r1, [sp, #104]	; 0x68
    289c:	921b      	str	r2, [sp, #108]	; 0x6c
    289e:	46da      	mov	sl, fp
    28a0:	4670      	mov	r0, lr
    28a2:	f10a 0a08 	add.w	sl, sl, #8
    28a6:	f10e 0e01 	add.w	lr, lr, #1
    28aa:	e738      	b.n	271e <_vfiprintf_r+0x88a>
    28ac:	9b01      	ldr	r3, [sp, #4]
    28ae:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
    28b2:	2b00      	cmp	r3, #0
    28b4:	f2c0 812a 	blt.w	2b0c <_vfiprintf_r+0xc78>
    28b8:	ea54 0305 	orrs.w	r3, r4, r5
    28bc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    28c0:	f43f abff 	beq.w	20c2 <_vfiprintf_r+0x22e>
    28c4:	465f      	mov	r7, fp
    28c6:	0923      	lsrs	r3, r4, #4
    28c8:	f004 010f 	and.w	r1, r4, #15
    28cc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
    28d0:	092a      	lsrs	r2, r5, #4
    28d2:	461c      	mov	r4, r3
    28d4:	4615      	mov	r5, r2
    28d6:	5c43      	ldrb	r3, [r0, r1]
    28d8:	f807 3d01 	strb.w	r3, [r7, #-1]!
    28dc:	ea54 0305 	orrs.w	r3, r4, r5
    28e0:	d1f1      	bne.n	28c6 <_vfiprintf_r+0xa32>
    28e2:	ebc7 030b 	rsb	r3, r7, fp
    28e6:	9303      	str	r3, [sp, #12]
    28e8:	f7ff bbf4 	b.w	20d4 <_vfiprintf_r+0x240>
    28ec:	aa0d      	add	r2, sp, #52	; 0x34
    28ee:	9900      	ldr	r1, [sp, #0]
    28f0:	9805      	ldr	r0, [sp, #20]
    28f2:	f7ff fa93 	bl	1e1c <__sprint_r.part.0>
    28f6:	2800      	cmp	r0, #0
    28f8:	f47f af6a 	bne.w	27d0 <_vfiprintf_r+0x93c>
    28fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    28fe:	46da      	mov	sl, fp
    2900:	e787      	b.n	2812 <_vfiprintf_r+0x97e>
    2902:	f04f 0900 	mov.w	r9, #0
    2906:	2400      	movs	r4, #0
    2908:	2500      	movs	r5, #0
    290a:	e7db      	b.n	28c4 <_vfiprintf_r+0xa30>
    290c:	f016 0210 	ands.w	r2, r6, #16
    2910:	f000 80b2 	beq.w	2a78 <_vfiprintf_r+0xbe4>
    2914:	9904      	ldr	r1, [sp, #16]
    2916:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    291a:	460a      	mov	r2, r1
    291c:	680c      	ldr	r4, [r1, #0]
    291e:	9901      	ldr	r1, [sp, #4]
    2920:	2900      	cmp	r1, #0
    2922:	f102 0204 	add.w	r2, r2, #4
    2926:	f04f 0500 	mov.w	r5, #0
    292a:	f2c0 8159 	blt.w	2be0 <_vfiprintf_r+0xd4c>
    292e:	ea54 0105 	orrs.w	r1, r4, r5
    2932:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    2936:	9204      	str	r2, [sp, #16]
    2938:	f43f ad51 	beq.w	23de <_vfiprintf_r+0x54a>
    293c:	4699      	mov	r9, r3
    293e:	e556      	b.n	23ee <_vfiprintf_r+0x55a>
    2940:	06f7      	lsls	r7, r6, #27
    2942:	d40a      	bmi.n	295a <_vfiprintf_r+0xac6>
    2944:	0675      	lsls	r5, r6, #25
    2946:	d508      	bpl.n	295a <_vfiprintf_r+0xac6>
    2948:	9904      	ldr	r1, [sp, #16]
    294a:	f9b1 4000 	ldrsh.w	r4, [r1]
    294e:	3104      	adds	r1, #4
    2950:	17e5      	asrs	r5, r4, #31
    2952:	4622      	mov	r2, r4
    2954:	462b      	mov	r3, r5
    2956:	9104      	str	r1, [sp, #16]
    2958:	e4ea      	b.n	2330 <_vfiprintf_r+0x49c>
    295a:	9a04      	ldr	r2, [sp, #16]
    295c:	6814      	ldr	r4, [r2, #0]
    295e:	4613      	mov	r3, r2
    2960:	3304      	adds	r3, #4
    2962:	17e5      	asrs	r5, r4, #31
    2964:	9304      	str	r3, [sp, #16]
    2966:	4622      	mov	r2, r4
    2968:	462b      	mov	r3, r5
    296a:	e4e1      	b.n	2330 <_vfiprintf_r+0x49c>
    296c:	6814      	ldr	r4, [r2, #0]
    296e:	3204      	adds	r2, #4
    2970:	9204      	str	r2, [sp, #16]
    2972:	2500      	movs	r5, #0
    2974:	e61f      	b.n	25b6 <_vfiprintf_r+0x722>
    2976:	f04f 0900 	mov.w	r9, #0
    297a:	ea54 0305 	orrs.w	r3, r4, r5
    297e:	f47f ace8 	bne.w	2352 <_vfiprintf_r+0x4be>
    2982:	e5d8      	b.n	2536 <_vfiprintf_r+0x6a2>
    2984:	aa0d      	add	r2, sp, #52	; 0x34
    2986:	9900      	ldr	r1, [sp, #0]
    2988:	9805      	ldr	r0, [sp, #20]
    298a:	f7ff fa47 	bl	1e1c <__sprint_r.part.0>
    298e:	2800      	cmp	r0, #0
    2990:	f47f af1e 	bne.w	27d0 <_vfiprintf_r+0x93c>
    2994:	46da      	mov	sl, fp
    2996:	f7ff bb48 	b.w	202a <_vfiprintf_r+0x196>
    299a:	aa0d      	add	r2, sp, #52	; 0x34
    299c:	9900      	ldr	r1, [sp, #0]
    299e:	9805      	ldr	r0, [sp, #20]
    29a0:	f7ff fa3c 	bl	1e1c <__sprint_r.part.0>
    29a4:	2800      	cmp	r0, #0
    29a6:	f43f af45 	beq.w	2834 <_vfiprintf_r+0x9a0>
    29aa:	e711      	b.n	27d0 <_vfiprintf_r+0x93c>
    29ac:	aa0d      	add	r2, sp, #52	; 0x34
    29ae:	9900      	ldr	r1, [sp, #0]
    29b0:	9805      	ldr	r0, [sp, #20]
    29b2:	f7ff fa33 	bl	1e1c <__sprint_r.part.0>
    29b6:	2800      	cmp	r0, #0
    29b8:	f47f af0a 	bne.w	27d0 <_vfiprintf_r+0x93c>
    29bc:	980e      	ldr	r0, [sp, #56]	; 0x38
    29be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    29c0:	f100 0e01 	add.w	lr, r0, #1
    29c4:	46da      	mov	sl, fp
    29c6:	f7ff bbe3 	b.w	2190 <_vfiprintf_r+0x2fc>
    29ca:	aa0d      	add	r2, sp, #52	; 0x34
    29cc:	9900      	ldr	r1, [sp, #0]
    29ce:	9805      	ldr	r0, [sp, #20]
    29d0:	f7ff fa24 	bl	1e1c <__sprint_r.part.0>
    29d4:	2800      	cmp	r0, #0
    29d6:	f47f aefb 	bne.w	27d0 <_vfiprintf_r+0x93c>
    29da:	980e      	ldr	r0, [sp, #56]	; 0x38
    29dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    29de:	f100 0e01 	add.w	lr, r0, #1
    29e2:	46da      	mov	sl, fp
    29e4:	e69b      	b.n	271e <_vfiprintf_r+0x88a>
    29e6:	2a00      	cmp	r2, #0
    29e8:	f040 80d8 	bne.w	2b9c <_vfiprintf_r+0xd08>
    29ec:	f04f 0e01 	mov.w	lr, #1
    29f0:	4610      	mov	r0, r2
    29f2:	46da      	mov	sl, fp
    29f4:	e697      	b.n	2726 <_vfiprintf_r+0x892>
    29f6:	aa0d      	add	r2, sp, #52	; 0x34
    29f8:	9900      	ldr	r1, [sp, #0]
    29fa:	9805      	ldr	r0, [sp, #20]
    29fc:	f7ff fa0e 	bl	1e1c <__sprint_r.part.0>
    2a00:	2800      	cmp	r0, #0
    2a02:	f47f aee5 	bne.w	27d0 <_vfiprintf_r+0x93c>
    2a06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2a08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    2a0a:	f103 0e01 	add.w	lr, r3, #1
    2a0e:	46da      	mov	sl, fp
    2a10:	e422      	b.n	2258 <_vfiprintf_r+0x3c4>
    2a12:	2230      	movs	r2, #48	; 0x30
    2a14:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
    2a18:	9a01      	ldr	r2, [sp, #4]
    2a1a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    2a1e:	2a00      	cmp	r2, #0
    2a20:	f04f 0300 	mov.w	r3, #0
    2a24:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    2a28:	f046 0302 	orr.w	r3, r6, #2
    2a2c:	f2c0 80cb 	blt.w	2bc6 <_vfiprintf_r+0xd32>
    2a30:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    2a34:	f046 0602 	orr.w	r6, r6, #2
    2a38:	f04f 0900 	mov.w	r9, #0
    2a3c:	e742      	b.n	28c4 <_vfiprintf_r+0xa30>
    2a3e:	f04f 0900 	mov.w	r9, #0
    2a42:	4890      	ldr	r0, [pc, #576]	; (2c84 <_vfiprintf_r+0xdf0>)
    2a44:	e73e      	b.n	28c4 <_vfiprintf_r+0xa30>
    2a46:	9b01      	ldr	r3, [sp, #4]
    2a48:	4264      	negs	r4, r4
    2a4a:	f04f 092d 	mov.w	r9, #45	; 0x2d
    2a4e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    2a52:	2b00      	cmp	r3, #0
    2a54:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
    2a58:	f6ff ac7b 	blt.w	2352 <_vfiprintf_r+0x4be>
    2a5c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    2a60:	e477      	b.n	2352 <_vfiprintf_r+0x4be>
    2a62:	9b07      	ldr	r3, [sp, #28]
    2a64:	2b00      	cmp	r3, #0
    2a66:	d072      	beq.n	2b4e <_vfiprintf_r+0xcba>
    2a68:	ab0c      	add	r3, sp, #48	; 0x30
    2a6a:	2202      	movs	r2, #2
    2a6c:	931a      	str	r3, [sp, #104]	; 0x68
    2a6e:	921b      	str	r2, [sp, #108]	; 0x6c
    2a70:	f04f 0e01 	mov.w	lr, #1
    2a74:	46da      	mov	sl, fp
    2a76:	e713      	b.n	28a0 <_vfiprintf_r+0xa0c>
    2a78:	f016 0940 	ands.w	r9, r6, #64	; 0x40
    2a7c:	d048      	beq.n	2b10 <_vfiprintf_r+0xc7c>
    2a7e:	9904      	ldr	r1, [sp, #16]
    2a80:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
    2a84:	460b      	mov	r3, r1
    2a86:	880c      	ldrh	r4, [r1, #0]
    2a88:	9901      	ldr	r1, [sp, #4]
    2a8a:	2900      	cmp	r1, #0
    2a8c:	f103 0304 	add.w	r3, r3, #4
    2a90:	f04f 0500 	mov.w	r5, #0
    2a94:	f6ff ae10 	blt.w	26b8 <_vfiprintf_r+0x824>
    2a98:	ea54 0105 	orrs.w	r1, r4, r5
    2a9c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    2aa0:	9304      	str	r3, [sp, #16]
    2aa2:	f43f ac9c 	beq.w	23de <_vfiprintf_r+0x54a>
    2aa6:	4691      	mov	r9, r2
    2aa8:	e4a1      	b.n	23ee <_vfiprintf_r+0x55a>
    2aaa:	06f0      	lsls	r0, r6, #27
    2aac:	d40a      	bmi.n	2ac4 <_vfiprintf_r+0xc30>
    2aae:	0671      	lsls	r1, r6, #25
    2ab0:	d508      	bpl.n	2ac4 <_vfiprintf_r+0xc30>
    2ab2:	9a04      	ldr	r2, [sp, #16]
    2ab4:	6813      	ldr	r3, [r2, #0]
    2ab6:	3204      	adds	r2, #4
    2ab8:	9204      	str	r2, [sp, #16]
    2aba:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    2abe:	801a      	strh	r2, [r3, #0]
    2ac0:	f7ff ba19 	b.w	1ef6 <_vfiprintf_r+0x62>
    2ac4:	9a04      	ldr	r2, [sp, #16]
    2ac6:	6813      	ldr	r3, [r2, #0]
    2ac8:	3204      	adds	r2, #4
    2aca:	9204      	str	r2, [sp, #16]
    2acc:	9a02      	ldr	r2, [sp, #8]
    2ace:	601a      	str	r2, [r3, #0]
    2ad0:	f7ff ba11 	b.w	1ef6 <_vfiprintf_r+0x62>
    2ad4:	aa0d      	add	r2, sp, #52	; 0x34
    2ad6:	9900      	ldr	r1, [sp, #0]
    2ad8:	9805      	ldr	r0, [sp, #20]
    2ada:	f7ff f99f 	bl	1e1c <__sprint_r.part.0>
    2ade:	2800      	cmp	r0, #0
    2ae0:	f47f ae76 	bne.w	27d0 <_vfiprintf_r+0x93c>
    2ae4:	980e      	ldr	r0, [sp, #56]	; 0x38
    2ae6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    2ae8:	f100 0e01 	add.w	lr, r0, #1
    2aec:	46da      	mov	sl, fp
    2aee:	e5fa      	b.n	26e6 <_vfiprintf_r+0x852>
    2af0:	f04f 30ff 	mov.w	r0, #4294967295
    2af4:	f7ff bab6 	b.w	2064 <_vfiprintf_r+0x1d0>
    2af8:	4862      	ldr	r0, [pc, #392]	; (2c84 <_vfiprintf_r+0xdf0>)
    2afa:	4616      	mov	r6, r2
    2afc:	ea54 0205 	orrs.w	r2, r4, r5
    2b00:	9304      	str	r3, [sp, #16]
    2b02:	f04f 0900 	mov.w	r9, #0
    2b06:	f47f aedd 	bne.w	28c4 <_vfiprintf_r+0xa30>
    2b0a:	e6fc      	b.n	2906 <_vfiprintf_r+0xa72>
    2b0c:	9b04      	ldr	r3, [sp, #16]
    2b0e:	e7f5      	b.n	2afc <_vfiprintf_r+0xc68>
    2b10:	9a04      	ldr	r2, [sp, #16]
    2b12:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
    2b16:	4613      	mov	r3, r2
    2b18:	6814      	ldr	r4, [r2, #0]
    2b1a:	9a01      	ldr	r2, [sp, #4]
    2b1c:	2a00      	cmp	r2, #0
    2b1e:	f103 0304 	add.w	r3, r3, #4
    2b22:	f04f 0500 	mov.w	r5, #0
    2b26:	f6ff adc7 	blt.w	26b8 <_vfiprintf_r+0x824>
    2b2a:	ea54 0205 	orrs.w	r2, r4, r5
    2b2e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    2b32:	9304      	str	r3, [sp, #16]
    2b34:	f47f ac5b 	bne.w	23ee <_vfiprintf_r+0x55a>
    2b38:	e451      	b.n	23de <_vfiprintf_r+0x54a>
    2b3a:	aa0d      	add	r2, sp, #52	; 0x34
    2b3c:	9900      	ldr	r1, [sp, #0]
    2b3e:	9805      	ldr	r0, [sp, #20]
    2b40:	f7ff f96c 	bl	1e1c <__sprint_r.part.0>
    2b44:	2800      	cmp	r0, #0
    2b46:	f47f ae43 	bne.w	27d0 <_vfiprintf_r+0x93c>
    2b4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    2b4c:	e668      	b.n	2820 <_vfiprintf_r+0x98c>
    2b4e:	4610      	mov	r0, r2
    2b50:	f04f 0e01 	mov.w	lr, #1
    2b54:	46da      	mov	sl, fp
    2b56:	e5e6      	b.n	2726 <_vfiprintf_r+0x892>
    2b58:	9904      	ldr	r1, [sp, #16]
    2b5a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    2b5e:	460a      	mov	r2, r1
    2b60:	880c      	ldrh	r4, [r1, #0]
    2b62:	9901      	ldr	r1, [sp, #4]
    2b64:	2900      	cmp	r1, #0
    2b66:	f102 0204 	add.w	r2, r2, #4
    2b6a:	f04f 0500 	mov.w	r5, #0
    2b6e:	db4e      	blt.n	2c0e <_vfiprintf_r+0xd7a>
    2b70:	ea54 0105 	orrs.w	r1, r4, r5
    2b74:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    2b78:	9204      	str	r2, [sp, #16]
    2b7a:	4699      	mov	r9, r3
    2b7c:	f47f abe9 	bne.w	2352 <_vfiprintf_r+0x4be>
    2b80:	e4d4      	b.n	252c <_vfiprintf_r+0x698>
    2b82:	9304      	str	r3, [sp, #16]
    2b84:	e6f9      	b.n	297a <_vfiprintf_r+0xae6>
    2b86:	4638      	mov	r0, r7
    2b88:	9404      	str	r4, [sp, #16]
    2b8a:	f001 fc99 	bl	44c0 <strlen>
    2b8e:	2300      	movs	r3, #0
    2b90:	9003      	str	r0, [sp, #12]
    2b92:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
    2b96:	9301      	str	r3, [sp, #4]
    2b98:	f7ff ba9c 	b.w	20d4 <_vfiprintf_r+0x240>
    2b9c:	aa0d      	add	r2, sp, #52	; 0x34
    2b9e:	9900      	ldr	r1, [sp, #0]
    2ba0:	9805      	ldr	r0, [sp, #20]
    2ba2:	f7ff f93b 	bl	1e1c <__sprint_r.part.0>
    2ba6:	2800      	cmp	r0, #0
    2ba8:	f47f ae12 	bne.w	27d0 <_vfiprintf_r+0x93c>
    2bac:	980e      	ldr	r0, [sp, #56]	; 0x38
    2bae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    2bb0:	f100 0e01 	add.w	lr, r0, #1
    2bb4:	46da      	mov	sl, fp
    2bb6:	e5b6      	b.n	2726 <_vfiprintf_r+0x892>
    2bb8:	980e      	ldr	r0, [sp, #56]	; 0x38
    2bba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    2bbc:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 2c8c <_vfiprintf_r+0xdf8>
    2bc0:	3001      	adds	r0, #1
    2bc2:	f7ff bad2 	b.w	216a <_vfiprintf_r+0x2d6>
    2bc6:	461e      	mov	r6, r3
    2bc8:	f04f 0900 	mov.w	r9, #0
    2bcc:	e67a      	b.n	28c4 <_vfiprintf_r+0xa30>
    2bce:	2b06      	cmp	r3, #6
    2bd0:	bf28      	it	cs
    2bd2:	2306      	movcs	r3, #6
    2bd4:	9303      	str	r3, [sp, #12]
    2bd6:	9404      	str	r4, [sp, #16]
    2bd8:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
    2bdc:	4f2a      	ldr	r7, [pc, #168]	; (2c88 <_vfiprintf_r+0xdf4>)
    2bde:	e50c      	b.n	25fa <_vfiprintf_r+0x766>
    2be0:	9204      	str	r2, [sp, #16]
    2be2:	e56a      	b.n	26ba <_vfiprintf_r+0x826>
    2be4:	980e      	ldr	r0, [sp, #56]	; 0x38
    2be6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 2c8c <_vfiprintf_r+0xdf8>
    2bea:	3001      	adds	r0, #1
    2bec:	f7ff bb73 	b.w	22d6 <_vfiprintf_r+0x442>
    2bf0:	46f4      	mov	ip, lr
    2bf2:	f7ff bb1a 	b.w	222a <_vfiprintf_r+0x396>
    2bf6:	9b01      	ldr	r3, [sp, #4]
    2bf8:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
    2bfc:	9303      	str	r3, [sp, #12]
    2bfe:	9404      	str	r4, [sp, #16]
    2c00:	9001      	str	r0, [sp, #4]
    2c02:	f7ff ba67 	b.w	20d4 <_vfiprintf_r+0x240>
    2c06:	2200      	movs	r2, #0
    2c08:	9201      	str	r2, [sp, #4]
    2c0a:	f7ff b9ac 	b.w	1f66 <_vfiprintf_r+0xd2>
    2c0e:	9204      	str	r2, [sp, #16]
    2c10:	4699      	mov	r9, r3
    2c12:	e6b2      	b.n	297a <_vfiprintf_r+0xae6>
    2c14:	9a04      	ldr	r2, [sp, #16]
    2c16:	6813      	ldr	r3, [r2, #0]
    2c18:	9301      	str	r3, [sp, #4]
    2c1a:	3204      	adds	r2, #4
    2c1c:	2b00      	cmp	r3, #0
    2c1e:	9204      	str	r2, [sp, #16]
    2c20:	f898 3001 	ldrb.w	r3, [r8, #1]
    2c24:	46a8      	mov	r8, r5
    2c26:	f6bf a99c 	bge.w	1f62 <_vfiprintf_r+0xce>
    2c2a:	f04f 32ff 	mov.w	r2, #4294967295
    2c2e:	9201      	str	r2, [sp, #4]
    2c30:	f7ff b997 	b.w	1f62 <_vfiprintf_r+0xce>
    2c34:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    2c38:	e48e      	b.n	2558 <_vfiprintf_r+0x6c4>
    2c3a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    2c3e:	e4f0      	b.n	2622 <_vfiprintf_r+0x78e>
    2c40:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    2c44:	e4ab      	b.n	259e <_vfiprintf_r+0x70a>
    2c46:	4699      	mov	r9, r3
    2c48:	07f3      	lsls	r3, r6, #31
    2c4a:	d505      	bpl.n	2c58 <_vfiprintf_r+0xdc4>
    2c4c:	af2a      	add	r7, sp, #168	; 0xa8
    2c4e:	2330      	movs	r3, #48	; 0x30
    2c50:	f807 3d41 	strb.w	r3, [r7, #-65]!
    2c54:	f7ff bb97 	b.w	2386 <_vfiprintf_r+0x4f2>
    2c58:	9b01      	ldr	r3, [sp, #4]
    2c5a:	9303      	str	r3, [sp, #12]
    2c5c:	465f      	mov	r7, fp
    2c5e:	f7ff ba39 	b.w	20d4 <_vfiprintf_r+0x240>
    2c62:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    2c66:	e443      	b.n	24f0 <_vfiprintf_r+0x65c>
    2c68:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    2c6c:	f7ff bb9a 	b.w	23a4 <_vfiprintf_r+0x510>
    2c70:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    2c74:	f7ff bb4d 	b.w	2312 <_vfiprintf_r+0x47e>
    2c78:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    2c7c:	e50f      	b.n	269e <_vfiprintf_r+0x80a>
    2c7e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    2c82:	e4f3      	b.n	266c <_vfiprintf_r+0x7d8>
    2c84:	000049a4 	.word	0x000049a4
    2c88:	000049b8 	.word	0x000049b8
    2c8c:	000049c0 	.word	0x000049c0

00002c90 <__sbprintf>:
    2c90:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c92:	460c      	mov	r4, r1
    2c94:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
    2c98:	8989      	ldrh	r1, [r1, #12]
    2c9a:	6e66      	ldr	r6, [r4, #100]	; 0x64
    2c9c:	89e5      	ldrh	r5, [r4, #14]
    2c9e:	9619      	str	r6, [sp, #100]	; 0x64
    2ca0:	f021 0102 	bic.w	r1, r1, #2
    2ca4:	6a66      	ldr	r6, [r4, #36]	; 0x24
    2ca6:	f8ad 500e 	strh.w	r5, [sp, #14]
    2caa:	2500      	movs	r5, #0
    2cac:	69e7      	ldr	r7, [r4, #28]
    2cae:	f8ad 100c 	strh.w	r1, [sp, #12]
    2cb2:	9609      	str	r6, [sp, #36]	; 0x24
    2cb4:	9506      	str	r5, [sp, #24]
    2cb6:	ae1a      	add	r6, sp, #104	; 0x68
    2cb8:	f44f 6580 	mov.w	r5, #1024	; 0x400
    2cbc:	4669      	mov	r1, sp
    2cbe:	9600      	str	r6, [sp, #0]
    2cc0:	9604      	str	r6, [sp, #16]
    2cc2:	9502      	str	r5, [sp, #8]
    2cc4:	9505      	str	r5, [sp, #20]
    2cc6:	9707      	str	r7, [sp, #28]
    2cc8:	4606      	mov	r6, r0
    2cca:	f7ff f8e3 	bl	1e94 <_vfiprintf_r>
    2cce:	1e05      	subs	r5, r0, #0
    2cd0:	db07      	blt.n	2ce2 <__sbprintf+0x52>
    2cd2:	4630      	mov	r0, r6
    2cd4:	4669      	mov	r1, sp
    2cd6:	f000 f929 	bl	2f2c <_fflush_r>
    2cda:	2800      	cmp	r0, #0
    2cdc:	bf18      	it	ne
    2cde:	f04f 35ff 	movne.w	r5, #4294967295
    2ce2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    2ce6:	065b      	lsls	r3, r3, #25
    2ce8:	d503      	bpl.n	2cf2 <__sbprintf+0x62>
    2cea:	89a3      	ldrh	r3, [r4, #12]
    2cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2cf0:	81a3      	strh	r3, [r4, #12]
    2cf2:	4628      	mov	r0, r5
    2cf4:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
    2cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cfa:	bf00      	nop

00002cfc <__swsetup_r>:
    2cfc:	b538      	push	{r3, r4, r5, lr}
    2cfe:	4b30      	ldr	r3, [pc, #192]	; (2dc0 <__swsetup_r+0xc4>)
    2d00:	681b      	ldr	r3, [r3, #0]
    2d02:	4605      	mov	r5, r0
    2d04:	460c      	mov	r4, r1
    2d06:	b113      	cbz	r3, 2d0e <__swsetup_r+0x12>
    2d08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2d0a:	2a00      	cmp	r2, #0
    2d0c:	d038      	beq.n	2d80 <__swsetup_r+0x84>
    2d0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    2d12:	b293      	uxth	r3, r2
    2d14:	0718      	lsls	r0, r3, #28
    2d16:	d50c      	bpl.n	2d32 <__swsetup_r+0x36>
    2d18:	6920      	ldr	r0, [r4, #16]
    2d1a:	b1a8      	cbz	r0, 2d48 <__swsetup_r+0x4c>
    2d1c:	f013 0201 	ands.w	r2, r3, #1
    2d20:	d01e      	beq.n	2d60 <__swsetup_r+0x64>
    2d22:	6963      	ldr	r3, [r4, #20]
    2d24:	2200      	movs	r2, #0
    2d26:	425b      	negs	r3, r3
    2d28:	61a3      	str	r3, [r4, #24]
    2d2a:	60a2      	str	r2, [r4, #8]
    2d2c:	b1f0      	cbz	r0, 2d6c <__swsetup_r+0x70>
    2d2e:	2000      	movs	r0, #0
    2d30:	bd38      	pop	{r3, r4, r5, pc}
    2d32:	06d9      	lsls	r1, r3, #27
    2d34:	d53c      	bpl.n	2db0 <__swsetup_r+0xb4>
    2d36:	0758      	lsls	r0, r3, #29
    2d38:	d426      	bmi.n	2d88 <__swsetup_r+0x8c>
    2d3a:	6920      	ldr	r0, [r4, #16]
    2d3c:	f042 0308 	orr.w	r3, r2, #8
    2d40:	81a3      	strh	r3, [r4, #12]
    2d42:	b29b      	uxth	r3, r3
    2d44:	2800      	cmp	r0, #0
    2d46:	d1e9      	bne.n	2d1c <__swsetup_r+0x20>
    2d48:	f403 7220 	and.w	r2, r3, #640	; 0x280
    2d4c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    2d50:	d0e4      	beq.n	2d1c <__swsetup_r+0x20>
    2d52:	4628      	mov	r0, r5
    2d54:	4621      	mov	r1, r4
    2d56:	f000 fd15 	bl	3784 <__smakebuf_r>
    2d5a:	89a3      	ldrh	r3, [r4, #12]
    2d5c:	6920      	ldr	r0, [r4, #16]
    2d5e:	e7dd      	b.n	2d1c <__swsetup_r+0x20>
    2d60:	0799      	lsls	r1, r3, #30
    2d62:	bf58      	it	pl
    2d64:	6962      	ldrpl	r2, [r4, #20]
    2d66:	60a2      	str	r2, [r4, #8]
    2d68:	2800      	cmp	r0, #0
    2d6a:	d1e0      	bne.n	2d2e <__swsetup_r+0x32>
    2d6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    2d70:	061a      	lsls	r2, r3, #24
    2d72:	d5dd      	bpl.n	2d30 <__swsetup_r+0x34>
    2d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2d78:	81a3      	strh	r3, [r4, #12]
    2d7a:	f04f 30ff 	mov.w	r0, #4294967295
    2d7e:	bd38      	pop	{r3, r4, r5, pc}
    2d80:	4618      	mov	r0, r3
    2d82:	f000 f967 	bl	3054 <__sinit>
    2d86:	e7c2      	b.n	2d0e <__swsetup_r+0x12>
    2d88:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2d8a:	b151      	cbz	r1, 2da2 <__swsetup_r+0xa6>
    2d8c:	f104 0340 	add.w	r3, r4, #64	; 0x40
    2d90:	4299      	cmp	r1, r3
    2d92:	d004      	beq.n	2d9e <__swsetup_r+0xa2>
    2d94:	4628      	mov	r0, r5
    2d96:	f000 fa27 	bl	31e8 <_free_r>
    2d9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    2d9e:	2300      	movs	r3, #0
    2da0:	6323      	str	r3, [r4, #48]	; 0x30
    2da2:	2300      	movs	r3, #0
    2da4:	6920      	ldr	r0, [r4, #16]
    2da6:	6063      	str	r3, [r4, #4]
    2da8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
    2dac:	6020      	str	r0, [r4, #0]
    2dae:	e7c5      	b.n	2d3c <__swsetup_r+0x40>
    2db0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    2db4:	2309      	movs	r3, #9
    2db6:	602b      	str	r3, [r5, #0]
    2db8:	f04f 30ff 	mov.w	r0, #4294967295
    2dbc:	81a2      	strh	r2, [r4, #12]
    2dbe:	bd38      	pop	{r3, r4, r5, pc}
    2dc0:	20000468 	.word	0x20000468

00002dc4 <register_fini>:
    2dc4:	4b02      	ldr	r3, [pc, #8]	; (2dd0 <register_fini+0xc>)
    2dc6:	b113      	cbz	r3, 2dce <register_fini+0xa>
    2dc8:	4802      	ldr	r0, [pc, #8]	; (2dd4 <register_fini+0x10>)
    2dca:	f000 b805 	b.w	2dd8 <atexit>
    2dce:	4770      	bx	lr
    2dd0:	00000000 	.word	0x00000000
    2dd4:	00003069 	.word	0x00003069

00002dd8 <atexit>:
    2dd8:	2300      	movs	r3, #0
    2dda:	4601      	mov	r1, r0
    2ddc:	461a      	mov	r2, r3
    2dde:	4618      	mov	r0, r3
    2de0:	f001 bc80 	b.w	46e4 <__register_exitproc>

00002de4 <__sflush_r>:
    2de4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    2de8:	b29a      	uxth	r2, r3
    2dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2dee:	460d      	mov	r5, r1
    2df0:	0711      	lsls	r1, r2, #28
    2df2:	4680      	mov	r8, r0
    2df4:	d43c      	bmi.n	2e70 <__sflush_r+0x8c>
    2df6:	686a      	ldr	r2, [r5, #4]
    2df8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    2dfc:	2a00      	cmp	r2, #0
    2dfe:	81ab      	strh	r3, [r5, #12]
    2e00:	dd73      	ble.n	2eea <__sflush_r+0x106>
    2e02:	6aac      	ldr	r4, [r5, #40]	; 0x28
    2e04:	2c00      	cmp	r4, #0
    2e06:	d04b      	beq.n	2ea0 <__sflush_r+0xbc>
    2e08:	b29b      	uxth	r3, r3
    2e0a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
    2e0e:	2100      	movs	r1, #0
    2e10:	b292      	uxth	r2, r2
    2e12:	f8d8 6000 	ldr.w	r6, [r8]
    2e16:	f8c8 1000 	str.w	r1, [r8]
    2e1a:	2a00      	cmp	r2, #0
    2e1c:	d069      	beq.n	2ef2 <__sflush_r+0x10e>
    2e1e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    2e20:	075f      	lsls	r7, r3, #29
    2e22:	d505      	bpl.n	2e30 <__sflush_r+0x4c>
    2e24:	6869      	ldr	r1, [r5, #4]
    2e26:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    2e28:	1a52      	subs	r2, r2, r1
    2e2a:	b10b      	cbz	r3, 2e30 <__sflush_r+0x4c>
    2e2c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    2e2e:	1ad2      	subs	r2, r2, r3
    2e30:	2300      	movs	r3, #0
    2e32:	69e9      	ldr	r1, [r5, #28]
    2e34:	4640      	mov	r0, r8
    2e36:	47a0      	blx	r4
    2e38:	1c44      	adds	r4, r0, #1
    2e3a:	d03c      	beq.n	2eb6 <__sflush_r+0xd2>
    2e3c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
    2e40:	692a      	ldr	r2, [r5, #16]
    2e42:	602a      	str	r2, [r5, #0]
    2e44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2e48:	2200      	movs	r2, #0
    2e4a:	81ab      	strh	r3, [r5, #12]
    2e4c:	04db      	lsls	r3, r3, #19
    2e4e:	606a      	str	r2, [r5, #4]
    2e50:	d449      	bmi.n	2ee6 <__sflush_r+0x102>
    2e52:	6b29      	ldr	r1, [r5, #48]	; 0x30
    2e54:	f8c8 6000 	str.w	r6, [r8]
    2e58:	b311      	cbz	r1, 2ea0 <__sflush_r+0xbc>
    2e5a:	f105 0340 	add.w	r3, r5, #64	; 0x40
    2e5e:	4299      	cmp	r1, r3
    2e60:	d002      	beq.n	2e68 <__sflush_r+0x84>
    2e62:	4640      	mov	r0, r8
    2e64:	f000 f9c0 	bl	31e8 <_free_r>
    2e68:	2000      	movs	r0, #0
    2e6a:	6328      	str	r0, [r5, #48]	; 0x30
    2e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2e70:	692e      	ldr	r6, [r5, #16]
    2e72:	b1ae      	cbz	r6, 2ea0 <__sflush_r+0xbc>
    2e74:	682c      	ldr	r4, [r5, #0]
    2e76:	602e      	str	r6, [r5, #0]
    2e78:	0790      	lsls	r0, r2, #30
    2e7a:	bf0c      	ite	eq
    2e7c:	696b      	ldreq	r3, [r5, #20]
    2e7e:	2300      	movne	r3, #0
    2e80:	1ba4      	subs	r4, r4, r6
    2e82:	60ab      	str	r3, [r5, #8]
    2e84:	e00a      	b.n	2e9c <__sflush_r+0xb8>
    2e86:	4623      	mov	r3, r4
    2e88:	4632      	mov	r2, r6
    2e8a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    2e8c:	69e9      	ldr	r1, [r5, #28]
    2e8e:	4640      	mov	r0, r8
    2e90:	47b8      	blx	r7
    2e92:	2800      	cmp	r0, #0
    2e94:	eba4 0400 	sub.w	r4, r4, r0
    2e98:	4406      	add	r6, r0
    2e9a:	dd04      	ble.n	2ea6 <__sflush_r+0xc2>
    2e9c:	2c00      	cmp	r4, #0
    2e9e:	dcf2      	bgt.n	2e86 <__sflush_r+0xa2>
    2ea0:	2000      	movs	r0, #0
    2ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ea6:	89ab      	ldrh	r3, [r5, #12]
    2ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2eac:	81ab      	strh	r3, [r5, #12]
    2eae:	f04f 30ff 	mov.w	r0, #4294967295
    2eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2eb6:	f8d8 2000 	ldr.w	r2, [r8]
    2eba:	2a1d      	cmp	r2, #29
    2ebc:	d8f3      	bhi.n	2ea6 <__sflush_r+0xc2>
    2ebe:	4b1a      	ldr	r3, [pc, #104]	; (2f28 <__sflush_r+0x144>)
    2ec0:	40d3      	lsrs	r3, r2
    2ec2:	f003 0301 	and.w	r3, r3, #1
    2ec6:	f083 0401 	eor.w	r4, r3, #1
    2eca:	2b00      	cmp	r3, #0
    2ecc:	d0eb      	beq.n	2ea6 <__sflush_r+0xc2>
    2ece:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
    2ed2:	6929      	ldr	r1, [r5, #16]
    2ed4:	6029      	str	r1, [r5, #0]
    2ed6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2eda:	04d9      	lsls	r1, r3, #19
    2edc:	606c      	str	r4, [r5, #4]
    2ede:	81ab      	strh	r3, [r5, #12]
    2ee0:	d5b7      	bpl.n	2e52 <__sflush_r+0x6e>
    2ee2:	2a00      	cmp	r2, #0
    2ee4:	d1b5      	bne.n	2e52 <__sflush_r+0x6e>
    2ee6:	6528      	str	r0, [r5, #80]	; 0x50
    2ee8:	e7b3      	b.n	2e52 <__sflush_r+0x6e>
    2eea:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    2eec:	2a00      	cmp	r2, #0
    2eee:	dc88      	bgt.n	2e02 <__sflush_r+0x1e>
    2ef0:	e7d6      	b.n	2ea0 <__sflush_r+0xbc>
    2ef2:	2301      	movs	r3, #1
    2ef4:	69e9      	ldr	r1, [r5, #28]
    2ef6:	4640      	mov	r0, r8
    2ef8:	47a0      	blx	r4
    2efa:	1c43      	adds	r3, r0, #1
    2efc:	4602      	mov	r2, r0
    2efe:	d002      	beq.n	2f06 <__sflush_r+0x122>
    2f00:	89ab      	ldrh	r3, [r5, #12]
    2f02:	6aac      	ldr	r4, [r5, #40]	; 0x28
    2f04:	e78c      	b.n	2e20 <__sflush_r+0x3c>
    2f06:	f8d8 3000 	ldr.w	r3, [r8]
    2f0a:	2b00      	cmp	r3, #0
    2f0c:	d0f8      	beq.n	2f00 <__sflush_r+0x11c>
    2f0e:	2b1d      	cmp	r3, #29
    2f10:	d001      	beq.n	2f16 <__sflush_r+0x132>
    2f12:	2b16      	cmp	r3, #22
    2f14:	d102      	bne.n	2f1c <__sflush_r+0x138>
    2f16:	f8c8 6000 	str.w	r6, [r8]
    2f1a:	e7c1      	b.n	2ea0 <__sflush_r+0xbc>
    2f1c:	89ab      	ldrh	r3, [r5, #12]
    2f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2f22:	81ab      	strh	r3, [r5, #12]
    2f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f28:	20400001 	.word	0x20400001

00002f2c <_fflush_r>:
    2f2c:	b510      	push	{r4, lr}
    2f2e:	4604      	mov	r4, r0
    2f30:	b082      	sub	sp, #8
    2f32:	b108      	cbz	r0, 2f38 <_fflush_r+0xc>
    2f34:	6b83      	ldr	r3, [r0, #56]	; 0x38
    2f36:	b153      	cbz	r3, 2f4e <_fflush_r+0x22>
    2f38:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
    2f3c:	b908      	cbnz	r0, 2f42 <_fflush_r+0x16>
    2f3e:	b002      	add	sp, #8
    2f40:	bd10      	pop	{r4, pc}
    2f42:	4620      	mov	r0, r4
    2f44:	b002      	add	sp, #8
    2f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2f4a:	f7ff bf4b 	b.w	2de4 <__sflush_r>
    2f4e:	9101      	str	r1, [sp, #4]
    2f50:	f000 f880 	bl	3054 <__sinit>
    2f54:	9901      	ldr	r1, [sp, #4]
    2f56:	e7ef      	b.n	2f38 <_fflush_r+0xc>

00002f58 <_cleanup_r>:
    2f58:	4901      	ldr	r1, [pc, #4]	; (2f60 <_cleanup_r+0x8>)
    2f5a:	f000 bbaf 	b.w	36bc <_fwalk_reent>
    2f5e:	bf00      	nop
    2f60:	000047ad 	.word	0x000047ad

00002f64 <__sinit.part.1>:
    2f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f68:	4b35      	ldr	r3, [pc, #212]	; (3040 <__sinit.part.1+0xdc>)
    2f6a:	6845      	ldr	r5, [r0, #4]
    2f6c:	63c3      	str	r3, [r0, #60]	; 0x3c
    2f6e:	2400      	movs	r4, #0
    2f70:	4607      	mov	r7, r0
    2f72:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
    2f76:	2304      	movs	r3, #4
    2f78:	2103      	movs	r1, #3
    2f7a:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
    2f7e:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
    2f82:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
    2f86:	b083      	sub	sp, #12
    2f88:	602c      	str	r4, [r5, #0]
    2f8a:	606c      	str	r4, [r5, #4]
    2f8c:	60ac      	str	r4, [r5, #8]
    2f8e:	666c      	str	r4, [r5, #100]	; 0x64
    2f90:	81ec      	strh	r4, [r5, #14]
    2f92:	612c      	str	r4, [r5, #16]
    2f94:	616c      	str	r4, [r5, #20]
    2f96:	61ac      	str	r4, [r5, #24]
    2f98:	81ab      	strh	r3, [r5, #12]
    2f9a:	4621      	mov	r1, r4
    2f9c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
    2fa0:	2208      	movs	r2, #8
    2fa2:	f7fe fe3d 	bl	1c20 <memset>
    2fa6:	68be      	ldr	r6, [r7, #8]
    2fa8:	f8df b098 	ldr.w	fp, [pc, #152]	; 3044 <__sinit.part.1+0xe0>
    2fac:	f8df a098 	ldr.w	sl, [pc, #152]	; 3048 <__sinit.part.1+0xe4>
    2fb0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 304c <__sinit.part.1+0xe8>
    2fb4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 3050 <__sinit.part.1+0xec>
    2fb8:	f8c5 b020 	str.w	fp, [r5, #32]
    2fbc:	2301      	movs	r3, #1
    2fbe:	2209      	movs	r2, #9
    2fc0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
    2fc4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
    2fc8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
    2fcc:	61ed      	str	r5, [r5, #28]
    2fce:	4621      	mov	r1, r4
    2fd0:	81f3      	strh	r3, [r6, #14]
    2fd2:	81b2      	strh	r2, [r6, #12]
    2fd4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
    2fd8:	6034      	str	r4, [r6, #0]
    2fda:	6074      	str	r4, [r6, #4]
    2fdc:	60b4      	str	r4, [r6, #8]
    2fde:	6674      	str	r4, [r6, #100]	; 0x64
    2fe0:	6134      	str	r4, [r6, #16]
    2fe2:	6174      	str	r4, [r6, #20]
    2fe4:	61b4      	str	r4, [r6, #24]
    2fe6:	2208      	movs	r2, #8
    2fe8:	9301      	str	r3, [sp, #4]
    2fea:	f7fe fe19 	bl	1c20 <memset>
    2fee:	68fd      	ldr	r5, [r7, #12]
    2ff0:	61f6      	str	r6, [r6, #28]
    2ff2:	2012      	movs	r0, #18
    2ff4:	2202      	movs	r2, #2
    2ff6:	f8c6 b020 	str.w	fp, [r6, #32]
    2ffa:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
    2ffe:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
    3002:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
    3006:	4621      	mov	r1, r4
    3008:	81a8      	strh	r0, [r5, #12]
    300a:	81ea      	strh	r2, [r5, #14]
    300c:	602c      	str	r4, [r5, #0]
    300e:	606c      	str	r4, [r5, #4]
    3010:	60ac      	str	r4, [r5, #8]
    3012:	666c      	str	r4, [r5, #100]	; 0x64
    3014:	612c      	str	r4, [r5, #16]
    3016:	616c      	str	r4, [r5, #20]
    3018:	61ac      	str	r4, [r5, #24]
    301a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
    301e:	2208      	movs	r2, #8
    3020:	f7fe fdfe 	bl	1c20 <memset>
    3024:	9b01      	ldr	r3, [sp, #4]
    3026:	61ed      	str	r5, [r5, #28]
    3028:	f8c5 b020 	str.w	fp, [r5, #32]
    302c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
    3030:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
    3034:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
    3038:	63bb      	str	r3, [r7, #56]	; 0x38
    303a:	b003      	add	sp, #12
    303c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3040:	00002f59 	.word	0x00002f59
    3044:	00004439 	.word	0x00004439
    3048:	0000445d 	.word	0x0000445d
    304c:	00004499 	.word	0x00004499
    3050:	000044b9 	.word	0x000044b9

00003054 <__sinit>:
    3054:	6b83      	ldr	r3, [r0, #56]	; 0x38
    3056:	b103      	cbz	r3, 305a <__sinit+0x6>
    3058:	4770      	bx	lr
    305a:	f7ff bf83 	b.w	2f64 <__sinit.part.1>
    305e:	bf00      	nop

00003060 <__sfp_lock_acquire>:
    3060:	4770      	bx	lr
    3062:	bf00      	nop

00003064 <__sfp_lock_release>:
    3064:	4770      	bx	lr
    3066:	bf00      	nop

00003068 <__libc_fini_array>:
    3068:	b538      	push	{r3, r4, r5, lr}
    306a:	4d07      	ldr	r5, [pc, #28]	; (3088 <__libc_fini_array+0x20>)
    306c:	4c07      	ldr	r4, [pc, #28]	; (308c <__libc_fini_array+0x24>)
    306e:	1b2c      	subs	r4, r5, r4
    3070:	10a4      	asrs	r4, r4, #2
    3072:	d005      	beq.n	3080 <__libc_fini_array+0x18>
    3074:	3c01      	subs	r4, #1
    3076:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    307a:	4798      	blx	r3
    307c:	2c00      	cmp	r4, #0
    307e:	d1f9      	bne.n	3074 <__libc_fini_array+0xc>
    3080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3084:	f001 bcae 	b.w	49e4 <_fini>
    3088:	000049f4 	.word	0x000049f4
    308c:	000049f0 	.word	0x000049f0

00003090 <__fputwc>:
    3090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3094:	b082      	sub	sp, #8
    3096:	4680      	mov	r8, r0
    3098:	4689      	mov	r9, r1
    309a:	4614      	mov	r4, r2
    309c:	f000 fb3c 	bl	3718 <__locale_mb_cur_max>
    30a0:	2801      	cmp	r0, #1
    30a2:	d033      	beq.n	310c <__fputwc+0x7c>
    30a4:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    30a8:	464a      	mov	r2, r9
    30aa:	a901      	add	r1, sp, #4
    30ac:	4640      	mov	r0, r8
    30ae:	f001 facb 	bl	4648 <_wcrtomb_r>
    30b2:	f1b0 3fff 	cmp.w	r0, #4294967295
    30b6:	4682      	mov	sl, r0
    30b8:	d021      	beq.n	30fe <__fputwc+0x6e>
    30ba:	b388      	cbz	r0, 3120 <__fputwc+0x90>
    30bc:	f89d 6004 	ldrb.w	r6, [sp, #4]
    30c0:	2500      	movs	r5, #0
    30c2:	e008      	b.n	30d6 <__fputwc+0x46>
    30c4:	6823      	ldr	r3, [r4, #0]
    30c6:	1c5a      	adds	r2, r3, #1
    30c8:	6022      	str	r2, [r4, #0]
    30ca:	701e      	strb	r6, [r3, #0]
    30cc:	3501      	adds	r5, #1
    30ce:	4555      	cmp	r5, sl
    30d0:	d226      	bcs.n	3120 <__fputwc+0x90>
    30d2:	ab01      	add	r3, sp, #4
    30d4:	5d5e      	ldrb	r6, [r3, r5]
    30d6:	68a3      	ldr	r3, [r4, #8]
    30d8:	3b01      	subs	r3, #1
    30da:	2b00      	cmp	r3, #0
    30dc:	60a3      	str	r3, [r4, #8]
    30de:	daf1      	bge.n	30c4 <__fputwc+0x34>
    30e0:	69a7      	ldr	r7, [r4, #24]
    30e2:	42bb      	cmp	r3, r7
    30e4:	4631      	mov	r1, r6
    30e6:	4622      	mov	r2, r4
    30e8:	4640      	mov	r0, r8
    30ea:	db01      	blt.n	30f0 <__fputwc+0x60>
    30ec:	2e0a      	cmp	r6, #10
    30ee:	d1e9      	bne.n	30c4 <__fputwc+0x34>
    30f0:	f001 fa54 	bl	459c <__swbuf_r>
    30f4:	1c43      	adds	r3, r0, #1
    30f6:	d1e9      	bne.n	30cc <__fputwc+0x3c>
    30f8:	b002      	add	sp, #8
    30fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    30fe:	89a3      	ldrh	r3, [r4, #12]
    3100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3104:	81a3      	strh	r3, [r4, #12]
    3106:	b002      	add	sp, #8
    3108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    310c:	f109 33ff 	add.w	r3, r9, #4294967295
    3110:	2bfe      	cmp	r3, #254	; 0xfe
    3112:	d8c7      	bhi.n	30a4 <__fputwc+0x14>
    3114:	fa5f f689 	uxtb.w	r6, r9
    3118:	4682      	mov	sl, r0
    311a:	f88d 6004 	strb.w	r6, [sp, #4]
    311e:	e7cf      	b.n	30c0 <__fputwc+0x30>
    3120:	4648      	mov	r0, r9
    3122:	b002      	add	sp, #8
    3124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00003128 <_fputwc_r>:
    3128:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    312c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    3130:	d10a      	bne.n	3148 <_fputwc_r+0x20>
    3132:	b410      	push	{r4}
    3134:	6e54      	ldr	r4, [r2, #100]	; 0x64
    3136:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    313a:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
    313e:	6654      	str	r4, [r2, #100]	; 0x64
    3140:	8193      	strh	r3, [r2, #12]
    3142:	bc10      	pop	{r4}
    3144:	f7ff bfa4 	b.w	3090 <__fputwc>
    3148:	f7ff bfa2 	b.w	3090 <__fputwc>

0000314c <_malloc_trim_r>:
    314c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    314e:	4f23      	ldr	r7, [pc, #140]	; (31dc <_malloc_trim_r+0x90>)
    3150:	460c      	mov	r4, r1
    3152:	4606      	mov	r6, r0
    3154:	f000 ff6a 	bl	402c <__malloc_lock>
    3158:	68bb      	ldr	r3, [r7, #8]
    315a:	685d      	ldr	r5, [r3, #4]
    315c:	f025 0503 	bic.w	r5, r5, #3
    3160:	1b29      	subs	r1, r5, r4
    3162:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    3166:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    316a:	f021 010f 	bic.w	r1, r1, #15
    316e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    3172:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    3176:	db07      	blt.n	3188 <_malloc_trim_r+0x3c>
    3178:	2100      	movs	r1, #0
    317a:	4630      	mov	r0, r6
    317c:	f001 f94a 	bl	4414 <_sbrk_r>
    3180:	68bb      	ldr	r3, [r7, #8]
    3182:	442b      	add	r3, r5
    3184:	4298      	cmp	r0, r3
    3186:	d004      	beq.n	3192 <_malloc_trim_r+0x46>
    3188:	4630      	mov	r0, r6
    318a:	f000 ff51 	bl	4030 <__malloc_unlock>
    318e:	2000      	movs	r0, #0
    3190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3192:	4261      	negs	r1, r4
    3194:	4630      	mov	r0, r6
    3196:	f001 f93d 	bl	4414 <_sbrk_r>
    319a:	3001      	adds	r0, #1
    319c:	d00d      	beq.n	31ba <_malloc_trim_r+0x6e>
    319e:	4b10      	ldr	r3, [pc, #64]	; (31e0 <_malloc_trim_r+0x94>)
    31a0:	68ba      	ldr	r2, [r7, #8]
    31a2:	6819      	ldr	r1, [r3, #0]
    31a4:	1b2d      	subs	r5, r5, r4
    31a6:	f045 0501 	orr.w	r5, r5, #1
    31aa:	4630      	mov	r0, r6
    31ac:	1b09      	subs	r1, r1, r4
    31ae:	6055      	str	r5, [r2, #4]
    31b0:	6019      	str	r1, [r3, #0]
    31b2:	f000 ff3d 	bl	4030 <__malloc_unlock>
    31b6:	2001      	movs	r0, #1
    31b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    31ba:	2100      	movs	r1, #0
    31bc:	4630      	mov	r0, r6
    31be:	f001 f929 	bl	4414 <_sbrk_r>
    31c2:	68ba      	ldr	r2, [r7, #8]
    31c4:	1a83      	subs	r3, r0, r2
    31c6:	2b0f      	cmp	r3, #15
    31c8:	ddde      	ble.n	3188 <_malloc_trim_r+0x3c>
    31ca:	4c06      	ldr	r4, [pc, #24]	; (31e4 <_malloc_trim_r+0x98>)
    31cc:	4904      	ldr	r1, [pc, #16]	; (31e0 <_malloc_trim_r+0x94>)
    31ce:	6824      	ldr	r4, [r4, #0]
    31d0:	f043 0301 	orr.w	r3, r3, #1
    31d4:	1b00      	subs	r0, r0, r4
    31d6:	6053      	str	r3, [r2, #4]
    31d8:	6008      	str	r0, [r1, #0]
    31da:	e7d5      	b.n	3188 <_malloc_trim_r+0x3c>
    31dc:	20000490 	.word	0x20000490
    31e0:	20000908 	.word	0x20000908
    31e4:	2000089c 	.word	0x2000089c

000031e8 <_free_r>:
    31e8:	2900      	cmp	r1, #0
    31ea:	d045      	beq.n	3278 <_free_r+0x90>
    31ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    31f0:	460d      	mov	r5, r1
    31f2:	4680      	mov	r8, r0
    31f4:	f000 ff1a 	bl	402c <__malloc_lock>
    31f8:	f855 7c04 	ldr.w	r7, [r5, #-4]
    31fc:	496a      	ldr	r1, [pc, #424]	; (33a8 <_free_r+0x1c0>)
    31fe:	f027 0301 	bic.w	r3, r7, #1
    3202:	f1a5 0408 	sub.w	r4, r5, #8
    3206:	18e2      	adds	r2, r4, r3
    3208:	688e      	ldr	r6, [r1, #8]
    320a:	6850      	ldr	r0, [r2, #4]
    320c:	42b2      	cmp	r2, r6
    320e:	f020 0003 	bic.w	r0, r0, #3
    3212:	d062      	beq.n	32da <_free_r+0xf2>
    3214:	07fe      	lsls	r6, r7, #31
    3216:	6050      	str	r0, [r2, #4]
    3218:	d40b      	bmi.n	3232 <_free_r+0x4a>
    321a:	f855 7c08 	ldr.w	r7, [r5, #-8]
    321e:	1be4      	subs	r4, r4, r7
    3220:	f101 0e08 	add.w	lr, r1, #8
    3224:	68a5      	ldr	r5, [r4, #8]
    3226:	4575      	cmp	r5, lr
    3228:	443b      	add	r3, r7
    322a:	d06f      	beq.n	330c <_free_r+0x124>
    322c:	68e7      	ldr	r7, [r4, #12]
    322e:	60ef      	str	r7, [r5, #12]
    3230:	60bd      	str	r5, [r7, #8]
    3232:	1815      	adds	r5, r2, r0
    3234:	686d      	ldr	r5, [r5, #4]
    3236:	07ed      	lsls	r5, r5, #31
    3238:	d542      	bpl.n	32c0 <_free_r+0xd8>
    323a:	f043 0201 	orr.w	r2, r3, #1
    323e:	6062      	str	r2, [r4, #4]
    3240:	50e3      	str	r3, [r4, r3]
    3242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3246:	d218      	bcs.n	327a <_free_r+0x92>
    3248:	08db      	lsrs	r3, r3, #3
    324a:	1c5a      	adds	r2, r3, #1
    324c:	684d      	ldr	r5, [r1, #4]
    324e:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    3252:	60a7      	str	r7, [r4, #8]
    3254:	2001      	movs	r0, #1
    3256:	109b      	asrs	r3, r3, #2
    3258:	fa00 f303 	lsl.w	r3, r0, r3
    325c:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    3260:	431d      	orrs	r5, r3
    3262:	3808      	subs	r0, #8
    3264:	60e0      	str	r0, [r4, #12]
    3266:	604d      	str	r5, [r1, #4]
    3268:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    326c:	60fc      	str	r4, [r7, #12]
    326e:	4640      	mov	r0, r8
    3270:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3274:	f000 bedc 	b.w	4030 <__malloc_unlock>
    3278:	4770      	bx	lr
    327a:	0a5a      	lsrs	r2, r3, #9
    327c:	2a04      	cmp	r2, #4
    327e:	d853      	bhi.n	3328 <_free_r+0x140>
    3280:	099a      	lsrs	r2, r3, #6
    3282:	f102 0739 	add.w	r7, r2, #57	; 0x39
    3286:	007f      	lsls	r7, r7, #1
    3288:	f102 0538 	add.w	r5, r2, #56	; 0x38
    328c:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    3290:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    3294:	4944      	ldr	r1, [pc, #272]	; (33a8 <_free_r+0x1c0>)
    3296:	3808      	subs	r0, #8
    3298:	4290      	cmp	r0, r2
    329a:	d04d      	beq.n	3338 <_free_r+0x150>
    329c:	6851      	ldr	r1, [r2, #4]
    329e:	f021 0103 	bic.w	r1, r1, #3
    32a2:	428b      	cmp	r3, r1
    32a4:	d202      	bcs.n	32ac <_free_r+0xc4>
    32a6:	6892      	ldr	r2, [r2, #8]
    32a8:	4290      	cmp	r0, r2
    32aa:	d1f7      	bne.n	329c <_free_r+0xb4>
    32ac:	68d0      	ldr	r0, [r2, #12]
    32ae:	60e0      	str	r0, [r4, #12]
    32b0:	60a2      	str	r2, [r4, #8]
    32b2:	6084      	str	r4, [r0, #8]
    32b4:	60d4      	str	r4, [r2, #12]
    32b6:	4640      	mov	r0, r8
    32b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    32bc:	f000 beb8 	b.w	4030 <__malloc_unlock>
    32c0:	6895      	ldr	r5, [r2, #8]
    32c2:	4f3a      	ldr	r7, [pc, #232]	; (33ac <_free_r+0x1c4>)
    32c4:	42bd      	cmp	r5, r7
    32c6:	4403      	add	r3, r0
    32c8:	d03f      	beq.n	334a <_free_r+0x162>
    32ca:	68d0      	ldr	r0, [r2, #12]
    32cc:	60e8      	str	r0, [r5, #12]
    32ce:	f043 0201 	orr.w	r2, r3, #1
    32d2:	6085      	str	r5, [r0, #8]
    32d4:	6062      	str	r2, [r4, #4]
    32d6:	50e3      	str	r3, [r4, r3]
    32d8:	e7b3      	b.n	3242 <_free_r+0x5a>
    32da:	07ff      	lsls	r7, r7, #31
    32dc:	4403      	add	r3, r0
    32de:	d407      	bmi.n	32f0 <_free_r+0x108>
    32e0:	f855 2c08 	ldr.w	r2, [r5, #-8]
    32e4:	1aa4      	subs	r4, r4, r2
    32e6:	4413      	add	r3, r2
    32e8:	68a0      	ldr	r0, [r4, #8]
    32ea:	68e2      	ldr	r2, [r4, #12]
    32ec:	60c2      	str	r2, [r0, #12]
    32ee:	6090      	str	r0, [r2, #8]
    32f0:	4a2f      	ldr	r2, [pc, #188]	; (33b0 <_free_r+0x1c8>)
    32f2:	6812      	ldr	r2, [r2, #0]
    32f4:	f043 0001 	orr.w	r0, r3, #1
    32f8:	4293      	cmp	r3, r2
    32fa:	6060      	str	r0, [r4, #4]
    32fc:	608c      	str	r4, [r1, #8]
    32fe:	d3b6      	bcc.n	326e <_free_r+0x86>
    3300:	4b2c      	ldr	r3, [pc, #176]	; (33b4 <_free_r+0x1cc>)
    3302:	4640      	mov	r0, r8
    3304:	6819      	ldr	r1, [r3, #0]
    3306:	f7ff ff21 	bl	314c <_malloc_trim_r>
    330a:	e7b0      	b.n	326e <_free_r+0x86>
    330c:	1811      	adds	r1, r2, r0
    330e:	6849      	ldr	r1, [r1, #4]
    3310:	07c9      	lsls	r1, r1, #31
    3312:	d444      	bmi.n	339e <_free_r+0x1b6>
    3314:	6891      	ldr	r1, [r2, #8]
    3316:	68d2      	ldr	r2, [r2, #12]
    3318:	60ca      	str	r2, [r1, #12]
    331a:	4403      	add	r3, r0
    331c:	f043 0001 	orr.w	r0, r3, #1
    3320:	6091      	str	r1, [r2, #8]
    3322:	6060      	str	r0, [r4, #4]
    3324:	50e3      	str	r3, [r4, r3]
    3326:	e7a2      	b.n	326e <_free_r+0x86>
    3328:	2a14      	cmp	r2, #20
    332a:	d817      	bhi.n	335c <_free_r+0x174>
    332c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    3330:	007f      	lsls	r7, r7, #1
    3332:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    3336:	e7a9      	b.n	328c <_free_r+0xa4>
    3338:	10aa      	asrs	r2, r5, #2
    333a:	684b      	ldr	r3, [r1, #4]
    333c:	2501      	movs	r5, #1
    333e:	fa05 f202 	lsl.w	r2, r5, r2
    3342:	4313      	orrs	r3, r2
    3344:	604b      	str	r3, [r1, #4]
    3346:	4602      	mov	r2, r0
    3348:	e7b1      	b.n	32ae <_free_r+0xc6>
    334a:	f043 0201 	orr.w	r2, r3, #1
    334e:	614c      	str	r4, [r1, #20]
    3350:	610c      	str	r4, [r1, #16]
    3352:	60e5      	str	r5, [r4, #12]
    3354:	60a5      	str	r5, [r4, #8]
    3356:	6062      	str	r2, [r4, #4]
    3358:	50e3      	str	r3, [r4, r3]
    335a:	e788      	b.n	326e <_free_r+0x86>
    335c:	2a54      	cmp	r2, #84	; 0x54
    335e:	d806      	bhi.n	336e <_free_r+0x186>
    3360:	0b1a      	lsrs	r2, r3, #12
    3362:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    3366:	007f      	lsls	r7, r7, #1
    3368:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    336c:	e78e      	b.n	328c <_free_r+0xa4>
    336e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    3372:	d806      	bhi.n	3382 <_free_r+0x19a>
    3374:	0bda      	lsrs	r2, r3, #15
    3376:	f102 0778 	add.w	r7, r2, #120	; 0x78
    337a:	007f      	lsls	r7, r7, #1
    337c:	f102 0577 	add.w	r5, r2, #119	; 0x77
    3380:	e784      	b.n	328c <_free_r+0xa4>
    3382:	f240 5054 	movw	r0, #1364	; 0x554
    3386:	4282      	cmp	r2, r0
    3388:	d806      	bhi.n	3398 <_free_r+0x1b0>
    338a:	0c9a      	lsrs	r2, r3, #18
    338c:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    3390:	007f      	lsls	r7, r7, #1
    3392:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    3396:	e779      	b.n	328c <_free_r+0xa4>
    3398:	27fe      	movs	r7, #254	; 0xfe
    339a:	257e      	movs	r5, #126	; 0x7e
    339c:	e776      	b.n	328c <_free_r+0xa4>
    339e:	f043 0201 	orr.w	r2, r3, #1
    33a2:	6062      	str	r2, [r4, #4]
    33a4:	50e3      	str	r3, [r4, r3]
    33a6:	e762      	b.n	326e <_free_r+0x86>
    33a8:	20000490 	.word	0x20000490
    33ac:	20000498 	.word	0x20000498
    33b0:	20000898 	.word	0x20000898
    33b4:	20000904 	.word	0x20000904

000033b8 <__sfvwrite_r>:
    33b8:	6893      	ldr	r3, [r2, #8]
    33ba:	2b00      	cmp	r3, #0
    33bc:	d076      	beq.n	34ac <__sfvwrite_r+0xf4>
    33be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    33c2:	898b      	ldrh	r3, [r1, #12]
    33c4:	b085      	sub	sp, #20
    33c6:	460c      	mov	r4, r1
    33c8:	0719      	lsls	r1, r3, #28
    33ca:	9001      	str	r0, [sp, #4]
    33cc:	4616      	mov	r6, r2
    33ce:	d529      	bpl.n	3424 <__sfvwrite_r+0x6c>
    33d0:	6922      	ldr	r2, [r4, #16]
    33d2:	b33a      	cbz	r2, 3424 <__sfvwrite_r+0x6c>
    33d4:	f003 0802 	and.w	r8, r3, #2
    33d8:	fa1f f088 	uxth.w	r0, r8
    33dc:	6835      	ldr	r5, [r6, #0]
    33de:	2800      	cmp	r0, #0
    33e0:	d02f      	beq.n	3442 <__sfvwrite_r+0x8a>
    33e2:	f04f 0900 	mov.w	r9, #0
    33e6:	4fb4      	ldr	r7, [pc, #720]	; (36b8 <__sfvwrite_r+0x300>)
    33e8:	46c8      	mov	r8, r9
    33ea:	46b2      	mov	sl, r6
    33ec:	45b8      	cmp	r8, r7
    33ee:	4643      	mov	r3, r8
    33f0:	464a      	mov	r2, r9
    33f2:	bf28      	it	cs
    33f4:	463b      	movcs	r3, r7
    33f6:	9801      	ldr	r0, [sp, #4]
    33f8:	f1b8 0f00 	cmp.w	r8, #0
    33fc:	d050      	beq.n	34a0 <__sfvwrite_r+0xe8>
    33fe:	69e1      	ldr	r1, [r4, #28]
    3400:	6a66      	ldr	r6, [r4, #36]	; 0x24
    3402:	47b0      	blx	r6
    3404:	2800      	cmp	r0, #0
    3406:	dd71      	ble.n	34ec <__sfvwrite_r+0x134>
    3408:	f8da 3008 	ldr.w	r3, [sl, #8]
    340c:	1a1b      	subs	r3, r3, r0
    340e:	4481      	add	r9, r0
    3410:	ebc0 0808 	rsb	r8, r0, r8
    3414:	f8ca 3008 	str.w	r3, [sl, #8]
    3418:	2b00      	cmp	r3, #0
    341a:	d1e7      	bne.n	33ec <__sfvwrite_r+0x34>
    341c:	2000      	movs	r0, #0
    341e:	b005      	add	sp, #20
    3420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3424:	4621      	mov	r1, r4
    3426:	9801      	ldr	r0, [sp, #4]
    3428:	f7ff fc68 	bl	2cfc <__swsetup_r>
    342c:	2800      	cmp	r0, #0
    342e:	f040 813a 	bne.w	36a6 <__sfvwrite_r+0x2ee>
    3432:	89a3      	ldrh	r3, [r4, #12]
    3434:	6835      	ldr	r5, [r6, #0]
    3436:	f003 0802 	and.w	r8, r3, #2
    343a:	fa1f f088 	uxth.w	r0, r8
    343e:	2800      	cmp	r0, #0
    3440:	d1cf      	bne.n	33e2 <__sfvwrite_r+0x2a>
    3442:	f013 0901 	ands.w	r9, r3, #1
    3446:	d15b      	bne.n	3500 <__sfvwrite_r+0x148>
    3448:	464f      	mov	r7, r9
    344a:	9602      	str	r6, [sp, #8]
    344c:	b31f      	cbz	r7, 3496 <__sfvwrite_r+0xde>
    344e:	059a      	lsls	r2, r3, #22
    3450:	f8d4 8008 	ldr.w	r8, [r4, #8]
    3454:	d52c      	bpl.n	34b0 <__sfvwrite_r+0xf8>
    3456:	4547      	cmp	r7, r8
    3458:	46c2      	mov	sl, r8
    345a:	f0c0 80a4 	bcc.w	35a6 <__sfvwrite_r+0x1ee>
    345e:	f413 6f90 	tst.w	r3, #1152	; 0x480
    3462:	f040 80b1 	bne.w	35c8 <__sfvwrite_r+0x210>
    3466:	6820      	ldr	r0, [r4, #0]
    3468:	4652      	mov	r2, sl
    346a:	4649      	mov	r1, r9
    346c:	f000 fd7a 	bl	3f64 <memmove>
    3470:	68a0      	ldr	r0, [r4, #8]
    3472:	6823      	ldr	r3, [r4, #0]
    3474:	ebc8 0000 	rsb	r0, r8, r0
    3478:	4453      	add	r3, sl
    347a:	60a0      	str	r0, [r4, #8]
    347c:	6023      	str	r3, [r4, #0]
    347e:	4638      	mov	r0, r7
    3480:	9a02      	ldr	r2, [sp, #8]
    3482:	6893      	ldr	r3, [r2, #8]
    3484:	1a1b      	subs	r3, r3, r0
    3486:	4481      	add	r9, r0
    3488:	1a3f      	subs	r7, r7, r0
    348a:	6093      	str	r3, [r2, #8]
    348c:	2b00      	cmp	r3, #0
    348e:	d0c5      	beq.n	341c <__sfvwrite_r+0x64>
    3490:	89a3      	ldrh	r3, [r4, #12]
    3492:	2f00      	cmp	r7, #0
    3494:	d1db      	bne.n	344e <__sfvwrite_r+0x96>
    3496:	f8d5 9000 	ldr.w	r9, [r5]
    349a:	686f      	ldr	r7, [r5, #4]
    349c:	3508      	adds	r5, #8
    349e:	e7d5      	b.n	344c <__sfvwrite_r+0x94>
    34a0:	f8d5 9000 	ldr.w	r9, [r5]
    34a4:	f8d5 8004 	ldr.w	r8, [r5, #4]
    34a8:	3508      	adds	r5, #8
    34aa:	e79f      	b.n	33ec <__sfvwrite_r+0x34>
    34ac:	2000      	movs	r0, #0
    34ae:	4770      	bx	lr
    34b0:	6820      	ldr	r0, [r4, #0]
    34b2:	6923      	ldr	r3, [r4, #16]
    34b4:	4298      	cmp	r0, r3
    34b6:	d803      	bhi.n	34c0 <__sfvwrite_r+0x108>
    34b8:	6961      	ldr	r1, [r4, #20]
    34ba:	428f      	cmp	r7, r1
    34bc:	f080 80b7 	bcs.w	362e <__sfvwrite_r+0x276>
    34c0:	45b8      	cmp	r8, r7
    34c2:	bf28      	it	cs
    34c4:	46b8      	movcs	r8, r7
    34c6:	4642      	mov	r2, r8
    34c8:	4649      	mov	r1, r9
    34ca:	f000 fd4b 	bl	3f64 <memmove>
    34ce:	68a3      	ldr	r3, [r4, #8]
    34d0:	6822      	ldr	r2, [r4, #0]
    34d2:	ebc8 0303 	rsb	r3, r8, r3
    34d6:	4442      	add	r2, r8
    34d8:	60a3      	str	r3, [r4, #8]
    34da:	6022      	str	r2, [r4, #0]
    34dc:	2b00      	cmp	r3, #0
    34de:	d149      	bne.n	3574 <__sfvwrite_r+0x1bc>
    34e0:	4621      	mov	r1, r4
    34e2:	9801      	ldr	r0, [sp, #4]
    34e4:	f7ff fd22 	bl	2f2c <_fflush_r>
    34e8:	2800      	cmp	r0, #0
    34ea:	d043      	beq.n	3574 <__sfvwrite_r+0x1bc>
    34ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    34f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    34f4:	f04f 30ff 	mov.w	r0, #4294967295
    34f8:	81a3      	strh	r3, [r4, #12]
    34fa:	b005      	add	sp, #20
    34fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3500:	4680      	mov	r8, r0
    3502:	9002      	str	r0, [sp, #8]
    3504:	4682      	mov	sl, r0
    3506:	4681      	mov	r9, r0
    3508:	f1b9 0f00 	cmp.w	r9, #0
    350c:	d02a      	beq.n	3564 <__sfvwrite_r+0x1ac>
    350e:	9b02      	ldr	r3, [sp, #8]
    3510:	2b00      	cmp	r3, #0
    3512:	d04c      	beq.n	35ae <__sfvwrite_r+0x1f6>
    3514:	6820      	ldr	r0, [r4, #0]
    3516:	6923      	ldr	r3, [r4, #16]
    3518:	6962      	ldr	r2, [r4, #20]
    351a:	45c8      	cmp	r8, r9
    351c:	46c3      	mov	fp, r8
    351e:	bf28      	it	cs
    3520:	46cb      	movcs	fp, r9
    3522:	4298      	cmp	r0, r3
    3524:	465f      	mov	r7, fp
    3526:	d904      	bls.n	3532 <__sfvwrite_r+0x17a>
    3528:	68a3      	ldr	r3, [r4, #8]
    352a:	4413      	add	r3, r2
    352c:	459b      	cmp	fp, r3
    352e:	f300 8090 	bgt.w	3652 <__sfvwrite_r+0x29a>
    3532:	4593      	cmp	fp, r2
    3534:	db20      	blt.n	3578 <__sfvwrite_r+0x1c0>
    3536:	4613      	mov	r3, r2
    3538:	6a67      	ldr	r7, [r4, #36]	; 0x24
    353a:	69e1      	ldr	r1, [r4, #28]
    353c:	9801      	ldr	r0, [sp, #4]
    353e:	4652      	mov	r2, sl
    3540:	47b8      	blx	r7
    3542:	1e07      	subs	r7, r0, #0
    3544:	ddd2      	ble.n	34ec <__sfvwrite_r+0x134>
    3546:	ebb8 0807 	subs.w	r8, r8, r7
    354a:	d023      	beq.n	3594 <__sfvwrite_r+0x1dc>
    354c:	68b3      	ldr	r3, [r6, #8]
    354e:	1bdb      	subs	r3, r3, r7
    3550:	44ba      	add	sl, r7
    3552:	ebc7 0909 	rsb	r9, r7, r9
    3556:	60b3      	str	r3, [r6, #8]
    3558:	2b00      	cmp	r3, #0
    355a:	f43f af5f 	beq.w	341c <__sfvwrite_r+0x64>
    355e:	f1b9 0f00 	cmp.w	r9, #0
    3562:	d1d4      	bne.n	350e <__sfvwrite_r+0x156>
    3564:	2300      	movs	r3, #0
    3566:	f8d5 a000 	ldr.w	sl, [r5]
    356a:	f8d5 9004 	ldr.w	r9, [r5, #4]
    356e:	9302      	str	r3, [sp, #8]
    3570:	3508      	adds	r5, #8
    3572:	e7c9      	b.n	3508 <__sfvwrite_r+0x150>
    3574:	4640      	mov	r0, r8
    3576:	e783      	b.n	3480 <__sfvwrite_r+0xc8>
    3578:	465a      	mov	r2, fp
    357a:	4651      	mov	r1, sl
    357c:	f000 fcf2 	bl	3f64 <memmove>
    3580:	68a2      	ldr	r2, [r4, #8]
    3582:	6823      	ldr	r3, [r4, #0]
    3584:	ebcb 0202 	rsb	r2, fp, r2
    3588:	445b      	add	r3, fp
    358a:	ebb8 0807 	subs.w	r8, r8, r7
    358e:	60a2      	str	r2, [r4, #8]
    3590:	6023      	str	r3, [r4, #0]
    3592:	d1db      	bne.n	354c <__sfvwrite_r+0x194>
    3594:	4621      	mov	r1, r4
    3596:	9801      	ldr	r0, [sp, #4]
    3598:	f7ff fcc8 	bl	2f2c <_fflush_r>
    359c:	2800      	cmp	r0, #0
    359e:	d1a5      	bne.n	34ec <__sfvwrite_r+0x134>
    35a0:	f8cd 8008 	str.w	r8, [sp, #8]
    35a4:	e7d2      	b.n	354c <__sfvwrite_r+0x194>
    35a6:	6820      	ldr	r0, [r4, #0]
    35a8:	46b8      	mov	r8, r7
    35aa:	46ba      	mov	sl, r7
    35ac:	e75c      	b.n	3468 <__sfvwrite_r+0xb0>
    35ae:	464a      	mov	r2, r9
    35b0:	210a      	movs	r1, #10
    35b2:	4650      	mov	r0, sl
    35b4:	f000 fbec 	bl	3d90 <memchr>
    35b8:	2800      	cmp	r0, #0
    35ba:	d06f      	beq.n	369c <__sfvwrite_r+0x2e4>
    35bc:	3001      	adds	r0, #1
    35be:	2301      	movs	r3, #1
    35c0:	ebca 0800 	rsb	r8, sl, r0
    35c4:	9302      	str	r3, [sp, #8]
    35c6:	e7a5      	b.n	3514 <__sfvwrite_r+0x15c>
    35c8:	6962      	ldr	r2, [r4, #20]
    35ca:	6820      	ldr	r0, [r4, #0]
    35cc:	6921      	ldr	r1, [r4, #16]
    35ce:	eb02 0842 	add.w	r8, r2, r2, lsl #1
    35d2:	ebc1 0a00 	rsb	sl, r1, r0
    35d6:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
    35da:	f10a 0001 	add.w	r0, sl, #1
    35de:	ea4f 0868 	mov.w	r8, r8, asr #1
    35e2:	4438      	add	r0, r7
    35e4:	4540      	cmp	r0, r8
    35e6:	4642      	mov	r2, r8
    35e8:	bf84      	itt	hi
    35ea:	4680      	movhi	r8, r0
    35ec:	4642      	movhi	r2, r8
    35ee:	055b      	lsls	r3, r3, #21
    35f0:	d542      	bpl.n	3678 <__sfvwrite_r+0x2c0>
    35f2:	4611      	mov	r1, r2
    35f4:	9801      	ldr	r0, [sp, #4]
    35f6:	f000 f911 	bl	381c <_malloc_r>
    35fa:	4683      	mov	fp, r0
    35fc:	2800      	cmp	r0, #0
    35fe:	d055      	beq.n	36ac <__sfvwrite_r+0x2f4>
    3600:	4652      	mov	r2, sl
    3602:	6921      	ldr	r1, [r4, #16]
    3604:	f000 fc14 	bl	3e30 <memcpy>
    3608:	89a3      	ldrh	r3, [r4, #12]
    360a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    360e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3612:	81a3      	strh	r3, [r4, #12]
    3614:	ebca 0308 	rsb	r3, sl, r8
    3618:	eb0b 000a 	add.w	r0, fp, sl
    361c:	f8c4 8014 	str.w	r8, [r4, #20]
    3620:	f8c4 b010 	str.w	fp, [r4, #16]
    3624:	6020      	str	r0, [r4, #0]
    3626:	60a3      	str	r3, [r4, #8]
    3628:	46b8      	mov	r8, r7
    362a:	46ba      	mov	sl, r7
    362c:	e71c      	b.n	3468 <__sfvwrite_r+0xb0>
    362e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    3632:	42bb      	cmp	r3, r7
    3634:	bf28      	it	cs
    3636:	463b      	movcs	r3, r7
    3638:	464a      	mov	r2, r9
    363a:	fb93 f3f1 	sdiv	r3, r3, r1
    363e:	9801      	ldr	r0, [sp, #4]
    3640:	6a66      	ldr	r6, [r4, #36]	; 0x24
    3642:	fb01 f303 	mul.w	r3, r1, r3
    3646:	69e1      	ldr	r1, [r4, #28]
    3648:	47b0      	blx	r6
    364a:	2800      	cmp	r0, #0
    364c:	f73f af18 	bgt.w	3480 <__sfvwrite_r+0xc8>
    3650:	e74c      	b.n	34ec <__sfvwrite_r+0x134>
    3652:	461a      	mov	r2, r3
    3654:	4651      	mov	r1, sl
    3656:	9303      	str	r3, [sp, #12]
    3658:	f000 fc84 	bl	3f64 <memmove>
    365c:	6822      	ldr	r2, [r4, #0]
    365e:	9b03      	ldr	r3, [sp, #12]
    3660:	9801      	ldr	r0, [sp, #4]
    3662:	441a      	add	r2, r3
    3664:	6022      	str	r2, [r4, #0]
    3666:	4621      	mov	r1, r4
    3668:	f7ff fc60 	bl	2f2c <_fflush_r>
    366c:	9b03      	ldr	r3, [sp, #12]
    366e:	2800      	cmp	r0, #0
    3670:	f47f af3c 	bne.w	34ec <__sfvwrite_r+0x134>
    3674:	461f      	mov	r7, r3
    3676:	e766      	b.n	3546 <__sfvwrite_r+0x18e>
    3678:	9801      	ldr	r0, [sp, #4]
    367a:	f000 fcdb 	bl	4034 <_realloc_r>
    367e:	4683      	mov	fp, r0
    3680:	2800      	cmp	r0, #0
    3682:	d1c7      	bne.n	3614 <__sfvwrite_r+0x25c>
    3684:	9d01      	ldr	r5, [sp, #4]
    3686:	6921      	ldr	r1, [r4, #16]
    3688:	4628      	mov	r0, r5
    368a:	f7ff fdad 	bl	31e8 <_free_r>
    368e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    3692:	220c      	movs	r2, #12
    3694:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3698:	602a      	str	r2, [r5, #0]
    369a:	e729      	b.n	34f0 <__sfvwrite_r+0x138>
    369c:	2301      	movs	r3, #1
    369e:	f109 0801 	add.w	r8, r9, #1
    36a2:	9302      	str	r3, [sp, #8]
    36a4:	e736      	b.n	3514 <__sfvwrite_r+0x15c>
    36a6:	f04f 30ff 	mov.w	r0, #4294967295
    36aa:	e6b8      	b.n	341e <__sfvwrite_r+0x66>
    36ac:	9a01      	ldr	r2, [sp, #4]
    36ae:	230c      	movs	r3, #12
    36b0:	6013      	str	r3, [r2, #0]
    36b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    36b6:	e71b      	b.n	34f0 <__sfvwrite_r+0x138>
    36b8:	7ffffc00 	.word	0x7ffffc00

000036bc <_fwalk_reent>:
    36bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    36c0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
    36c4:	d01f      	beq.n	3706 <_fwalk_reent+0x4a>
    36c6:	4688      	mov	r8, r1
    36c8:	4606      	mov	r6, r0
    36ca:	f04f 0900 	mov.w	r9, #0
    36ce:	687d      	ldr	r5, [r7, #4]
    36d0:	68bc      	ldr	r4, [r7, #8]
    36d2:	3d01      	subs	r5, #1
    36d4:	d411      	bmi.n	36fa <_fwalk_reent+0x3e>
    36d6:	89a3      	ldrh	r3, [r4, #12]
    36d8:	2b01      	cmp	r3, #1
    36da:	f105 35ff 	add.w	r5, r5, #4294967295
    36de:	d908      	bls.n	36f2 <_fwalk_reent+0x36>
    36e0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    36e4:	3301      	adds	r3, #1
    36e6:	4621      	mov	r1, r4
    36e8:	4630      	mov	r0, r6
    36ea:	d002      	beq.n	36f2 <_fwalk_reent+0x36>
    36ec:	47c0      	blx	r8
    36ee:	ea49 0900 	orr.w	r9, r9, r0
    36f2:	1c6b      	adds	r3, r5, #1
    36f4:	f104 0468 	add.w	r4, r4, #104	; 0x68
    36f8:	d1ed      	bne.n	36d6 <_fwalk_reent+0x1a>
    36fa:	683f      	ldr	r7, [r7, #0]
    36fc:	2f00      	cmp	r7, #0
    36fe:	d1e6      	bne.n	36ce <_fwalk_reent+0x12>
    3700:	4648      	mov	r0, r9
    3702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3706:	46b9      	mov	r9, r7
    3708:	4648      	mov	r0, r9
    370a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    370e:	bf00      	nop

00003710 <__locale_charset>:
    3710:	4800      	ldr	r0, [pc, #0]	; (3714 <__locale_charset+0x4>)
    3712:	4770      	bx	lr
    3714:	2000046c 	.word	0x2000046c

00003718 <__locale_mb_cur_max>:
    3718:	4b01      	ldr	r3, [pc, #4]	; (3720 <__locale_mb_cur_max+0x8>)
    371a:	6818      	ldr	r0, [r3, #0]
    371c:	4770      	bx	lr
    371e:	bf00      	nop
    3720:	2000048c 	.word	0x2000048c

00003724 <__swhatbuf_r>:
    3724:	b570      	push	{r4, r5, r6, lr}
    3726:	460d      	mov	r5, r1
    3728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    372c:	2900      	cmp	r1, #0
    372e:	b090      	sub	sp, #64	; 0x40
    3730:	4614      	mov	r4, r2
    3732:	461e      	mov	r6, r3
    3734:	db14      	blt.n	3760 <__swhatbuf_r+0x3c>
    3736:	aa01      	add	r2, sp, #4
    3738:	f001 f87a 	bl	4830 <_fstat_r>
    373c:	2800      	cmp	r0, #0
    373e:	db0f      	blt.n	3760 <__swhatbuf_r+0x3c>
    3740:	9a02      	ldr	r2, [sp, #8]
    3742:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    3746:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
    374a:	fab2 f282 	clz	r2, r2
    374e:	0952      	lsrs	r2, r2, #5
    3750:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3754:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3758:	6032      	str	r2, [r6, #0]
    375a:	6023      	str	r3, [r4, #0]
    375c:	b010      	add	sp, #64	; 0x40
    375e:	bd70      	pop	{r4, r5, r6, pc}
    3760:	89a8      	ldrh	r0, [r5, #12]
    3762:	f000 0080 	and.w	r0, r0, #128	; 0x80
    3766:	b282      	uxth	r2, r0
    3768:	2000      	movs	r0, #0
    376a:	6030      	str	r0, [r6, #0]
    376c:	b11a      	cbz	r2, 3776 <__swhatbuf_r+0x52>
    376e:	2340      	movs	r3, #64	; 0x40
    3770:	6023      	str	r3, [r4, #0]
    3772:	b010      	add	sp, #64	; 0x40
    3774:	bd70      	pop	{r4, r5, r6, pc}
    3776:	f44f 6380 	mov.w	r3, #1024	; 0x400
    377a:	4610      	mov	r0, r2
    377c:	6023      	str	r3, [r4, #0]
    377e:	b010      	add	sp, #64	; 0x40
    3780:	bd70      	pop	{r4, r5, r6, pc}
    3782:	bf00      	nop

00003784 <__smakebuf_r>:
    3784:	898a      	ldrh	r2, [r1, #12]
    3786:	0792      	lsls	r2, r2, #30
    3788:	460b      	mov	r3, r1
    378a:	d506      	bpl.n	379a <__smakebuf_r+0x16>
    378c:	f101 0243 	add.w	r2, r1, #67	; 0x43
    3790:	2101      	movs	r1, #1
    3792:	601a      	str	r2, [r3, #0]
    3794:	611a      	str	r2, [r3, #16]
    3796:	6159      	str	r1, [r3, #20]
    3798:	4770      	bx	lr
    379a:	b5f0      	push	{r4, r5, r6, r7, lr}
    379c:	b083      	sub	sp, #12
    379e:	ab01      	add	r3, sp, #4
    37a0:	466a      	mov	r2, sp
    37a2:	460c      	mov	r4, r1
    37a4:	4605      	mov	r5, r0
    37a6:	f7ff ffbd 	bl	3724 <__swhatbuf_r>
    37aa:	9900      	ldr	r1, [sp, #0]
    37ac:	4606      	mov	r6, r0
    37ae:	4628      	mov	r0, r5
    37b0:	f000 f834 	bl	381c <_malloc_r>
    37b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    37b8:	b1d0      	cbz	r0, 37f0 <__smakebuf_r+0x6c>
    37ba:	9a01      	ldr	r2, [sp, #4]
    37bc:	4f12      	ldr	r7, [pc, #72]	; (3808 <__smakebuf_r+0x84>)
    37be:	9900      	ldr	r1, [sp, #0]
    37c0:	63ef      	str	r7, [r5, #60]	; 0x3c
    37c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    37c6:	81a3      	strh	r3, [r4, #12]
    37c8:	6020      	str	r0, [r4, #0]
    37ca:	6120      	str	r0, [r4, #16]
    37cc:	6161      	str	r1, [r4, #20]
    37ce:	b91a      	cbnz	r2, 37d8 <__smakebuf_r+0x54>
    37d0:	4333      	orrs	r3, r6
    37d2:	81a3      	strh	r3, [r4, #12]
    37d4:	b003      	add	sp, #12
    37d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37d8:	4628      	mov	r0, r5
    37da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    37de:	f001 f83b 	bl	4858 <_isatty_r>
    37e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    37e6:	2800      	cmp	r0, #0
    37e8:	d0f2      	beq.n	37d0 <__smakebuf_r+0x4c>
    37ea:	f043 0301 	orr.w	r3, r3, #1
    37ee:	e7ef      	b.n	37d0 <__smakebuf_r+0x4c>
    37f0:	059a      	lsls	r2, r3, #22
    37f2:	d4ef      	bmi.n	37d4 <__smakebuf_r+0x50>
    37f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
    37f8:	f043 0302 	orr.w	r3, r3, #2
    37fc:	2101      	movs	r1, #1
    37fe:	81a3      	strh	r3, [r4, #12]
    3800:	6022      	str	r2, [r4, #0]
    3802:	6122      	str	r2, [r4, #16]
    3804:	6161      	str	r1, [r4, #20]
    3806:	e7e5      	b.n	37d4 <__smakebuf_r+0x50>
    3808:	00002f59 	.word	0x00002f59

0000380c <malloc>:
    380c:	4b02      	ldr	r3, [pc, #8]	; (3818 <malloc+0xc>)
    380e:	4601      	mov	r1, r0
    3810:	6818      	ldr	r0, [r3, #0]
    3812:	f000 b803 	b.w	381c <_malloc_r>
    3816:	bf00      	nop
    3818:	20000468 	.word	0x20000468

0000381c <_malloc_r>:
    381c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3820:	f101 050b 	add.w	r5, r1, #11
    3824:	2d16      	cmp	r5, #22
    3826:	b083      	sub	sp, #12
    3828:	4606      	mov	r6, r0
    382a:	f240 809f 	bls.w	396c <_malloc_r+0x150>
    382e:	f035 0507 	bics.w	r5, r5, #7
    3832:	f100 80bf 	bmi.w	39b4 <_malloc_r+0x198>
    3836:	42a9      	cmp	r1, r5
    3838:	f200 80bc 	bhi.w	39b4 <_malloc_r+0x198>
    383c:	f000 fbf6 	bl	402c <__malloc_lock>
    3840:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    3844:	f0c0 829c 	bcc.w	3d80 <_malloc_r+0x564>
    3848:	0a6b      	lsrs	r3, r5, #9
    384a:	f000 80ba 	beq.w	39c2 <_malloc_r+0x1a6>
    384e:	2b04      	cmp	r3, #4
    3850:	f200 8183 	bhi.w	3b5a <_malloc_r+0x33e>
    3854:	09a8      	lsrs	r0, r5, #6
    3856:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    385a:	ea4f 034e 	mov.w	r3, lr, lsl #1
    385e:	3038      	adds	r0, #56	; 0x38
    3860:	4fc4      	ldr	r7, [pc, #784]	; (3b74 <_malloc_r+0x358>)
    3862:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    3866:	f1a3 0108 	sub.w	r1, r3, #8
    386a:	685c      	ldr	r4, [r3, #4]
    386c:	42a1      	cmp	r1, r4
    386e:	d107      	bne.n	3880 <_malloc_r+0x64>
    3870:	e0ac      	b.n	39cc <_malloc_r+0x1b0>
    3872:	2a00      	cmp	r2, #0
    3874:	f280 80ac 	bge.w	39d0 <_malloc_r+0x1b4>
    3878:	68e4      	ldr	r4, [r4, #12]
    387a:	42a1      	cmp	r1, r4
    387c:	f000 80a6 	beq.w	39cc <_malloc_r+0x1b0>
    3880:	6863      	ldr	r3, [r4, #4]
    3882:	f023 0303 	bic.w	r3, r3, #3
    3886:	1b5a      	subs	r2, r3, r5
    3888:	2a0f      	cmp	r2, #15
    388a:	ddf2      	ble.n	3872 <_malloc_r+0x56>
    388c:	49b9      	ldr	r1, [pc, #740]	; (3b74 <_malloc_r+0x358>)
    388e:	693c      	ldr	r4, [r7, #16]
    3890:	f101 0e08 	add.w	lr, r1, #8
    3894:	4574      	cmp	r4, lr
    3896:	f000 81b3 	beq.w	3c00 <_malloc_r+0x3e4>
    389a:	6863      	ldr	r3, [r4, #4]
    389c:	f023 0303 	bic.w	r3, r3, #3
    38a0:	1b5a      	subs	r2, r3, r5
    38a2:	2a0f      	cmp	r2, #15
    38a4:	f300 8199 	bgt.w	3bda <_malloc_r+0x3be>
    38a8:	2a00      	cmp	r2, #0
    38aa:	f8c1 e014 	str.w	lr, [r1, #20]
    38ae:	f8c1 e010 	str.w	lr, [r1, #16]
    38b2:	f280 809e 	bge.w	39f2 <_malloc_r+0x1d6>
    38b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    38ba:	f080 8167 	bcs.w	3b8c <_malloc_r+0x370>
    38be:	08db      	lsrs	r3, r3, #3
    38c0:	f103 0c01 	add.w	ip, r3, #1
    38c4:	2201      	movs	r2, #1
    38c6:	109b      	asrs	r3, r3, #2
    38c8:	fa02 f303 	lsl.w	r3, r2, r3
    38cc:	684a      	ldr	r2, [r1, #4]
    38ce:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    38d2:	f8c4 8008 	str.w	r8, [r4, #8]
    38d6:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    38da:	431a      	orrs	r2, r3
    38dc:	f1a9 0308 	sub.w	r3, r9, #8
    38e0:	60e3      	str	r3, [r4, #12]
    38e2:	604a      	str	r2, [r1, #4]
    38e4:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    38e8:	f8c8 400c 	str.w	r4, [r8, #12]
    38ec:	1083      	asrs	r3, r0, #2
    38ee:	2401      	movs	r4, #1
    38f0:	409c      	lsls	r4, r3
    38f2:	4294      	cmp	r4, r2
    38f4:	f200 808a 	bhi.w	3a0c <_malloc_r+0x1f0>
    38f8:	4214      	tst	r4, r2
    38fa:	d106      	bne.n	390a <_malloc_r+0xee>
    38fc:	f020 0003 	bic.w	r0, r0, #3
    3900:	0064      	lsls	r4, r4, #1
    3902:	4214      	tst	r4, r2
    3904:	f100 0004 	add.w	r0, r0, #4
    3908:	d0fa      	beq.n	3900 <_malloc_r+0xe4>
    390a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    390e:	46cc      	mov	ip, r9
    3910:	4680      	mov	r8, r0
    3912:	f8dc 100c 	ldr.w	r1, [ip, #12]
    3916:	458c      	cmp	ip, r1
    3918:	d107      	bne.n	392a <_malloc_r+0x10e>
    391a:	e173      	b.n	3c04 <_malloc_r+0x3e8>
    391c:	2a00      	cmp	r2, #0
    391e:	f280 8181 	bge.w	3c24 <_malloc_r+0x408>
    3922:	68c9      	ldr	r1, [r1, #12]
    3924:	458c      	cmp	ip, r1
    3926:	f000 816d 	beq.w	3c04 <_malloc_r+0x3e8>
    392a:	684b      	ldr	r3, [r1, #4]
    392c:	f023 0303 	bic.w	r3, r3, #3
    3930:	1b5a      	subs	r2, r3, r5
    3932:	2a0f      	cmp	r2, #15
    3934:	ddf2      	ble.n	391c <_malloc_r+0x100>
    3936:	460c      	mov	r4, r1
    3938:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    393c:	f854 8f08 	ldr.w	r8, [r4, #8]!
    3940:	194b      	adds	r3, r1, r5
    3942:	f045 0501 	orr.w	r5, r5, #1
    3946:	604d      	str	r5, [r1, #4]
    3948:	f042 0101 	orr.w	r1, r2, #1
    394c:	f8c8 c00c 	str.w	ip, [r8, #12]
    3950:	4630      	mov	r0, r6
    3952:	f8cc 8008 	str.w	r8, [ip, #8]
    3956:	617b      	str	r3, [r7, #20]
    3958:	613b      	str	r3, [r7, #16]
    395a:	f8c3 e00c 	str.w	lr, [r3, #12]
    395e:	f8c3 e008 	str.w	lr, [r3, #8]
    3962:	6059      	str	r1, [r3, #4]
    3964:	509a      	str	r2, [r3, r2]
    3966:	f000 fb63 	bl	4030 <__malloc_unlock>
    396a:	e01f      	b.n	39ac <_malloc_r+0x190>
    396c:	2910      	cmp	r1, #16
    396e:	d821      	bhi.n	39b4 <_malloc_r+0x198>
    3970:	f000 fb5c 	bl	402c <__malloc_lock>
    3974:	2510      	movs	r5, #16
    3976:	2306      	movs	r3, #6
    3978:	2002      	movs	r0, #2
    397a:	4f7e      	ldr	r7, [pc, #504]	; (3b74 <_malloc_r+0x358>)
    397c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    3980:	f1a3 0208 	sub.w	r2, r3, #8
    3984:	685c      	ldr	r4, [r3, #4]
    3986:	4294      	cmp	r4, r2
    3988:	f000 8145 	beq.w	3c16 <_malloc_r+0x3fa>
    398c:	6863      	ldr	r3, [r4, #4]
    398e:	68e1      	ldr	r1, [r4, #12]
    3990:	68a5      	ldr	r5, [r4, #8]
    3992:	f023 0303 	bic.w	r3, r3, #3
    3996:	4423      	add	r3, r4
    3998:	4630      	mov	r0, r6
    399a:	685a      	ldr	r2, [r3, #4]
    399c:	60e9      	str	r1, [r5, #12]
    399e:	f042 0201 	orr.w	r2, r2, #1
    39a2:	608d      	str	r5, [r1, #8]
    39a4:	605a      	str	r2, [r3, #4]
    39a6:	f000 fb43 	bl	4030 <__malloc_unlock>
    39aa:	3408      	adds	r4, #8
    39ac:	4620      	mov	r0, r4
    39ae:	b003      	add	sp, #12
    39b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    39b4:	2400      	movs	r4, #0
    39b6:	230c      	movs	r3, #12
    39b8:	4620      	mov	r0, r4
    39ba:	6033      	str	r3, [r6, #0]
    39bc:	b003      	add	sp, #12
    39be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    39c2:	2380      	movs	r3, #128	; 0x80
    39c4:	f04f 0e40 	mov.w	lr, #64	; 0x40
    39c8:	203f      	movs	r0, #63	; 0x3f
    39ca:	e749      	b.n	3860 <_malloc_r+0x44>
    39cc:	4670      	mov	r0, lr
    39ce:	e75d      	b.n	388c <_malloc_r+0x70>
    39d0:	4423      	add	r3, r4
    39d2:	68e1      	ldr	r1, [r4, #12]
    39d4:	685a      	ldr	r2, [r3, #4]
    39d6:	68a5      	ldr	r5, [r4, #8]
    39d8:	f042 0201 	orr.w	r2, r2, #1
    39dc:	60e9      	str	r1, [r5, #12]
    39de:	4630      	mov	r0, r6
    39e0:	608d      	str	r5, [r1, #8]
    39e2:	605a      	str	r2, [r3, #4]
    39e4:	f000 fb24 	bl	4030 <__malloc_unlock>
    39e8:	3408      	adds	r4, #8
    39ea:	4620      	mov	r0, r4
    39ec:	b003      	add	sp, #12
    39ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    39f2:	4423      	add	r3, r4
    39f4:	4630      	mov	r0, r6
    39f6:	685a      	ldr	r2, [r3, #4]
    39f8:	f042 0201 	orr.w	r2, r2, #1
    39fc:	605a      	str	r2, [r3, #4]
    39fe:	f000 fb17 	bl	4030 <__malloc_unlock>
    3a02:	3408      	adds	r4, #8
    3a04:	4620      	mov	r0, r4
    3a06:	b003      	add	sp, #12
    3a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a0c:	68bc      	ldr	r4, [r7, #8]
    3a0e:	6863      	ldr	r3, [r4, #4]
    3a10:	f023 0803 	bic.w	r8, r3, #3
    3a14:	45a8      	cmp	r8, r5
    3a16:	d304      	bcc.n	3a22 <_malloc_r+0x206>
    3a18:	ebc5 0308 	rsb	r3, r5, r8
    3a1c:	2b0f      	cmp	r3, #15
    3a1e:	f300 808c 	bgt.w	3b3a <_malloc_r+0x31e>
    3a22:	4b55      	ldr	r3, [pc, #340]	; (3b78 <_malloc_r+0x35c>)
    3a24:	f8df 9160 	ldr.w	r9, [pc, #352]	; 3b88 <_malloc_r+0x36c>
    3a28:	681a      	ldr	r2, [r3, #0]
    3a2a:	f8d9 3000 	ldr.w	r3, [r9]
    3a2e:	3301      	adds	r3, #1
    3a30:	442a      	add	r2, r5
    3a32:	eb04 0a08 	add.w	sl, r4, r8
    3a36:	f000 8160 	beq.w	3cfa <_malloc_r+0x4de>
    3a3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    3a3e:	320f      	adds	r2, #15
    3a40:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    3a44:	f022 020f 	bic.w	r2, r2, #15
    3a48:	4611      	mov	r1, r2
    3a4a:	4630      	mov	r0, r6
    3a4c:	9201      	str	r2, [sp, #4]
    3a4e:	f000 fce1 	bl	4414 <_sbrk_r>
    3a52:	f1b0 3fff 	cmp.w	r0, #4294967295
    3a56:	4683      	mov	fp, r0
    3a58:	9a01      	ldr	r2, [sp, #4]
    3a5a:	f000 8158 	beq.w	3d0e <_malloc_r+0x4f2>
    3a5e:	4582      	cmp	sl, r0
    3a60:	f200 80fc 	bhi.w	3c5c <_malloc_r+0x440>
    3a64:	4b45      	ldr	r3, [pc, #276]	; (3b7c <_malloc_r+0x360>)
    3a66:	6819      	ldr	r1, [r3, #0]
    3a68:	45da      	cmp	sl, fp
    3a6a:	4411      	add	r1, r2
    3a6c:	6019      	str	r1, [r3, #0]
    3a6e:	f000 8153 	beq.w	3d18 <_malloc_r+0x4fc>
    3a72:	f8d9 0000 	ldr.w	r0, [r9]
    3a76:	f8df e110 	ldr.w	lr, [pc, #272]	; 3b88 <_malloc_r+0x36c>
    3a7a:	3001      	adds	r0, #1
    3a7c:	bf1b      	ittet	ne
    3a7e:	ebca 0a0b 	rsbne	sl, sl, fp
    3a82:	4451      	addne	r1, sl
    3a84:	f8ce b000 	streq.w	fp, [lr]
    3a88:	6019      	strne	r1, [r3, #0]
    3a8a:	f01b 0107 	ands.w	r1, fp, #7
    3a8e:	f000 8117 	beq.w	3cc0 <_malloc_r+0x4a4>
    3a92:	f1c1 0008 	rsb	r0, r1, #8
    3a96:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    3a9a:	4483      	add	fp, r0
    3a9c:	3108      	adds	r1, #8
    3a9e:	445a      	add	r2, fp
    3aa0:	f3c2 020b 	ubfx	r2, r2, #0, #12
    3aa4:	ebc2 0901 	rsb	r9, r2, r1
    3aa8:	4649      	mov	r1, r9
    3aaa:	4630      	mov	r0, r6
    3aac:	9301      	str	r3, [sp, #4]
    3aae:	f000 fcb1 	bl	4414 <_sbrk_r>
    3ab2:	1c43      	adds	r3, r0, #1
    3ab4:	9b01      	ldr	r3, [sp, #4]
    3ab6:	f000 813f 	beq.w	3d38 <_malloc_r+0x51c>
    3aba:	ebcb 0200 	rsb	r2, fp, r0
    3abe:	444a      	add	r2, r9
    3ac0:	f042 0201 	orr.w	r2, r2, #1
    3ac4:	6819      	ldr	r1, [r3, #0]
    3ac6:	f8c7 b008 	str.w	fp, [r7, #8]
    3aca:	4449      	add	r1, r9
    3acc:	42bc      	cmp	r4, r7
    3ace:	f8cb 2004 	str.w	r2, [fp, #4]
    3ad2:	6019      	str	r1, [r3, #0]
    3ad4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 3b7c <_malloc_r+0x360>
    3ad8:	d016      	beq.n	3b08 <_malloc_r+0x2ec>
    3ada:	f1b8 0f0f 	cmp.w	r8, #15
    3ade:	f240 80fd 	bls.w	3cdc <_malloc_r+0x4c0>
    3ae2:	6862      	ldr	r2, [r4, #4]
    3ae4:	f1a8 030c 	sub.w	r3, r8, #12
    3ae8:	f023 0307 	bic.w	r3, r3, #7
    3aec:	18e0      	adds	r0, r4, r3
    3aee:	f002 0201 	and.w	r2, r2, #1
    3af2:	f04f 0e05 	mov.w	lr, #5
    3af6:	431a      	orrs	r2, r3
    3af8:	2b0f      	cmp	r3, #15
    3afa:	6062      	str	r2, [r4, #4]
    3afc:	f8c0 e004 	str.w	lr, [r0, #4]
    3b00:	f8c0 e008 	str.w	lr, [r0, #8]
    3b04:	f200 811c 	bhi.w	3d40 <_malloc_r+0x524>
    3b08:	4b1d      	ldr	r3, [pc, #116]	; (3b80 <_malloc_r+0x364>)
    3b0a:	68bc      	ldr	r4, [r7, #8]
    3b0c:	681a      	ldr	r2, [r3, #0]
    3b0e:	4291      	cmp	r1, r2
    3b10:	bf88      	it	hi
    3b12:	6019      	strhi	r1, [r3, #0]
    3b14:	4b1b      	ldr	r3, [pc, #108]	; (3b84 <_malloc_r+0x368>)
    3b16:	681a      	ldr	r2, [r3, #0]
    3b18:	4291      	cmp	r1, r2
    3b1a:	6862      	ldr	r2, [r4, #4]
    3b1c:	bf88      	it	hi
    3b1e:	6019      	strhi	r1, [r3, #0]
    3b20:	f022 0203 	bic.w	r2, r2, #3
    3b24:	4295      	cmp	r5, r2
    3b26:	eba2 0305 	sub.w	r3, r2, r5
    3b2a:	d801      	bhi.n	3b30 <_malloc_r+0x314>
    3b2c:	2b0f      	cmp	r3, #15
    3b2e:	dc04      	bgt.n	3b3a <_malloc_r+0x31e>
    3b30:	4630      	mov	r0, r6
    3b32:	f000 fa7d 	bl	4030 <__malloc_unlock>
    3b36:	2400      	movs	r4, #0
    3b38:	e738      	b.n	39ac <_malloc_r+0x190>
    3b3a:	1962      	adds	r2, r4, r5
    3b3c:	f043 0301 	orr.w	r3, r3, #1
    3b40:	f045 0501 	orr.w	r5, r5, #1
    3b44:	6065      	str	r5, [r4, #4]
    3b46:	4630      	mov	r0, r6
    3b48:	60ba      	str	r2, [r7, #8]
    3b4a:	6053      	str	r3, [r2, #4]
    3b4c:	f000 fa70 	bl	4030 <__malloc_unlock>
    3b50:	3408      	adds	r4, #8
    3b52:	4620      	mov	r0, r4
    3b54:	b003      	add	sp, #12
    3b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b5a:	2b14      	cmp	r3, #20
    3b5c:	d971      	bls.n	3c42 <_malloc_r+0x426>
    3b5e:	2b54      	cmp	r3, #84	; 0x54
    3b60:	f200 80a4 	bhi.w	3cac <_malloc_r+0x490>
    3b64:	0b28      	lsrs	r0, r5, #12
    3b66:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    3b6a:	ea4f 034e 	mov.w	r3, lr, lsl #1
    3b6e:	306e      	adds	r0, #110	; 0x6e
    3b70:	e676      	b.n	3860 <_malloc_r+0x44>
    3b72:	bf00      	nop
    3b74:	20000490 	.word	0x20000490
    3b78:	20000904 	.word	0x20000904
    3b7c:	20000908 	.word	0x20000908
    3b80:	20000900 	.word	0x20000900
    3b84:	200008fc 	.word	0x200008fc
    3b88:	2000089c 	.word	0x2000089c
    3b8c:	0a5a      	lsrs	r2, r3, #9
    3b8e:	2a04      	cmp	r2, #4
    3b90:	d95e      	bls.n	3c50 <_malloc_r+0x434>
    3b92:	2a14      	cmp	r2, #20
    3b94:	f200 80b3 	bhi.w	3cfe <_malloc_r+0x4e2>
    3b98:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    3b9c:	0049      	lsls	r1, r1, #1
    3b9e:	325b      	adds	r2, #91	; 0x5b
    3ba0:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    3ba4:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    3ba8:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 3d88 <_malloc_r+0x56c>
    3bac:	f1ac 0c08 	sub.w	ip, ip, #8
    3bb0:	458c      	cmp	ip, r1
    3bb2:	f000 8088 	beq.w	3cc6 <_malloc_r+0x4aa>
    3bb6:	684a      	ldr	r2, [r1, #4]
    3bb8:	f022 0203 	bic.w	r2, r2, #3
    3bbc:	4293      	cmp	r3, r2
    3bbe:	d202      	bcs.n	3bc6 <_malloc_r+0x3aa>
    3bc0:	6889      	ldr	r1, [r1, #8]
    3bc2:	458c      	cmp	ip, r1
    3bc4:	d1f7      	bne.n	3bb6 <_malloc_r+0x39a>
    3bc6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    3bca:	687a      	ldr	r2, [r7, #4]
    3bcc:	f8c4 c00c 	str.w	ip, [r4, #12]
    3bd0:	60a1      	str	r1, [r4, #8]
    3bd2:	f8cc 4008 	str.w	r4, [ip, #8]
    3bd6:	60cc      	str	r4, [r1, #12]
    3bd8:	e688      	b.n	38ec <_malloc_r+0xd0>
    3bda:	1963      	adds	r3, r4, r5
    3bdc:	f042 0701 	orr.w	r7, r2, #1
    3be0:	f045 0501 	orr.w	r5, r5, #1
    3be4:	6065      	str	r5, [r4, #4]
    3be6:	4630      	mov	r0, r6
    3be8:	614b      	str	r3, [r1, #20]
    3bea:	610b      	str	r3, [r1, #16]
    3bec:	f8c3 e00c 	str.w	lr, [r3, #12]
    3bf0:	f8c3 e008 	str.w	lr, [r3, #8]
    3bf4:	605f      	str	r7, [r3, #4]
    3bf6:	509a      	str	r2, [r3, r2]
    3bf8:	3408      	adds	r4, #8
    3bfa:	f000 fa19 	bl	4030 <__malloc_unlock>
    3bfe:	e6d5      	b.n	39ac <_malloc_r+0x190>
    3c00:	684a      	ldr	r2, [r1, #4]
    3c02:	e673      	b.n	38ec <_malloc_r+0xd0>
    3c04:	f108 0801 	add.w	r8, r8, #1
    3c08:	f018 0f03 	tst.w	r8, #3
    3c0c:	f10c 0c08 	add.w	ip, ip, #8
    3c10:	f47f ae7f 	bne.w	3912 <_malloc_r+0xf6>
    3c14:	e030      	b.n	3c78 <_malloc_r+0x45c>
    3c16:	68dc      	ldr	r4, [r3, #12]
    3c18:	42a3      	cmp	r3, r4
    3c1a:	bf08      	it	eq
    3c1c:	3002      	addeq	r0, #2
    3c1e:	f43f ae35 	beq.w	388c <_malloc_r+0x70>
    3c22:	e6b3      	b.n	398c <_malloc_r+0x170>
    3c24:	440b      	add	r3, r1
    3c26:	460c      	mov	r4, r1
    3c28:	685a      	ldr	r2, [r3, #4]
    3c2a:	68c9      	ldr	r1, [r1, #12]
    3c2c:	f854 5f08 	ldr.w	r5, [r4, #8]!
    3c30:	f042 0201 	orr.w	r2, r2, #1
    3c34:	605a      	str	r2, [r3, #4]
    3c36:	4630      	mov	r0, r6
    3c38:	60e9      	str	r1, [r5, #12]
    3c3a:	608d      	str	r5, [r1, #8]
    3c3c:	f000 f9f8 	bl	4030 <__malloc_unlock>
    3c40:	e6b4      	b.n	39ac <_malloc_r+0x190>
    3c42:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    3c46:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    3c4a:	ea4f 034e 	mov.w	r3, lr, lsl #1
    3c4e:	e607      	b.n	3860 <_malloc_r+0x44>
    3c50:	099a      	lsrs	r2, r3, #6
    3c52:	f102 0139 	add.w	r1, r2, #57	; 0x39
    3c56:	0049      	lsls	r1, r1, #1
    3c58:	3238      	adds	r2, #56	; 0x38
    3c5a:	e7a1      	b.n	3ba0 <_malloc_r+0x384>
    3c5c:	42bc      	cmp	r4, r7
    3c5e:	4b4a      	ldr	r3, [pc, #296]	; (3d88 <_malloc_r+0x56c>)
    3c60:	f43f af00 	beq.w	3a64 <_malloc_r+0x248>
    3c64:	689c      	ldr	r4, [r3, #8]
    3c66:	6862      	ldr	r2, [r4, #4]
    3c68:	f022 0203 	bic.w	r2, r2, #3
    3c6c:	e75a      	b.n	3b24 <_malloc_r+0x308>
    3c6e:	f859 3908 	ldr.w	r3, [r9], #-8
    3c72:	4599      	cmp	r9, r3
    3c74:	f040 8082 	bne.w	3d7c <_malloc_r+0x560>
    3c78:	f010 0f03 	tst.w	r0, #3
    3c7c:	f100 30ff 	add.w	r0, r0, #4294967295
    3c80:	d1f5      	bne.n	3c6e <_malloc_r+0x452>
    3c82:	687b      	ldr	r3, [r7, #4]
    3c84:	ea23 0304 	bic.w	r3, r3, r4
    3c88:	607b      	str	r3, [r7, #4]
    3c8a:	0064      	lsls	r4, r4, #1
    3c8c:	429c      	cmp	r4, r3
    3c8e:	f63f aebd 	bhi.w	3a0c <_malloc_r+0x1f0>
    3c92:	2c00      	cmp	r4, #0
    3c94:	f43f aeba 	beq.w	3a0c <_malloc_r+0x1f0>
    3c98:	421c      	tst	r4, r3
    3c9a:	4640      	mov	r0, r8
    3c9c:	f47f ae35 	bne.w	390a <_malloc_r+0xee>
    3ca0:	0064      	lsls	r4, r4, #1
    3ca2:	421c      	tst	r4, r3
    3ca4:	f100 0004 	add.w	r0, r0, #4
    3ca8:	d0fa      	beq.n	3ca0 <_malloc_r+0x484>
    3caa:	e62e      	b.n	390a <_malloc_r+0xee>
    3cac:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    3cb0:	d818      	bhi.n	3ce4 <_malloc_r+0x4c8>
    3cb2:	0be8      	lsrs	r0, r5, #15
    3cb4:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    3cb8:	ea4f 034e 	mov.w	r3, lr, lsl #1
    3cbc:	3077      	adds	r0, #119	; 0x77
    3cbe:	e5cf      	b.n	3860 <_malloc_r+0x44>
    3cc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    3cc4:	e6eb      	b.n	3a9e <_malloc_r+0x282>
    3cc6:	2101      	movs	r1, #1
    3cc8:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3ccc:	1092      	asrs	r2, r2, #2
    3cce:	fa01 f202 	lsl.w	r2, r1, r2
    3cd2:	431a      	orrs	r2, r3
    3cd4:	f8c8 2004 	str.w	r2, [r8, #4]
    3cd8:	4661      	mov	r1, ip
    3cda:	e777      	b.n	3bcc <_malloc_r+0x3b0>
    3cdc:	2301      	movs	r3, #1
    3cde:	f8cb 3004 	str.w	r3, [fp, #4]
    3ce2:	e725      	b.n	3b30 <_malloc_r+0x314>
    3ce4:	f240 5254 	movw	r2, #1364	; 0x554
    3ce8:	4293      	cmp	r3, r2
    3cea:	d820      	bhi.n	3d2e <_malloc_r+0x512>
    3cec:	0ca8      	lsrs	r0, r5, #18
    3cee:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    3cf2:	ea4f 034e 	mov.w	r3, lr, lsl #1
    3cf6:	307c      	adds	r0, #124	; 0x7c
    3cf8:	e5b2      	b.n	3860 <_malloc_r+0x44>
    3cfa:	3210      	adds	r2, #16
    3cfc:	e6a4      	b.n	3a48 <_malloc_r+0x22c>
    3cfe:	2a54      	cmp	r2, #84	; 0x54
    3d00:	d826      	bhi.n	3d50 <_malloc_r+0x534>
    3d02:	0b1a      	lsrs	r2, r3, #12
    3d04:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    3d08:	0049      	lsls	r1, r1, #1
    3d0a:	326e      	adds	r2, #110	; 0x6e
    3d0c:	e748      	b.n	3ba0 <_malloc_r+0x384>
    3d0e:	68bc      	ldr	r4, [r7, #8]
    3d10:	6862      	ldr	r2, [r4, #4]
    3d12:	f022 0203 	bic.w	r2, r2, #3
    3d16:	e705      	b.n	3b24 <_malloc_r+0x308>
    3d18:	f3ca 000b 	ubfx	r0, sl, #0, #12
    3d1c:	2800      	cmp	r0, #0
    3d1e:	f47f aea8 	bne.w	3a72 <_malloc_r+0x256>
    3d22:	4442      	add	r2, r8
    3d24:	68bb      	ldr	r3, [r7, #8]
    3d26:	f042 0201 	orr.w	r2, r2, #1
    3d2a:	605a      	str	r2, [r3, #4]
    3d2c:	e6ec      	b.n	3b08 <_malloc_r+0x2ec>
    3d2e:	23fe      	movs	r3, #254	; 0xfe
    3d30:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    3d34:	207e      	movs	r0, #126	; 0x7e
    3d36:	e593      	b.n	3860 <_malloc_r+0x44>
    3d38:	2201      	movs	r2, #1
    3d3a:	f04f 0900 	mov.w	r9, #0
    3d3e:	e6c1      	b.n	3ac4 <_malloc_r+0x2a8>
    3d40:	f104 0108 	add.w	r1, r4, #8
    3d44:	4630      	mov	r0, r6
    3d46:	f7ff fa4f 	bl	31e8 <_free_r>
    3d4a:	f8d9 1000 	ldr.w	r1, [r9]
    3d4e:	e6db      	b.n	3b08 <_malloc_r+0x2ec>
    3d50:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    3d54:	d805      	bhi.n	3d62 <_malloc_r+0x546>
    3d56:	0bda      	lsrs	r2, r3, #15
    3d58:	f102 0178 	add.w	r1, r2, #120	; 0x78
    3d5c:	0049      	lsls	r1, r1, #1
    3d5e:	3277      	adds	r2, #119	; 0x77
    3d60:	e71e      	b.n	3ba0 <_malloc_r+0x384>
    3d62:	f240 5154 	movw	r1, #1364	; 0x554
    3d66:	428a      	cmp	r2, r1
    3d68:	d805      	bhi.n	3d76 <_malloc_r+0x55a>
    3d6a:	0c9a      	lsrs	r2, r3, #18
    3d6c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    3d70:	0049      	lsls	r1, r1, #1
    3d72:	327c      	adds	r2, #124	; 0x7c
    3d74:	e714      	b.n	3ba0 <_malloc_r+0x384>
    3d76:	21fe      	movs	r1, #254	; 0xfe
    3d78:	227e      	movs	r2, #126	; 0x7e
    3d7a:	e711      	b.n	3ba0 <_malloc_r+0x384>
    3d7c:	687b      	ldr	r3, [r7, #4]
    3d7e:	e784      	b.n	3c8a <_malloc_r+0x46e>
    3d80:	08e8      	lsrs	r0, r5, #3
    3d82:	1c43      	adds	r3, r0, #1
    3d84:	005b      	lsls	r3, r3, #1
    3d86:	e5f8      	b.n	397a <_malloc_r+0x15e>
    3d88:	20000490 	.word	0x20000490
    3d8c:	00000000 	.word	0x00000000

00003d90 <memchr>:
    3d90:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    3d94:	2a10      	cmp	r2, #16
    3d96:	db2b      	blt.n	3df0 <memchr+0x60>
    3d98:	f010 0f07 	tst.w	r0, #7
    3d9c:	d008      	beq.n	3db0 <memchr+0x20>
    3d9e:	f810 3b01 	ldrb.w	r3, [r0], #1
    3da2:	3a01      	subs	r2, #1
    3da4:	428b      	cmp	r3, r1
    3da6:	d02d      	beq.n	3e04 <memchr+0x74>
    3da8:	f010 0f07 	tst.w	r0, #7
    3dac:	b342      	cbz	r2, 3e00 <memchr+0x70>
    3dae:	d1f6      	bne.n	3d9e <memchr+0xe>
    3db0:	b4f0      	push	{r4, r5, r6, r7}
    3db2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    3db6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    3dba:	f022 0407 	bic.w	r4, r2, #7
    3dbe:	f07f 0700 	mvns.w	r7, #0
    3dc2:	2300      	movs	r3, #0
    3dc4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    3dc8:	3c08      	subs	r4, #8
    3dca:	ea85 0501 	eor.w	r5, r5, r1
    3dce:	ea86 0601 	eor.w	r6, r6, r1
    3dd2:	fa85 f547 	uadd8	r5, r5, r7
    3dd6:	faa3 f587 	sel	r5, r3, r7
    3dda:	fa86 f647 	uadd8	r6, r6, r7
    3dde:	faa5 f687 	sel	r6, r5, r7
    3de2:	b98e      	cbnz	r6, 3e08 <memchr+0x78>
    3de4:	d1ee      	bne.n	3dc4 <memchr+0x34>
    3de6:	bcf0      	pop	{r4, r5, r6, r7}
    3de8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    3dec:	f002 0207 	and.w	r2, r2, #7
    3df0:	b132      	cbz	r2, 3e00 <memchr+0x70>
    3df2:	f810 3b01 	ldrb.w	r3, [r0], #1
    3df6:	3a01      	subs	r2, #1
    3df8:	ea83 0301 	eor.w	r3, r3, r1
    3dfc:	b113      	cbz	r3, 3e04 <memchr+0x74>
    3dfe:	d1f8      	bne.n	3df2 <memchr+0x62>
    3e00:	2000      	movs	r0, #0
    3e02:	4770      	bx	lr
    3e04:	3801      	subs	r0, #1
    3e06:	4770      	bx	lr
    3e08:	2d00      	cmp	r5, #0
    3e0a:	bf06      	itte	eq
    3e0c:	4635      	moveq	r5, r6
    3e0e:	3803      	subeq	r0, #3
    3e10:	3807      	subne	r0, #7
    3e12:	f015 0f01 	tst.w	r5, #1
    3e16:	d107      	bne.n	3e28 <memchr+0x98>
    3e18:	3001      	adds	r0, #1
    3e1a:	f415 7f80 	tst.w	r5, #256	; 0x100
    3e1e:	bf02      	ittt	eq
    3e20:	3001      	addeq	r0, #1
    3e22:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    3e26:	3001      	addeq	r0, #1
    3e28:	bcf0      	pop	{r4, r5, r6, r7}
    3e2a:	3801      	subs	r0, #1
    3e2c:	4770      	bx	lr
    3e2e:	bf00      	nop

00003e30 <memcpy>:
    3e30:	4684      	mov	ip, r0
    3e32:	ea41 0300 	orr.w	r3, r1, r0
    3e36:	f013 0303 	ands.w	r3, r3, #3
    3e3a:	d16d      	bne.n	3f18 <memcpy+0xe8>
    3e3c:	3a40      	subs	r2, #64	; 0x40
    3e3e:	d341      	bcc.n	3ec4 <memcpy+0x94>
    3e40:	f851 3b04 	ldr.w	r3, [r1], #4
    3e44:	f840 3b04 	str.w	r3, [r0], #4
    3e48:	f851 3b04 	ldr.w	r3, [r1], #4
    3e4c:	f840 3b04 	str.w	r3, [r0], #4
    3e50:	f851 3b04 	ldr.w	r3, [r1], #4
    3e54:	f840 3b04 	str.w	r3, [r0], #4
    3e58:	f851 3b04 	ldr.w	r3, [r1], #4
    3e5c:	f840 3b04 	str.w	r3, [r0], #4
    3e60:	f851 3b04 	ldr.w	r3, [r1], #4
    3e64:	f840 3b04 	str.w	r3, [r0], #4
    3e68:	f851 3b04 	ldr.w	r3, [r1], #4
    3e6c:	f840 3b04 	str.w	r3, [r0], #4
    3e70:	f851 3b04 	ldr.w	r3, [r1], #4
    3e74:	f840 3b04 	str.w	r3, [r0], #4
    3e78:	f851 3b04 	ldr.w	r3, [r1], #4
    3e7c:	f840 3b04 	str.w	r3, [r0], #4
    3e80:	f851 3b04 	ldr.w	r3, [r1], #4
    3e84:	f840 3b04 	str.w	r3, [r0], #4
    3e88:	f851 3b04 	ldr.w	r3, [r1], #4
    3e8c:	f840 3b04 	str.w	r3, [r0], #4
    3e90:	f851 3b04 	ldr.w	r3, [r1], #4
    3e94:	f840 3b04 	str.w	r3, [r0], #4
    3e98:	f851 3b04 	ldr.w	r3, [r1], #4
    3e9c:	f840 3b04 	str.w	r3, [r0], #4
    3ea0:	f851 3b04 	ldr.w	r3, [r1], #4
    3ea4:	f840 3b04 	str.w	r3, [r0], #4
    3ea8:	f851 3b04 	ldr.w	r3, [r1], #4
    3eac:	f840 3b04 	str.w	r3, [r0], #4
    3eb0:	f851 3b04 	ldr.w	r3, [r1], #4
    3eb4:	f840 3b04 	str.w	r3, [r0], #4
    3eb8:	f851 3b04 	ldr.w	r3, [r1], #4
    3ebc:	f840 3b04 	str.w	r3, [r0], #4
    3ec0:	3a40      	subs	r2, #64	; 0x40
    3ec2:	d2bd      	bcs.n	3e40 <memcpy+0x10>
    3ec4:	3230      	adds	r2, #48	; 0x30
    3ec6:	d311      	bcc.n	3eec <memcpy+0xbc>
    3ec8:	f851 3b04 	ldr.w	r3, [r1], #4
    3ecc:	f840 3b04 	str.w	r3, [r0], #4
    3ed0:	f851 3b04 	ldr.w	r3, [r1], #4
    3ed4:	f840 3b04 	str.w	r3, [r0], #4
    3ed8:	f851 3b04 	ldr.w	r3, [r1], #4
    3edc:	f840 3b04 	str.w	r3, [r0], #4
    3ee0:	f851 3b04 	ldr.w	r3, [r1], #4
    3ee4:	f840 3b04 	str.w	r3, [r0], #4
    3ee8:	3a10      	subs	r2, #16
    3eea:	d2ed      	bcs.n	3ec8 <memcpy+0x98>
    3eec:	320c      	adds	r2, #12
    3eee:	d305      	bcc.n	3efc <memcpy+0xcc>
    3ef0:	f851 3b04 	ldr.w	r3, [r1], #4
    3ef4:	f840 3b04 	str.w	r3, [r0], #4
    3ef8:	3a04      	subs	r2, #4
    3efa:	d2f9      	bcs.n	3ef0 <memcpy+0xc0>
    3efc:	3204      	adds	r2, #4
    3efe:	d008      	beq.n	3f12 <memcpy+0xe2>
    3f00:	07d2      	lsls	r2, r2, #31
    3f02:	bf1c      	itt	ne
    3f04:	f811 3b01 	ldrbne.w	r3, [r1], #1
    3f08:	f800 3b01 	strbne.w	r3, [r0], #1
    3f0c:	d301      	bcc.n	3f12 <memcpy+0xe2>
    3f0e:	880b      	ldrh	r3, [r1, #0]
    3f10:	8003      	strh	r3, [r0, #0]
    3f12:	4660      	mov	r0, ip
    3f14:	4770      	bx	lr
    3f16:	bf00      	nop
    3f18:	2a08      	cmp	r2, #8
    3f1a:	d313      	bcc.n	3f44 <memcpy+0x114>
    3f1c:	078b      	lsls	r3, r1, #30
    3f1e:	d08d      	beq.n	3e3c <memcpy+0xc>
    3f20:	f010 0303 	ands.w	r3, r0, #3
    3f24:	d08a      	beq.n	3e3c <memcpy+0xc>
    3f26:	f1c3 0304 	rsb	r3, r3, #4
    3f2a:	1ad2      	subs	r2, r2, r3
    3f2c:	07db      	lsls	r3, r3, #31
    3f2e:	bf1c      	itt	ne
    3f30:	f811 3b01 	ldrbne.w	r3, [r1], #1
    3f34:	f800 3b01 	strbne.w	r3, [r0], #1
    3f38:	d380      	bcc.n	3e3c <memcpy+0xc>
    3f3a:	f831 3b02 	ldrh.w	r3, [r1], #2
    3f3e:	f820 3b02 	strh.w	r3, [r0], #2
    3f42:	e77b      	b.n	3e3c <memcpy+0xc>
    3f44:	3a04      	subs	r2, #4
    3f46:	d3d9      	bcc.n	3efc <memcpy+0xcc>
    3f48:	3a01      	subs	r2, #1
    3f4a:	f811 3b01 	ldrb.w	r3, [r1], #1
    3f4e:	f800 3b01 	strb.w	r3, [r0], #1
    3f52:	d2f9      	bcs.n	3f48 <memcpy+0x118>
    3f54:	780b      	ldrb	r3, [r1, #0]
    3f56:	7003      	strb	r3, [r0, #0]
    3f58:	784b      	ldrb	r3, [r1, #1]
    3f5a:	7043      	strb	r3, [r0, #1]
    3f5c:	788b      	ldrb	r3, [r1, #2]
    3f5e:	7083      	strb	r3, [r0, #2]
    3f60:	4660      	mov	r0, ip
    3f62:	4770      	bx	lr

00003f64 <memmove>:
    3f64:	4288      	cmp	r0, r1
    3f66:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f68:	d90d      	bls.n	3f86 <memmove+0x22>
    3f6a:	188b      	adds	r3, r1, r2
    3f6c:	4298      	cmp	r0, r3
    3f6e:	d20a      	bcs.n	3f86 <memmove+0x22>
    3f70:	1881      	adds	r1, r0, r2
    3f72:	2a00      	cmp	r2, #0
    3f74:	d051      	beq.n	401a <memmove+0xb6>
    3f76:	1a9a      	subs	r2, r3, r2
    3f78:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    3f7c:	f801 4d01 	strb.w	r4, [r1, #-1]!
    3f80:	4293      	cmp	r3, r2
    3f82:	d1f9      	bne.n	3f78 <memmove+0x14>
    3f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f86:	2a0f      	cmp	r2, #15
    3f88:	d948      	bls.n	401c <memmove+0xb8>
    3f8a:	ea41 0300 	orr.w	r3, r1, r0
    3f8e:	079b      	lsls	r3, r3, #30
    3f90:	d146      	bne.n	4020 <memmove+0xbc>
    3f92:	f100 0410 	add.w	r4, r0, #16
    3f96:	f101 0310 	add.w	r3, r1, #16
    3f9a:	4615      	mov	r5, r2
    3f9c:	f853 6c10 	ldr.w	r6, [r3, #-16]
    3fa0:	f844 6c10 	str.w	r6, [r4, #-16]
    3fa4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
    3fa8:	f844 6c0c 	str.w	r6, [r4, #-12]
    3fac:	f853 6c08 	ldr.w	r6, [r3, #-8]
    3fb0:	f844 6c08 	str.w	r6, [r4, #-8]
    3fb4:	3d10      	subs	r5, #16
    3fb6:	f853 6c04 	ldr.w	r6, [r3, #-4]
    3fba:	f844 6c04 	str.w	r6, [r4, #-4]
    3fbe:	2d0f      	cmp	r5, #15
    3fc0:	f103 0310 	add.w	r3, r3, #16
    3fc4:	f104 0410 	add.w	r4, r4, #16
    3fc8:	d8e8      	bhi.n	3f9c <memmove+0x38>
    3fca:	f1a2 0310 	sub.w	r3, r2, #16
    3fce:	f023 030f 	bic.w	r3, r3, #15
    3fd2:	f002 0e0f 	and.w	lr, r2, #15
    3fd6:	3310      	adds	r3, #16
    3fd8:	f1be 0f03 	cmp.w	lr, #3
    3fdc:	4419      	add	r1, r3
    3fde:	4403      	add	r3, r0
    3fe0:	d921      	bls.n	4026 <memmove+0xc2>
    3fe2:	1f1e      	subs	r6, r3, #4
    3fe4:	460d      	mov	r5, r1
    3fe6:	4674      	mov	r4, lr
    3fe8:	3c04      	subs	r4, #4
    3fea:	f855 7b04 	ldr.w	r7, [r5], #4
    3fee:	f846 7f04 	str.w	r7, [r6, #4]!
    3ff2:	2c03      	cmp	r4, #3
    3ff4:	d8f8      	bhi.n	3fe8 <memmove+0x84>
    3ff6:	f1ae 0404 	sub.w	r4, lr, #4
    3ffa:	f024 0403 	bic.w	r4, r4, #3
    3ffe:	3404      	adds	r4, #4
    4000:	4423      	add	r3, r4
    4002:	4421      	add	r1, r4
    4004:	f002 0203 	and.w	r2, r2, #3
    4008:	b162      	cbz	r2, 4024 <memmove+0xc0>
    400a:	3b01      	subs	r3, #1
    400c:	440a      	add	r2, r1
    400e:	f811 4b01 	ldrb.w	r4, [r1], #1
    4012:	f803 4f01 	strb.w	r4, [r3, #1]!
    4016:	428a      	cmp	r2, r1
    4018:	d1f9      	bne.n	400e <memmove+0xaa>
    401a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    401c:	4603      	mov	r3, r0
    401e:	e7f3      	b.n	4008 <memmove+0xa4>
    4020:	4603      	mov	r3, r0
    4022:	e7f2      	b.n	400a <memmove+0xa6>
    4024:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4026:	4672      	mov	r2, lr
    4028:	e7ee      	b.n	4008 <memmove+0xa4>
    402a:	bf00      	nop

0000402c <__malloc_lock>:
    402c:	4770      	bx	lr
    402e:	bf00      	nop

00004030 <__malloc_unlock>:
    4030:	4770      	bx	lr
    4032:	bf00      	nop

00004034 <_realloc_r>:
    4034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4038:	4617      	mov	r7, r2
    403a:	b083      	sub	sp, #12
    403c:	2900      	cmp	r1, #0
    403e:	f000 80c1 	beq.w	41c4 <_realloc_r+0x190>
    4042:	460e      	mov	r6, r1
    4044:	4681      	mov	r9, r0
    4046:	f107 050b 	add.w	r5, r7, #11
    404a:	f7ff ffef 	bl	402c <__malloc_lock>
    404e:	f856 ec04 	ldr.w	lr, [r6, #-4]
    4052:	2d16      	cmp	r5, #22
    4054:	f02e 0403 	bic.w	r4, lr, #3
    4058:	f1a6 0808 	sub.w	r8, r6, #8
    405c:	d840      	bhi.n	40e0 <_realloc_r+0xac>
    405e:	2210      	movs	r2, #16
    4060:	4615      	mov	r5, r2
    4062:	42af      	cmp	r7, r5
    4064:	d841      	bhi.n	40ea <_realloc_r+0xb6>
    4066:	4294      	cmp	r4, r2
    4068:	da75      	bge.n	4156 <_realloc_r+0x122>
    406a:	4bc9      	ldr	r3, [pc, #804]	; (4390 <_realloc_r+0x35c>)
    406c:	6899      	ldr	r1, [r3, #8]
    406e:	eb08 0004 	add.w	r0, r8, r4
    4072:	4288      	cmp	r0, r1
    4074:	6841      	ldr	r1, [r0, #4]
    4076:	f000 80d9 	beq.w	422c <_realloc_r+0x1f8>
    407a:	f021 0301 	bic.w	r3, r1, #1
    407e:	4403      	add	r3, r0
    4080:	685b      	ldr	r3, [r3, #4]
    4082:	07db      	lsls	r3, r3, #31
    4084:	d57d      	bpl.n	4182 <_realloc_r+0x14e>
    4086:	f01e 0f01 	tst.w	lr, #1
    408a:	d035      	beq.n	40f8 <_realloc_r+0xc4>
    408c:	4639      	mov	r1, r7
    408e:	4648      	mov	r0, r9
    4090:	f7ff fbc4 	bl	381c <_malloc_r>
    4094:	4607      	mov	r7, r0
    4096:	b1e0      	cbz	r0, 40d2 <_realloc_r+0x9e>
    4098:	f856 3c04 	ldr.w	r3, [r6, #-4]
    409c:	f023 0301 	bic.w	r3, r3, #1
    40a0:	4443      	add	r3, r8
    40a2:	f1a0 0208 	sub.w	r2, r0, #8
    40a6:	429a      	cmp	r2, r3
    40a8:	f000 8144 	beq.w	4334 <_realloc_r+0x300>
    40ac:	1f22      	subs	r2, r4, #4
    40ae:	2a24      	cmp	r2, #36	; 0x24
    40b0:	f200 8131 	bhi.w	4316 <_realloc_r+0x2e2>
    40b4:	2a13      	cmp	r2, #19
    40b6:	f200 8104 	bhi.w	42c2 <_realloc_r+0x28e>
    40ba:	4603      	mov	r3, r0
    40bc:	4632      	mov	r2, r6
    40be:	6811      	ldr	r1, [r2, #0]
    40c0:	6019      	str	r1, [r3, #0]
    40c2:	6851      	ldr	r1, [r2, #4]
    40c4:	6059      	str	r1, [r3, #4]
    40c6:	6892      	ldr	r2, [r2, #8]
    40c8:	609a      	str	r2, [r3, #8]
    40ca:	4631      	mov	r1, r6
    40cc:	4648      	mov	r0, r9
    40ce:	f7ff f88b 	bl	31e8 <_free_r>
    40d2:	4648      	mov	r0, r9
    40d4:	f7ff ffac 	bl	4030 <__malloc_unlock>
    40d8:	4638      	mov	r0, r7
    40da:	b003      	add	sp, #12
    40dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    40e0:	f025 0507 	bic.w	r5, r5, #7
    40e4:	2d00      	cmp	r5, #0
    40e6:	462a      	mov	r2, r5
    40e8:	dabb      	bge.n	4062 <_realloc_r+0x2e>
    40ea:	230c      	movs	r3, #12
    40ec:	2000      	movs	r0, #0
    40ee:	f8c9 3000 	str.w	r3, [r9]
    40f2:	b003      	add	sp, #12
    40f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    40f8:	f856 3c08 	ldr.w	r3, [r6, #-8]
    40fc:	ebc3 0a08 	rsb	sl, r3, r8
    4100:	f8da 3004 	ldr.w	r3, [sl, #4]
    4104:	f023 0c03 	bic.w	ip, r3, #3
    4108:	eb04 030c 	add.w	r3, r4, ip
    410c:	4293      	cmp	r3, r2
    410e:	dbbd      	blt.n	408c <_realloc_r+0x58>
    4110:	4657      	mov	r7, sl
    4112:	f8da 100c 	ldr.w	r1, [sl, #12]
    4116:	f857 0f08 	ldr.w	r0, [r7, #8]!
    411a:	1f22      	subs	r2, r4, #4
    411c:	2a24      	cmp	r2, #36	; 0x24
    411e:	60c1      	str	r1, [r0, #12]
    4120:	6088      	str	r0, [r1, #8]
    4122:	f200 8117 	bhi.w	4354 <_realloc_r+0x320>
    4126:	2a13      	cmp	r2, #19
    4128:	f240 8112 	bls.w	4350 <_realloc_r+0x31c>
    412c:	6831      	ldr	r1, [r6, #0]
    412e:	f8ca 1008 	str.w	r1, [sl, #8]
    4132:	6871      	ldr	r1, [r6, #4]
    4134:	f8ca 100c 	str.w	r1, [sl, #12]
    4138:	2a1b      	cmp	r2, #27
    413a:	f200 812b 	bhi.w	4394 <_realloc_r+0x360>
    413e:	3608      	adds	r6, #8
    4140:	f10a 0210 	add.w	r2, sl, #16
    4144:	6831      	ldr	r1, [r6, #0]
    4146:	6011      	str	r1, [r2, #0]
    4148:	6871      	ldr	r1, [r6, #4]
    414a:	6051      	str	r1, [r2, #4]
    414c:	68b1      	ldr	r1, [r6, #8]
    414e:	6091      	str	r1, [r2, #8]
    4150:	463e      	mov	r6, r7
    4152:	461c      	mov	r4, r3
    4154:	46d0      	mov	r8, sl
    4156:	1b63      	subs	r3, r4, r5
    4158:	2b0f      	cmp	r3, #15
    415a:	d81d      	bhi.n	4198 <_realloc_r+0x164>
    415c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4160:	f003 0301 	and.w	r3, r3, #1
    4164:	4323      	orrs	r3, r4
    4166:	4444      	add	r4, r8
    4168:	f8c8 3004 	str.w	r3, [r8, #4]
    416c:	6863      	ldr	r3, [r4, #4]
    416e:	f043 0301 	orr.w	r3, r3, #1
    4172:	6063      	str	r3, [r4, #4]
    4174:	4648      	mov	r0, r9
    4176:	f7ff ff5b 	bl	4030 <__malloc_unlock>
    417a:	4630      	mov	r0, r6
    417c:	b003      	add	sp, #12
    417e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4182:	f021 0103 	bic.w	r1, r1, #3
    4186:	4421      	add	r1, r4
    4188:	4291      	cmp	r1, r2
    418a:	db21      	blt.n	41d0 <_realloc_r+0x19c>
    418c:	68c3      	ldr	r3, [r0, #12]
    418e:	6882      	ldr	r2, [r0, #8]
    4190:	460c      	mov	r4, r1
    4192:	60d3      	str	r3, [r2, #12]
    4194:	609a      	str	r2, [r3, #8]
    4196:	e7de      	b.n	4156 <_realloc_r+0x122>
    4198:	f8d8 2004 	ldr.w	r2, [r8, #4]
    419c:	eb08 0105 	add.w	r1, r8, r5
    41a0:	f002 0201 	and.w	r2, r2, #1
    41a4:	4315      	orrs	r5, r2
    41a6:	f043 0201 	orr.w	r2, r3, #1
    41aa:	440b      	add	r3, r1
    41ac:	f8c8 5004 	str.w	r5, [r8, #4]
    41b0:	604a      	str	r2, [r1, #4]
    41b2:	685a      	ldr	r2, [r3, #4]
    41b4:	f042 0201 	orr.w	r2, r2, #1
    41b8:	3108      	adds	r1, #8
    41ba:	605a      	str	r2, [r3, #4]
    41bc:	4648      	mov	r0, r9
    41be:	f7ff f813 	bl	31e8 <_free_r>
    41c2:	e7d7      	b.n	4174 <_realloc_r+0x140>
    41c4:	4611      	mov	r1, r2
    41c6:	b003      	add	sp, #12
    41c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41cc:	f7ff bb26 	b.w	381c <_malloc_r>
    41d0:	f01e 0f01 	tst.w	lr, #1
    41d4:	f47f af5a 	bne.w	408c <_realloc_r+0x58>
    41d8:	f856 3c08 	ldr.w	r3, [r6, #-8]
    41dc:	ebc3 0a08 	rsb	sl, r3, r8
    41e0:	f8da 3004 	ldr.w	r3, [sl, #4]
    41e4:	f023 0c03 	bic.w	ip, r3, #3
    41e8:	eb01 0e0c 	add.w	lr, r1, ip
    41ec:	4596      	cmp	lr, r2
    41ee:	db8b      	blt.n	4108 <_realloc_r+0xd4>
    41f0:	68c3      	ldr	r3, [r0, #12]
    41f2:	6882      	ldr	r2, [r0, #8]
    41f4:	4657      	mov	r7, sl
    41f6:	60d3      	str	r3, [r2, #12]
    41f8:	609a      	str	r2, [r3, #8]
    41fa:	f857 1f08 	ldr.w	r1, [r7, #8]!
    41fe:	f8da 300c 	ldr.w	r3, [sl, #12]
    4202:	60cb      	str	r3, [r1, #12]
    4204:	1f22      	subs	r2, r4, #4
    4206:	2a24      	cmp	r2, #36	; 0x24
    4208:	6099      	str	r1, [r3, #8]
    420a:	f200 8099 	bhi.w	4340 <_realloc_r+0x30c>
    420e:	2a13      	cmp	r2, #19
    4210:	d962      	bls.n	42d8 <_realloc_r+0x2a4>
    4212:	6833      	ldr	r3, [r6, #0]
    4214:	f8ca 3008 	str.w	r3, [sl, #8]
    4218:	6873      	ldr	r3, [r6, #4]
    421a:	f8ca 300c 	str.w	r3, [sl, #12]
    421e:	2a1b      	cmp	r2, #27
    4220:	f200 80a0 	bhi.w	4364 <_realloc_r+0x330>
    4224:	3608      	adds	r6, #8
    4226:	f10a 0310 	add.w	r3, sl, #16
    422a:	e056      	b.n	42da <_realloc_r+0x2a6>
    422c:	f021 0b03 	bic.w	fp, r1, #3
    4230:	44a3      	add	fp, r4
    4232:	f105 0010 	add.w	r0, r5, #16
    4236:	4583      	cmp	fp, r0
    4238:	da59      	bge.n	42ee <_realloc_r+0x2ba>
    423a:	f01e 0f01 	tst.w	lr, #1
    423e:	f47f af25 	bne.w	408c <_realloc_r+0x58>
    4242:	f856 1c08 	ldr.w	r1, [r6, #-8]
    4246:	ebc1 0a08 	rsb	sl, r1, r8
    424a:	f8da 1004 	ldr.w	r1, [sl, #4]
    424e:	f021 0c03 	bic.w	ip, r1, #3
    4252:	44e3      	add	fp, ip
    4254:	4558      	cmp	r0, fp
    4256:	f73f af57 	bgt.w	4108 <_realloc_r+0xd4>
    425a:	4657      	mov	r7, sl
    425c:	f8da 100c 	ldr.w	r1, [sl, #12]
    4260:	f857 0f08 	ldr.w	r0, [r7, #8]!
    4264:	1f22      	subs	r2, r4, #4
    4266:	2a24      	cmp	r2, #36	; 0x24
    4268:	60c1      	str	r1, [r0, #12]
    426a:	6088      	str	r0, [r1, #8]
    426c:	f200 80b4 	bhi.w	43d8 <_realloc_r+0x3a4>
    4270:	2a13      	cmp	r2, #19
    4272:	f240 80a5 	bls.w	43c0 <_realloc_r+0x38c>
    4276:	6831      	ldr	r1, [r6, #0]
    4278:	f8ca 1008 	str.w	r1, [sl, #8]
    427c:	6871      	ldr	r1, [r6, #4]
    427e:	f8ca 100c 	str.w	r1, [sl, #12]
    4282:	2a1b      	cmp	r2, #27
    4284:	f200 80af 	bhi.w	43e6 <_realloc_r+0x3b2>
    4288:	3608      	adds	r6, #8
    428a:	f10a 0210 	add.w	r2, sl, #16
    428e:	6831      	ldr	r1, [r6, #0]
    4290:	6011      	str	r1, [r2, #0]
    4292:	6871      	ldr	r1, [r6, #4]
    4294:	6051      	str	r1, [r2, #4]
    4296:	68b1      	ldr	r1, [r6, #8]
    4298:	6091      	str	r1, [r2, #8]
    429a:	eb0a 0105 	add.w	r1, sl, r5
    429e:	ebc5 020b 	rsb	r2, r5, fp
    42a2:	f042 0201 	orr.w	r2, r2, #1
    42a6:	6099      	str	r1, [r3, #8]
    42a8:	604a      	str	r2, [r1, #4]
    42aa:	f8da 3004 	ldr.w	r3, [sl, #4]
    42ae:	f003 0301 	and.w	r3, r3, #1
    42b2:	431d      	orrs	r5, r3
    42b4:	4648      	mov	r0, r9
    42b6:	f8ca 5004 	str.w	r5, [sl, #4]
    42ba:	f7ff feb9 	bl	4030 <__malloc_unlock>
    42be:	4638      	mov	r0, r7
    42c0:	e75c      	b.n	417c <_realloc_r+0x148>
    42c2:	6833      	ldr	r3, [r6, #0]
    42c4:	6003      	str	r3, [r0, #0]
    42c6:	6873      	ldr	r3, [r6, #4]
    42c8:	6043      	str	r3, [r0, #4]
    42ca:	2a1b      	cmp	r2, #27
    42cc:	d827      	bhi.n	431e <_realloc_r+0x2ea>
    42ce:	f100 0308 	add.w	r3, r0, #8
    42d2:	f106 0208 	add.w	r2, r6, #8
    42d6:	e6f2      	b.n	40be <_realloc_r+0x8a>
    42d8:	463b      	mov	r3, r7
    42da:	6832      	ldr	r2, [r6, #0]
    42dc:	601a      	str	r2, [r3, #0]
    42de:	6872      	ldr	r2, [r6, #4]
    42e0:	605a      	str	r2, [r3, #4]
    42e2:	68b2      	ldr	r2, [r6, #8]
    42e4:	609a      	str	r2, [r3, #8]
    42e6:	463e      	mov	r6, r7
    42e8:	4674      	mov	r4, lr
    42ea:	46d0      	mov	r8, sl
    42ec:	e733      	b.n	4156 <_realloc_r+0x122>
    42ee:	eb08 0105 	add.w	r1, r8, r5
    42f2:	ebc5 0b0b 	rsb	fp, r5, fp
    42f6:	f04b 0201 	orr.w	r2, fp, #1
    42fa:	6099      	str	r1, [r3, #8]
    42fc:	604a      	str	r2, [r1, #4]
    42fe:	f856 3c04 	ldr.w	r3, [r6, #-4]
    4302:	f003 0301 	and.w	r3, r3, #1
    4306:	431d      	orrs	r5, r3
    4308:	4648      	mov	r0, r9
    430a:	f846 5c04 	str.w	r5, [r6, #-4]
    430e:	f7ff fe8f 	bl	4030 <__malloc_unlock>
    4312:	4630      	mov	r0, r6
    4314:	e732      	b.n	417c <_realloc_r+0x148>
    4316:	4631      	mov	r1, r6
    4318:	f7ff fe24 	bl	3f64 <memmove>
    431c:	e6d5      	b.n	40ca <_realloc_r+0x96>
    431e:	68b3      	ldr	r3, [r6, #8]
    4320:	6083      	str	r3, [r0, #8]
    4322:	68f3      	ldr	r3, [r6, #12]
    4324:	60c3      	str	r3, [r0, #12]
    4326:	2a24      	cmp	r2, #36	; 0x24
    4328:	d028      	beq.n	437c <_realloc_r+0x348>
    432a:	f100 0310 	add.w	r3, r0, #16
    432e:	f106 0210 	add.w	r2, r6, #16
    4332:	e6c4      	b.n	40be <_realloc_r+0x8a>
    4334:	f850 3c04 	ldr.w	r3, [r0, #-4]
    4338:	f023 0303 	bic.w	r3, r3, #3
    433c:	441c      	add	r4, r3
    433e:	e70a      	b.n	4156 <_realloc_r+0x122>
    4340:	4631      	mov	r1, r6
    4342:	4638      	mov	r0, r7
    4344:	4674      	mov	r4, lr
    4346:	46d0      	mov	r8, sl
    4348:	f7ff fe0c 	bl	3f64 <memmove>
    434c:	463e      	mov	r6, r7
    434e:	e702      	b.n	4156 <_realloc_r+0x122>
    4350:	463a      	mov	r2, r7
    4352:	e6f7      	b.n	4144 <_realloc_r+0x110>
    4354:	4631      	mov	r1, r6
    4356:	4638      	mov	r0, r7
    4358:	461c      	mov	r4, r3
    435a:	46d0      	mov	r8, sl
    435c:	f7ff fe02 	bl	3f64 <memmove>
    4360:	463e      	mov	r6, r7
    4362:	e6f8      	b.n	4156 <_realloc_r+0x122>
    4364:	68b3      	ldr	r3, [r6, #8]
    4366:	f8ca 3010 	str.w	r3, [sl, #16]
    436a:	68f3      	ldr	r3, [r6, #12]
    436c:	f8ca 3014 	str.w	r3, [sl, #20]
    4370:	2a24      	cmp	r2, #36	; 0x24
    4372:	d01b      	beq.n	43ac <_realloc_r+0x378>
    4374:	3610      	adds	r6, #16
    4376:	f10a 0318 	add.w	r3, sl, #24
    437a:	e7ae      	b.n	42da <_realloc_r+0x2a6>
    437c:	6933      	ldr	r3, [r6, #16]
    437e:	6103      	str	r3, [r0, #16]
    4380:	6973      	ldr	r3, [r6, #20]
    4382:	6143      	str	r3, [r0, #20]
    4384:	f106 0218 	add.w	r2, r6, #24
    4388:	f100 0318 	add.w	r3, r0, #24
    438c:	e697      	b.n	40be <_realloc_r+0x8a>
    438e:	bf00      	nop
    4390:	20000490 	.word	0x20000490
    4394:	68b1      	ldr	r1, [r6, #8]
    4396:	f8ca 1010 	str.w	r1, [sl, #16]
    439a:	68f1      	ldr	r1, [r6, #12]
    439c:	f8ca 1014 	str.w	r1, [sl, #20]
    43a0:	2a24      	cmp	r2, #36	; 0x24
    43a2:	d00f      	beq.n	43c4 <_realloc_r+0x390>
    43a4:	3610      	adds	r6, #16
    43a6:	f10a 0218 	add.w	r2, sl, #24
    43aa:	e6cb      	b.n	4144 <_realloc_r+0x110>
    43ac:	6933      	ldr	r3, [r6, #16]
    43ae:	f8ca 3018 	str.w	r3, [sl, #24]
    43b2:	6973      	ldr	r3, [r6, #20]
    43b4:	f8ca 301c 	str.w	r3, [sl, #28]
    43b8:	3618      	adds	r6, #24
    43ba:	f10a 0320 	add.w	r3, sl, #32
    43be:	e78c      	b.n	42da <_realloc_r+0x2a6>
    43c0:	463a      	mov	r2, r7
    43c2:	e764      	b.n	428e <_realloc_r+0x25a>
    43c4:	6932      	ldr	r2, [r6, #16]
    43c6:	f8ca 2018 	str.w	r2, [sl, #24]
    43ca:	6972      	ldr	r2, [r6, #20]
    43cc:	f8ca 201c 	str.w	r2, [sl, #28]
    43d0:	3618      	adds	r6, #24
    43d2:	f10a 0220 	add.w	r2, sl, #32
    43d6:	e6b5      	b.n	4144 <_realloc_r+0x110>
    43d8:	4631      	mov	r1, r6
    43da:	4638      	mov	r0, r7
    43dc:	9301      	str	r3, [sp, #4]
    43de:	f7ff fdc1 	bl	3f64 <memmove>
    43e2:	9b01      	ldr	r3, [sp, #4]
    43e4:	e759      	b.n	429a <_realloc_r+0x266>
    43e6:	68b1      	ldr	r1, [r6, #8]
    43e8:	f8ca 1010 	str.w	r1, [sl, #16]
    43ec:	68f1      	ldr	r1, [r6, #12]
    43ee:	f8ca 1014 	str.w	r1, [sl, #20]
    43f2:	2a24      	cmp	r2, #36	; 0x24
    43f4:	d003      	beq.n	43fe <_realloc_r+0x3ca>
    43f6:	3610      	adds	r6, #16
    43f8:	f10a 0218 	add.w	r2, sl, #24
    43fc:	e747      	b.n	428e <_realloc_r+0x25a>
    43fe:	6932      	ldr	r2, [r6, #16]
    4400:	f8ca 2018 	str.w	r2, [sl, #24]
    4404:	6972      	ldr	r2, [r6, #20]
    4406:	f8ca 201c 	str.w	r2, [sl, #28]
    440a:	3618      	adds	r6, #24
    440c:	f10a 0220 	add.w	r2, sl, #32
    4410:	e73d      	b.n	428e <_realloc_r+0x25a>
    4412:	bf00      	nop

00004414 <_sbrk_r>:
    4414:	b538      	push	{r3, r4, r5, lr}
    4416:	4c07      	ldr	r4, [pc, #28]	; (4434 <_sbrk_r+0x20>)
    4418:	2300      	movs	r3, #0
    441a:	4605      	mov	r5, r0
    441c:	4608      	mov	r0, r1
    441e:	6023      	str	r3, [r4, #0]
    4420:	f7fd f828 	bl	1474 <_sbrk>
    4424:	1c43      	adds	r3, r0, #1
    4426:	d000      	beq.n	442a <_sbrk_r+0x16>
    4428:	bd38      	pop	{r3, r4, r5, pc}
    442a:	6823      	ldr	r3, [r4, #0]
    442c:	2b00      	cmp	r3, #0
    442e:	d0fb      	beq.n	4428 <_sbrk_r+0x14>
    4430:	602b      	str	r3, [r5, #0]
    4432:	bd38      	pop	{r3, r4, r5, pc}
    4434:	2000093c 	.word	0x2000093c

00004438 <__sread>:
    4438:	b510      	push	{r4, lr}
    443a:	460c      	mov	r4, r1
    443c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    4440:	f000 fa32 	bl	48a8 <_read_r>
    4444:	2800      	cmp	r0, #0
    4446:	db03      	blt.n	4450 <__sread+0x18>
    4448:	6d23      	ldr	r3, [r4, #80]	; 0x50
    444a:	4403      	add	r3, r0
    444c:	6523      	str	r3, [r4, #80]	; 0x50
    444e:	bd10      	pop	{r4, pc}
    4450:	89a3      	ldrh	r3, [r4, #12]
    4452:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4456:	81a3      	strh	r3, [r4, #12]
    4458:	bd10      	pop	{r4, pc}
    445a:	bf00      	nop

0000445c <__swrite>:
    445c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4460:	4616      	mov	r6, r2
    4462:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    4466:	461f      	mov	r7, r3
    4468:	05d3      	lsls	r3, r2, #23
    446a:	460c      	mov	r4, r1
    446c:	4605      	mov	r5, r0
    446e:	d507      	bpl.n	4480 <__swrite+0x24>
    4470:	2200      	movs	r2, #0
    4472:	2302      	movs	r3, #2
    4474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    4478:	f000 fa00 	bl	487c <_lseek_r>
    447c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    4480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    4484:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    4488:	81a2      	strh	r2, [r4, #12]
    448a:	463b      	mov	r3, r7
    448c:	4632      	mov	r2, r6
    448e:	4628      	mov	r0, r5
    4490:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4494:	f000 b910 	b.w	46b8 <_write_r>

00004498 <__sseek>:
    4498:	b510      	push	{r4, lr}
    449a:	460c      	mov	r4, r1
    449c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    44a0:	f000 f9ec 	bl	487c <_lseek_r>
    44a4:	89a3      	ldrh	r3, [r4, #12]
    44a6:	1c42      	adds	r2, r0, #1
    44a8:	bf0e      	itee	eq
    44aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    44ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    44b2:	6520      	strne	r0, [r4, #80]	; 0x50
    44b4:	81a3      	strh	r3, [r4, #12]
    44b6:	bd10      	pop	{r4, pc}

000044b8 <__sclose>:
    44b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    44bc:	f000 b964 	b.w	4788 <_close_r>

000044c0 <strlen>:
    44c0:	f890 f000 	pld	[r0]
    44c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    44c8:	f020 0107 	bic.w	r1, r0, #7
    44cc:	f06f 0c00 	mvn.w	ip, #0
    44d0:	f010 0407 	ands.w	r4, r0, #7
    44d4:	f891 f020 	pld	[r1, #32]
    44d8:	f040 8049 	bne.w	456e <strlen+0xae>
    44dc:	f04f 0400 	mov.w	r4, #0
    44e0:	f06f 0007 	mvn.w	r0, #7
    44e4:	e9d1 2300 	ldrd	r2, r3, [r1]
    44e8:	f891 f040 	pld	[r1, #64]	; 0x40
    44ec:	f100 0008 	add.w	r0, r0, #8
    44f0:	fa82 f24c 	uadd8	r2, r2, ip
    44f4:	faa4 f28c 	sel	r2, r4, ip
    44f8:	fa83 f34c 	uadd8	r3, r3, ip
    44fc:	faa2 f38c 	sel	r3, r2, ip
    4500:	bb4b      	cbnz	r3, 4556 <strlen+0x96>
    4502:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    4506:	fa82 f24c 	uadd8	r2, r2, ip
    450a:	f100 0008 	add.w	r0, r0, #8
    450e:	faa4 f28c 	sel	r2, r4, ip
    4512:	fa83 f34c 	uadd8	r3, r3, ip
    4516:	faa2 f38c 	sel	r3, r2, ip
    451a:	b9e3      	cbnz	r3, 4556 <strlen+0x96>
    451c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    4520:	fa82 f24c 	uadd8	r2, r2, ip
    4524:	f100 0008 	add.w	r0, r0, #8
    4528:	faa4 f28c 	sel	r2, r4, ip
    452c:	fa83 f34c 	uadd8	r3, r3, ip
    4530:	faa2 f38c 	sel	r3, r2, ip
    4534:	b97b      	cbnz	r3, 4556 <strlen+0x96>
    4536:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    453a:	f101 0120 	add.w	r1, r1, #32
    453e:	fa82 f24c 	uadd8	r2, r2, ip
    4542:	f100 0008 	add.w	r0, r0, #8
    4546:	faa4 f28c 	sel	r2, r4, ip
    454a:	fa83 f34c 	uadd8	r3, r3, ip
    454e:	faa2 f38c 	sel	r3, r2, ip
    4552:	2b00      	cmp	r3, #0
    4554:	d0c6      	beq.n	44e4 <strlen+0x24>
    4556:	2a00      	cmp	r2, #0
    4558:	bf04      	itt	eq
    455a:	3004      	addeq	r0, #4
    455c:	461a      	moveq	r2, r3
    455e:	ba12      	rev	r2, r2
    4560:	fab2 f282 	clz	r2, r2
    4564:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    4568:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    456c:	4770      	bx	lr
    456e:	e9d1 2300 	ldrd	r2, r3, [r1]
    4572:	f004 0503 	and.w	r5, r4, #3
    4576:	f1c4 0000 	rsb	r0, r4, #0
    457a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    457e:	f014 0f04 	tst.w	r4, #4
    4582:	f891 f040 	pld	[r1, #64]	; 0x40
    4586:	fa0c f505 	lsl.w	r5, ip, r5
    458a:	ea62 0205 	orn	r2, r2, r5
    458e:	bf1c      	itt	ne
    4590:	ea63 0305 	ornne	r3, r3, r5
    4594:	4662      	movne	r2, ip
    4596:	f04f 0400 	mov.w	r4, #0
    459a:	e7a9      	b.n	44f0 <strlen+0x30>

0000459c <__swbuf_r>:
    459c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    459e:	460e      	mov	r6, r1
    45a0:	4614      	mov	r4, r2
    45a2:	4607      	mov	r7, r0
    45a4:	b110      	cbz	r0, 45ac <__swbuf_r+0x10>
    45a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
    45a8:	2b00      	cmp	r3, #0
    45aa:	d04a      	beq.n	4642 <__swbuf_r+0xa6>
    45ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    45b0:	69a3      	ldr	r3, [r4, #24]
    45b2:	60a3      	str	r3, [r4, #8]
    45b4:	b291      	uxth	r1, r2
    45b6:	0708      	lsls	r0, r1, #28
    45b8:	d538      	bpl.n	462c <__swbuf_r+0x90>
    45ba:	6923      	ldr	r3, [r4, #16]
    45bc:	2b00      	cmp	r3, #0
    45be:	d035      	beq.n	462c <__swbuf_r+0x90>
    45c0:	0489      	lsls	r1, r1, #18
    45c2:	b2f5      	uxtb	r5, r6
    45c4:	d515      	bpl.n	45f2 <__swbuf_r+0x56>
    45c6:	6822      	ldr	r2, [r4, #0]
    45c8:	6961      	ldr	r1, [r4, #20]
    45ca:	1ad3      	subs	r3, r2, r3
    45cc:	428b      	cmp	r3, r1
    45ce:	da1c      	bge.n	460a <__swbuf_r+0x6e>
    45d0:	3301      	adds	r3, #1
    45d2:	68a1      	ldr	r1, [r4, #8]
    45d4:	1c50      	adds	r0, r2, #1
    45d6:	3901      	subs	r1, #1
    45d8:	60a1      	str	r1, [r4, #8]
    45da:	6020      	str	r0, [r4, #0]
    45dc:	7016      	strb	r6, [r2, #0]
    45de:	6962      	ldr	r2, [r4, #20]
    45e0:	429a      	cmp	r2, r3
    45e2:	d01a      	beq.n	461a <__swbuf_r+0x7e>
    45e4:	89a3      	ldrh	r3, [r4, #12]
    45e6:	07db      	lsls	r3, r3, #31
    45e8:	d501      	bpl.n	45ee <__swbuf_r+0x52>
    45ea:	2d0a      	cmp	r5, #10
    45ec:	d015      	beq.n	461a <__swbuf_r+0x7e>
    45ee:	4628      	mov	r0, r5
    45f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    45f2:	6e61      	ldr	r1, [r4, #100]	; 0x64
    45f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    45f8:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
    45fc:	81a2      	strh	r2, [r4, #12]
    45fe:	6822      	ldr	r2, [r4, #0]
    4600:	6661      	str	r1, [r4, #100]	; 0x64
    4602:	6961      	ldr	r1, [r4, #20]
    4604:	1ad3      	subs	r3, r2, r3
    4606:	428b      	cmp	r3, r1
    4608:	dbe2      	blt.n	45d0 <__swbuf_r+0x34>
    460a:	4621      	mov	r1, r4
    460c:	4638      	mov	r0, r7
    460e:	f7fe fc8d 	bl	2f2c <_fflush_r>
    4612:	b940      	cbnz	r0, 4626 <__swbuf_r+0x8a>
    4614:	6822      	ldr	r2, [r4, #0]
    4616:	2301      	movs	r3, #1
    4618:	e7db      	b.n	45d2 <__swbuf_r+0x36>
    461a:	4621      	mov	r1, r4
    461c:	4638      	mov	r0, r7
    461e:	f7fe fc85 	bl	2f2c <_fflush_r>
    4622:	2800      	cmp	r0, #0
    4624:	d0e3      	beq.n	45ee <__swbuf_r+0x52>
    4626:	f04f 30ff 	mov.w	r0, #4294967295
    462a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    462c:	4621      	mov	r1, r4
    462e:	4638      	mov	r0, r7
    4630:	f7fe fb64 	bl	2cfc <__swsetup_r>
    4634:	2800      	cmp	r0, #0
    4636:	d1f6      	bne.n	4626 <__swbuf_r+0x8a>
    4638:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    463c:	6923      	ldr	r3, [r4, #16]
    463e:	b291      	uxth	r1, r2
    4640:	e7be      	b.n	45c0 <__swbuf_r+0x24>
    4642:	f7fe fd07 	bl	3054 <__sinit>
    4646:	e7b1      	b.n	45ac <__swbuf_r+0x10>

00004648 <_wcrtomb_r>:
    4648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    464c:	4605      	mov	r5, r0
    464e:	b086      	sub	sp, #24
    4650:	461e      	mov	r6, r3
    4652:	460c      	mov	r4, r1
    4654:	b1a1      	cbz	r1, 4680 <_wcrtomb_r+0x38>
    4656:	4b10      	ldr	r3, [pc, #64]	; (4698 <_wcrtomb_r+0x50>)
    4658:	4617      	mov	r7, r2
    465a:	f8d3 8000 	ldr.w	r8, [r3]
    465e:	f7ff f857 	bl	3710 <__locale_charset>
    4662:	9600      	str	r6, [sp, #0]
    4664:	4603      	mov	r3, r0
    4666:	463a      	mov	r2, r7
    4668:	4621      	mov	r1, r4
    466a:	4628      	mov	r0, r5
    466c:	47c0      	blx	r8
    466e:	1c43      	adds	r3, r0, #1
    4670:	d103      	bne.n	467a <_wcrtomb_r+0x32>
    4672:	2200      	movs	r2, #0
    4674:	238a      	movs	r3, #138	; 0x8a
    4676:	6032      	str	r2, [r6, #0]
    4678:	602b      	str	r3, [r5, #0]
    467a:	b006      	add	sp, #24
    467c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4680:	4b05      	ldr	r3, [pc, #20]	; (4698 <_wcrtomb_r+0x50>)
    4682:	681f      	ldr	r7, [r3, #0]
    4684:	f7ff f844 	bl	3710 <__locale_charset>
    4688:	9600      	str	r6, [sp, #0]
    468a:	4603      	mov	r3, r0
    468c:	4622      	mov	r2, r4
    468e:	a903      	add	r1, sp, #12
    4690:	4628      	mov	r0, r5
    4692:	47b8      	blx	r7
    4694:	e7eb      	b.n	466e <_wcrtomb_r+0x26>
    4696:	bf00      	nop
    4698:	200008a0 	.word	0x200008a0

0000469c <__ascii_wctomb>:
    469c:	b121      	cbz	r1, 46a8 <__ascii_wctomb+0xc>
    469e:	2aff      	cmp	r2, #255	; 0xff
    46a0:	d804      	bhi.n	46ac <__ascii_wctomb+0x10>
    46a2:	700a      	strb	r2, [r1, #0]
    46a4:	2001      	movs	r0, #1
    46a6:	4770      	bx	lr
    46a8:	4608      	mov	r0, r1
    46aa:	4770      	bx	lr
    46ac:	238a      	movs	r3, #138	; 0x8a
    46ae:	6003      	str	r3, [r0, #0]
    46b0:	f04f 30ff 	mov.w	r0, #4294967295
    46b4:	4770      	bx	lr
    46b6:	bf00      	nop

000046b8 <_write_r>:
    46b8:	b570      	push	{r4, r5, r6, lr}
    46ba:	460d      	mov	r5, r1
    46bc:	4c08      	ldr	r4, [pc, #32]	; (46e0 <_write_r+0x28>)
    46be:	4611      	mov	r1, r2
    46c0:	4606      	mov	r6, r0
    46c2:	461a      	mov	r2, r3
    46c4:	4628      	mov	r0, r5
    46c6:	2300      	movs	r3, #0
    46c8:	6023      	str	r3, [r4, #0]
    46ca:	f7fb fe35 	bl	338 <_write>
    46ce:	1c43      	adds	r3, r0, #1
    46d0:	d000      	beq.n	46d4 <_write_r+0x1c>
    46d2:	bd70      	pop	{r4, r5, r6, pc}
    46d4:	6823      	ldr	r3, [r4, #0]
    46d6:	2b00      	cmp	r3, #0
    46d8:	d0fb      	beq.n	46d2 <_write_r+0x1a>
    46da:	6033      	str	r3, [r6, #0]
    46dc:	bd70      	pop	{r4, r5, r6, pc}
    46de:	bf00      	nop
    46e0:	2000093c 	.word	0x2000093c

000046e4 <__register_exitproc>:
    46e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    46e8:	4c25      	ldr	r4, [pc, #148]	; (4780 <__register_exitproc+0x9c>)
    46ea:	6825      	ldr	r5, [r4, #0]
    46ec:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    46f0:	4606      	mov	r6, r0
    46f2:	4688      	mov	r8, r1
    46f4:	4692      	mov	sl, r2
    46f6:	4699      	mov	r9, r3
    46f8:	b3c4      	cbz	r4, 476c <__register_exitproc+0x88>
    46fa:	6860      	ldr	r0, [r4, #4]
    46fc:	281f      	cmp	r0, #31
    46fe:	dc17      	bgt.n	4730 <__register_exitproc+0x4c>
    4700:	1c43      	adds	r3, r0, #1
    4702:	b176      	cbz	r6, 4722 <__register_exitproc+0x3e>
    4704:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    4708:	2201      	movs	r2, #1
    470a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    470e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    4712:	4082      	lsls	r2, r0
    4714:	4311      	orrs	r1, r2
    4716:	2e02      	cmp	r6, #2
    4718:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    471c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    4720:	d01e      	beq.n	4760 <__register_exitproc+0x7c>
    4722:	3002      	adds	r0, #2
    4724:	6063      	str	r3, [r4, #4]
    4726:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    472a:	2000      	movs	r0, #0
    472c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4730:	4b14      	ldr	r3, [pc, #80]	; (4784 <__register_exitproc+0xa0>)
    4732:	b303      	cbz	r3, 4776 <__register_exitproc+0x92>
    4734:	f44f 70c8 	mov.w	r0, #400	; 0x190
    4738:	f7ff f868 	bl	380c <malloc>
    473c:	4604      	mov	r4, r0
    473e:	b1d0      	cbz	r0, 4776 <__register_exitproc+0x92>
    4740:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    4744:	2700      	movs	r7, #0
    4746:	e880 0088 	stmia.w	r0, {r3, r7}
    474a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    474e:	4638      	mov	r0, r7
    4750:	2301      	movs	r3, #1
    4752:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    4756:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    475a:	2e00      	cmp	r6, #0
    475c:	d0e1      	beq.n	4722 <__register_exitproc+0x3e>
    475e:	e7d1      	b.n	4704 <__register_exitproc+0x20>
    4760:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    4764:	430a      	orrs	r2, r1
    4766:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    476a:	e7da      	b.n	4722 <__register_exitproc+0x3e>
    476c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    4770:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    4774:	e7c1      	b.n	46fa <__register_exitproc+0x16>
    4776:	f04f 30ff 	mov.w	r0, #4294967295
    477a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    477e:	bf00      	nop
    4780:	0000497c 	.word	0x0000497c
    4784:	0000380d 	.word	0x0000380d

00004788 <_close_r>:
    4788:	b538      	push	{r3, r4, r5, lr}
    478a:	4c07      	ldr	r4, [pc, #28]	; (47a8 <_close_r+0x20>)
    478c:	2300      	movs	r3, #0
    478e:	4605      	mov	r5, r0
    4790:	4608      	mov	r0, r1
    4792:	6023      	str	r3, [r4, #0]
    4794:	f7fc fe88 	bl	14a8 <_close>
    4798:	1c43      	adds	r3, r0, #1
    479a:	d000      	beq.n	479e <_close_r+0x16>
    479c:	bd38      	pop	{r3, r4, r5, pc}
    479e:	6823      	ldr	r3, [r4, #0]
    47a0:	2b00      	cmp	r3, #0
    47a2:	d0fb      	beq.n	479c <_close_r+0x14>
    47a4:	602b      	str	r3, [r5, #0]
    47a6:	bd38      	pop	{r3, r4, r5, pc}
    47a8:	2000093c 	.word	0x2000093c

000047ac <_fclose_r>:
    47ac:	2900      	cmp	r1, #0
    47ae:	d03d      	beq.n	482c <_fclose_r+0x80>
    47b0:	b570      	push	{r4, r5, r6, lr}
    47b2:	4605      	mov	r5, r0
    47b4:	460c      	mov	r4, r1
    47b6:	b108      	cbz	r0, 47bc <_fclose_r+0x10>
    47b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    47ba:	b37b      	cbz	r3, 481c <_fclose_r+0x70>
    47bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    47c0:	b90b      	cbnz	r3, 47c6 <_fclose_r+0x1a>
    47c2:	2000      	movs	r0, #0
    47c4:	bd70      	pop	{r4, r5, r6, pc}
    47c6:	4621      	mov	r1, r4
    47c8:	4628      	mov	r0, r5
    47ca:	f7fe fb0b 	bl	2de4 <__sflush_r>
    47ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    47d0:	4606      	mov	r6, r0
    47d2:	b133      	cbz	r3, 47e2 <_fclose_r+0x36>
    47d4:	69e1      	ldr	r1, [r4, #28]
    47d6:	4628      	mov	r0, r5
    47d8:	4798      	blx	r3
    47da:	2800      	cmp	r0, #0
    47dc:	bfb8      	it	lt
    47de:	f04f 36ff 	movlt.w	r6, #4294967295
    47e2:	89a3      	ldrh	r3, [r4, #12]
    47e4:	061b      	lsls	r3, r3, #24
    47e6:	d41c      	bmi.n	4822 <_fclose_r+0x76>
    47e8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    47ea:	b141      	cbz	r1, 47fe <_fclose_r+0x52>
    47ec:	f104 0340 	add.w	r3, r4, #64	; 0x40
    47f0:	4299      	cmp	r1, r3
    47f2:	d002      	beq.n	47fa <_fclose_r+0x4e>
    47f4:	4628      	mov	r0, r5
    47f6:	f7fe fcf7 	bl	31e8 <_free_r>
    47fa:	2300      	movs	r3, #0
    47fc:	6323      	str	r3, [r4, #48]	; 0x30
    47fe:	6c61      	ldr	r1, [r4, #68]	; 0x44
    4800:	b121      	cbz	r1, 480c <_fclose_r+0x60>
    4802:	4628      	mov	r0, r5
    4804:	f7fe fcf0 	bl	31e8 <_free_r>
    4808:	2300      	movs	r3, #0
    480a:	6463      	str	r3, [r4, #68]	; 0x44
    480c:	f7fe fc28 	bl	3060 <__sfp_lock_acquire>
    4810:	2300      	movs	r3, #0
    4812:	81a3      	strh	r3, [r4, #12]
    4814:	f7fe fc26 	bl	3064 <__sfp_lock_release>
    4818:	4630      	mov	r0, r6
    481a:	bd70      	pop	{r4, r5, r6, pc}
    481c:	f7fe fc1a 	bl	3054 <__sinit>
    4820:	e7cc      	b.n	47bc <_fclose_r+0x10>
    4822:	6921      	ldr	r1, [r4, #16]
    4824:	4628      	mov	r0, r5
    4826:	f7fe fcdf 	bl	31e8 <_free_r>
    482a:	e7dd      	b.n	47e8 <_fclose_r+0x3c>
    482c:	2000      	movs	r0, #0
    482e:	4770      	bx	lr

00004830 <_fstat_r>:
    4830:	b538      	push	{r3, r4, r5, lr}
    4832:	460b      	mov	r3, r1
    4834:	4c07      	ldr	r4, [pc, #28]	; (4854 <_fstat_r+0x24>)
    4836:	4605      	mov	r5, r0
    4838:	4611      	mov	r1, r2
    483a:	4618      	mov	r0, r3
    483c:	2300      	movs	r3, #0
    483e:	6023      	str	r3, [r4, #0]
    4840:	f7fc fe36 	bl	14b0 <_fstat>
    4844:	1c43      	adds	r3, r0, #1
    4846:	d000      	beq.n	484a <_fstat_r+0x1a>
    4848:	bd38      	pop	{r3, r4, r5, pc}
    484a:	6823      	ldr	r3, [r4, #0]
    484c:	2b00      	cmp	r3, #0
    484e:	d0fb      	beq.n	4848 <_fstat_r+0x18>
    4850:	602b      	str	r3, [r5, #0]
    4852:	bd38      	pop	{r3, r4, r5, pc}
    4854:	2000093c 	.word	0x2000093c

00004858 <_isatty_r>:
    4858:	b538      	push	{r3, r4, r5, lr}
    485a:	4c07      	ldr	r4, [pc, #28]	; (4878 <_isatty_r+0x20>)
    485c:	2300      	movs	r3, #0
    485e:	4605      	mov	r5, r0
    4860:	4608      	mov	r0, r1
    4862:	6023      	str	r3, [r4, #0]
    4864:	f7fc fe2a 	bl	14bc <_isatty>
    4868:	1c43      	adds	r3, r0, #1
    486a:	d000      	beq.n	486e <_isatty_r+0x16>
    486c:	bd38      	pop	{r3, r4, r5, pc}
    486e:	6823      	ldr	r3, [r4, #0]
    4870:	2b00      	cmp	r3, #0
    4872:	d0fb      	beq.n	486c <_isatty_r+0x14>
    4874:	602b      	str	r3, [r5, #0]
    4876:	bd38      	pop	{r3, r4, r5, pc}
    4878:	2000093c 	.word	0x2000093c

0000487c <_lseek_r>:
    487c:	b570      	push	{r4, r5, r6, lr}
    487e:	460d      	mov	r5, r1
    4880:	4c08      	ldr	r4, [pc, #32]	; (48a4 <_lseek_r+0x28>)
    4882:	4611      	mov	r1, r2
    4884:	4606      	mov	r6, r0
    4886:	461a      	mov	r2, r3
    4888:	4628      	mov	r0, r5
    488a:	2300      	movs	r3, #0
    488c:	6023      	str	r3, [r4, #0]
    488e:	f7fc fe17 	bl	14c0 <_lseek>
    4892:	1c43      	adds	r3, r0, #1
    4894:	d000      	beq.n	4898 <_lseek_r+0x1c>
    4896:	bd70      	pop	{r4, r5, r6, pc}
    4898:	6823      	ldr	r3, [r4, #0]
    489a:	2b00      	cmp	r3, #0
    489c:	d0fb      	beq.n	4896 <_lseek_r+0x1a>
    489e:	6033      	str	r3, [r6, #0]
    48a0:	bd70      	pop	{r4, r5, r6, pc}
    48a2:	bf00      	nop
    48a4:	2000093c 	.word	0x2000093c

000048a8 <_read_r>:
    48a8:	b570      	push	{r4, r5, r6, lr}
    48aa:	460d      	mov	r5, r1
    48ac:	4c08      	ldr	r4, [pc, #32]	; (48d0 <_read_r+0x28>)
    48ae:	4611      	mov	r1, r2
    48b0:	4606      	mov	r6, r0
    48b2:	461a      	mov	r2, r3
    48b4:	4628      	mov	r0, r5
    48b6:	2300      	movs	r3, #0
    48b8:	6023      	str	r3, [r4, #0]
    48ba:	f7fb fc8f 	bl	1dc <_read>
    48be:	1c43      	adds	r3, r0, #1
    48c0:	d000      	beq.n	48c4 <_read_r+0x1c>
    48c2:	bd70      	pop	{r4, r5, r6, pc}
    48c4:	6823      	ldr	r3, [r4, #0]
    48c6:	2b00      	cmp	r3, #0
    48c8:	d0fb      	beq.n	48c2 <_read_r+0x1a>
    48ca:	6033      	str	r3, [r6, #0]
    48cc:	bd70      	pop	{r4, r5, r6, pc}
    48ce:	bf00      	nop
    48d0:	2000093c 	.word	0x2000093c
    48d4:	74747542 	.word	0x74747542
    48d8:	30206e6f 	.word	0x30206e6f
    48dc:	000a0d20 	.word	0x000a0d20
    48e0:	74747542 	.word	0x74747542
    48e4:	31206e6f 	.word	0x31206e6f
    48e8:	000a0d20 	.word	0x000a0d20
    48ec:	74747542 	.word	0x74747542
    48f0:	32206e6f 	.word	0x32206e6f
    48f4:	000a0d20 	.word	0x000a0d20
    48f8:	74747542 	.word	0x74747542
    48fc:	33206e6f 	.word	0x33206e6f
    4900:	000a0d20 	.word	0x000a0d20
    4904:	6e6b6e55 	.word	0x6e6b6e55
    4908:	206e776f 	.word	0x206e776f
    490c:	626d756e 	.word	0x626d756e
    4910:	20217265 	.word	0x20217265
    4914:	00000a0d 	.word	0x00000a0d
    4918:	63696857 	.word	0x63696857
    491c:	454c2068 	.word	0x454c2068
    4920:	68732044 	.word	0x68732044
    4924:	646c756f 	.word	0x646c756f
    4928:	6c204920 	.word	0x6c204920
    492c:	74686769 	.word	0x74686769
    4930:	20707520 	.word	0x20707520
    4934:	7250202d 	.word	0x7250202d
    4938:	20737365 	.word	0x20737365
    493c:	31202c30 	.word	0x31202c30
    4940:	2c32202c 	.word	0x2c32202c
    4944:	20726f20 	.word	0x20726f20
    4948:	0d203f33 	.word	0x0d203f33
    494c:	0000000a 	.word	0x0000000a
    4950:	5020724f 	.word	0x5020724f
    4954:	20485355 	.word	0x20485355
    4958:	75622061 	.word	0x75622061
    495c:	6e6f7474 	.word	0x6e6f7474
    4960:	206f7420 	.word	0x206f7420
    4964:	20746567 	.word	0x20746567
    4968:	65722061 	.word	0x65722061
    496c:	6e6f7073 	.word	0x6e6f7073
    4970:	20216573 	.word	0x20216573
    4974:	00000a0d 	.word	0x00000a0d
    4978:	00000043 	.word	0x00000043

0000497c <_global_impure_ptr>:
    497c:	20000040                                @.. 

00004980 <zeroes.6993>:
    4980:	30303030 30303030 30303030 30303030     0000000000000000
    4990:	33323130 37363534 42413938 46454443     0123456789ABCDEF
    49a0:	00000000 33323130 37363534 62613938     ....0123456789ab
    49b0:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

000049c0 <blanks.6992>:
    49c0:	20202020 20202020 20202020 20202020                     

000049d0 <_init>:
    49d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49d2:	bf00      	nop
    49d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    49d6:	bc08      	pop	{r3}
    49d8:	469e      	mov	lr, r3
    49da:	4770      	bx	lr

000049dc <__init_array_start>:
    49dc:	00002dc5 	.word	0x00002dc5

000049e0 <__frame_dummy_init_array_entry>:
    49e0:	000001a5                                ....

000049e4 <_fini>:
    49e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49e6:	bf00      	nop
    49e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    49ea:	bc08      	pop	{r3}
    49ec:	469e      	mov	lr, r3
    49ee:	4770      	bx	lr

000049f0 <__fini_array_start>:
    49f0:	00000181 	.word	0x00000181

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <bpm_ps_no_halt_exec>:
 */
RAMFUNC bool bpm_ps_no_halt_exec(Bpm *bpm, uint32_t pmcon)
{
	bool b_psok = false;
	bool b_timeout = false;
	BPM_UNLOCK(PMCON);
2000000c:	4a07      	ldr	r2, [pc, #28]	; (2000002c <bpm_ps_no_halt_exec+0x20>)
2000000e:	4b08      	ldr	r3, [pc, #32]	; (20000030 <bpm_ps_no_halt_exec+0x24>)
20000010:	619a      	str	r2, [r3, #24]
	bpm->BPM_PMCON = pmcon;
20000012:	61c1      	str	r1, [r0, #28]
	do {
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
20000014:	4619      	mov	r1, r3
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
20000016:	4a07      	ldr	r2, [pc, #28]	; (20000034 <bpm_ps_no_halt_exec+0x28>)
	bool b_psok = false;
	bool b_timeout = false;
	BPM_UNLOCK(PMCON);
	bpm->BPM_PMCON = pmcon;
	do {
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
20000018:	6948      	ldr	r0, [r1, #20]
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
2000001a:	6813      	ldr	r3, [r2, #0]
2000001c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
	} while (!b_psok && !b_timeout);
20000020:	f010 0001 	ands.w	r0, r0, #1
20000024:	d101      	bne.n	2000002a <bpm_ps_no_halt_exec+0x1e>
20000026:	2b00      	cmp	r3, #0
20000028:	d0f6      	beq.n	20000018 <bpm_ps_no_halt_exec+0xc>
	return b_psok;
}
2000002a:	4770      	bx	lr
2000002c:	aa00001c 	.word	0xaa00001c
20000030:	400f0000 	.word	0x400f0000
20000034:	e000e010 	.word	0xe000e010

20000038 <g_interrupt_enabled>:
20000038:	00000001 00000000                       ........

20000040 <impure_data>:
20000040:	00000000 2000032c 20000394 200003fc     ....,.. ... ... 
	...
20000074:	00004978 00000000 00000000 00000000     xI..............
	...
200000e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200000f8:	0005deec 0000000b 00000000 00000000     ................
	...

20000468 <_impure_ptr>:
20000468:	20000040                                @.. 

2000046c <lc_ctype_charset>:
2000046c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2000048c <__mb_cur_max>:
2000048c:	00000001                                ....

20000490 <__malloc_av_>:
	...
20000498:	20000490 20000490 20000498 20000498     ... ... ... ... 
200004a8:	200004a0 200004a0 200004a8 200004a8     ... ... ... ... 
200004b8:	200004b0 200004b0 200004b8 200004b8     ... ... ... ... 
200004c8:	200004c0 200004c0 200004c8 200004c8     ... ... ... ... 
200004d8:	200004d0 200004d0 200004d8 200004d8     ... ... ... ... 
200004e8:	200004e0 200004e0 200004e8 200004e8     ... ... ... ... 
200004f8:	200004f0 200004f0 200004f8 200004f8     ... ... ... ... 
20000508:	20000500 20000500 20000508 20000508     ... ... ... ... 
20000518:	20000510 20000510 20000518 20000518     ... ... ... ... 
20000528:	20000520 20000520 20000528 20000528      ..  .. (.. (.. 
20000538:	20000530 20000530 20000538 20000538     0.. 0.. 8.. 8.. 
20000548:	20000540 20000540 20000548 20000548     @.. @.. H.. H.. 
20000558:	20000550 20000550 20000558 20000558     P.. P.. X.. X.. 
20000568:	20000560 20000560 20000568 20000568     `.. `.. h.. h.. 
20000578:	20000570 20000570 20000578 20000578     p.. p.. x.. x.. 
20000588:	20000580 20000580 20000588 20000588     ... ... ... ... 
20000598:	20000590 20000590 20000598 20000598     ... ... ... ... 
200005a8:	200005a0 200005a0 200005a8 200005a8     ... ... ... ... 
200005b8:	200005b0 200005b0 200005b8 200005b8     ... ... ... ... 
200005c8:	200005c0 200005c0 200005c8 200005c8     ... ... ... ... 
200005d8:	200005d0 200005d0 200005d8 200005d8     ... ... ... ... 
200005e8:	200005e0 200005e0 200005e8 200005e8     ... ... ... ... 
200005f8:	200005f0 200005f0 200005f8 200005f8     ... ... ... ... 
20000608:	20000600 20000600 20000608 20000608     ... ... ... ... 
20000618:	20000610 20000610 20000618 20000618     ... ... ... ... 
20000628:	20000620 20000620 20000628 20000628      ..  .. (.. (.. 
20000638:	20000630 20000630 20000638 20000638     0.. 0.. 8.. 8.. 
20000648:	20000640 20000640 20000648 20000648     @.. @.. H.. H.. 
20000658:	20000650 20000650 20000658 20000658     P.. P.. X.. X.. 
20000668:	20000660 20000660 20000668 20000668     `.. `.. h.. h.. 
20000678:	20000670 20000670 20000678 20000678     p.. p.. x.. x.. 
20000688:	20000680 20000680 20000688 20000688     ... ... ... ... 
20000698:	20000690 20000690 20000698 20000698     ... ... ... ... 
200006a8:	200006a0 200006a0 200006a8 200006a8     ... ... ... ... 
200006b8:	200006b0 200006b0 200006b8 200006b8     ... ... ... ... 
200006c8:	200006c0 200006c0 200006c8 200006c8     ... ... ... ... 
200006d8:	200006d0 200006d0 200006d8 200006d8     ... ... ... ... 
200006e8:	200006e0 200006e0 200006e8 200006e8     ... ... ... ... 
200006f8:	200006f0 200006f0 200006f8 200006f8     ... ... ... ... 
20000708:	20000700 20000700 20000708 20000708     ... ... ... ... 
20000718:	20000710 20000710 20000718 20000718     ... ... ... ... 
20000728:	20000720 20000720 20000728 20000728      ..  .. (.. (.. 
20000738:	20000730 20000730 20000738 20000738     0.. 0.. 8.. 8.. 
20000748:	20000740 20000740 20000748 20000748     @.. @.. H.. H.. 
20000758:	20000750 20000750 20000758 20000758     P.. P.. X.. X.. 
20000768:	20000760 20000760 20000768 20000768     `.. `.. h.. h.. 
20000778:	20000770 20000770 20000778 20000778     p.. p.. x.. x.. 
20000788:	20000780 20000780 20000788 20000788     ... ... ... ... 
20000798:	20000790 20000790 20000798 20000798     ... ... ... ... 
200007a8:	200007a0 200007a0 200007a8 200007a8     ... ... ... ... 
200007b8:	200007b0 200007b0 200007b8 200007b8     ... ... ... ... 
200007c8:	200007c0 200007c0 200007c8 200007c8     ... ... ... ... 
200007d8:	200007d0 200007d0 200007d8 200007d8     ... ... ... ... 
200007e8:	200007e0 200007e0 200007e8 200007e8     ... ... ... ... 
200007f8:	200007f0 200007f0 200007f8 200007f8     ... ... ... ... 
20000808:	20000800 20000800 20000808 20000808     ... ... ... ... 
20000818:	20000810 20000810 20000818 20000818     ... ... ... ... 
20000828:	20000820 20000820 20000828 20000828      ..  .. (.. (.. 
20000838:	20000830 20000830 20000838 20000838     0.. 0.. 8.. 8.. 
20000848:	20000840 20000840 20000848 20000848     @.. @.. H.. H.. 
20000858:	20000850 20000850 20000858 20000858     P.. P.. X.. X.. 
20000868:	20000860 20000860 20000868 20000868     `.. `.. h.. h.. 
20000878:	20000870 20000870 20000878 20000878     p.. p.. x.. x.. 
20000888:	20000880 20000880 20000888 20000888     ... ... ... ... 

20000898 <__malloc_trim_threshold>:
20000898:	00020000                                ....

2000089c <__malloc_sbrk_base>:
2000089c:	ffffffff                                ....

200008a0 <__wctomb>:
200008a0:	0000469d                                .F..
