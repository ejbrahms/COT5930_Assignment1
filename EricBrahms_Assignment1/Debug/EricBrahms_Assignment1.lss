
EricBrahms_Assignment1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000046e4  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000046e4  000046e4  000146e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000894  20000000  000046ec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000009c  20000894  00004f80  00020894  2**2
                  ALLOC
  4 .stack        00001000  20000930  0000501c  00020894  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020894  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000208be  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000a682  00000000  00000000  00020917  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000191b  00000000  00000000  0002af99  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000039ea  00000000  00000000  0002c8b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000628  00000000  00000000  0003029e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000588  00000000  00000000  000308c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002db80  00000000  00000000  00030e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000aca8  00000000  00000000  0005e9ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000e602c  00000000  00000000  00069676  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000019c8  00000000  00000000  0014f6a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
       0:	20001930 	.word	0x20001930
       4:	00001331 	.word	0x00001331
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
       8:	0000132d 	.word	0x0000132d
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
       c:	0000132d 	.word	0x0000132d
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
      10:	0000132d 	.word	0x0000132d
		if (cpu_irq_is_enabled()) {
			cpu_irq_disable();
      14:	0000132d 	.word	0x0000132d
			cpu_irq_prev_interrupt_state = true;
      18:	0000132d 	.word	0x0000132d
	...
			cpu_irq_prev_interrupt_state = false;
		}

	}

	cpu_irq_critical_section_counter++;
      2c:	0000132d 	.word	0x0000132d
      30:	0000132d 	.word	0x0000132d
      34:	00000000 	.word	0x00000000
      38:	0000132d 	.word	0x0000132d
      3c:	0000132d 	.word	0x0000132d
      40:	0000132d 	.word	0x0000132d
      44:	0000132d 	.word	0x0000132d
      48:	0000132d 	.word	0x0000132d
      4c:	0000132d 	.word	0x0000132d
      50:	0000132d 	.word	0x0000132d
      54:	0000132d 	.word	0x0000132d
      58:	0000132d 	.word	0x0000132d
      5c:	0000132d 	.word	0x0000132d
      60:	0000132d 	.word	0x0000132d
      64:	0000132d 	.word	0x0000132d
      68:	0000132d 	.word	0x0000132d
      6c:	0000132d 	.word	0x0000132d
      70:	0000132d 	.word	0x0000132d
      74:	0000132d 	.word	0x0000132d
      78:	0000132d 	.word	0x0000132d
      7c:	0000132d 	.word	0x0000132d
      80:	0000132d 	.word	0x0000132d
      84:	0000132d 	.word	0x0000132d
      88:	0000132d 	.word	0x0000132d
      8c:	0000132d 	.word	0x0000132d
      90:	0000132d 	.word	0x0000132d
      94:	0000132d 	.word	0x0000132d
      98:	0000132d 	.word	0x0000132d
      9c:	0000132d 	.word	0x0000132d
      a0:	0000132d 	.word	0x0000132d
      a4:	000003f9 	.word	0x000003f9
      a8:	00000409 	.word	0x00000409
      ac:	0000041d 	.word	0x0000041d
      b0:	00000431 	.word	0x00000431
      b4:	00000445 	.word	0x00000445
      b8:	00000455 	.word	0x00000455
      bc:	00000469 	.word	0x00000469
      c0:	0000047d 	.word	0x0000047d
      c4:	00000491 	.word	0x00000491
      c8:	000004a1 	.word	0x000004a1
      cc:	000004b5 	.word	0x000004b5
      d0:	000004c9 	.word	0x000004c9
      d4:	0000132d 	.word	0x0000132d
      d8:	0000132d 	.word	0x0000132d
      dc:	0000132d 	.word	0x0000132d
      e0:	0000132d 	.word	0x0000132d
      e4:	0000132d 	.word	0x0000132d
      e8:	0000132d 	.word	0x0000132d
      ec:	0000132d 	.word	0x0000132d
      f0:	0000132d 	.word	0x0000132d
      f4:	0000132d 	.word	0x0000132d
      f8:	0000132d 	.word	0x0000132d
      fc:	0000132d 	.word	0x0000132d
     100:	0000132d 	.word	0x0000132d
     104:	0000132d 	.word	0x0000132d
     108:	0000132d 	.word	0x0000132d
     10c:	0000132d 	.word	0x0000132d
     110:	0000132d 	.word	0x0000132d
     114:	0000132d 	.word	0x0000132d
     118:	0000132d 	.word	0x0000132d
     11c:	0000132d 	.word	0x0000132d
     120:	0000132d 	.word	0x0000132d
     124:	0000132d 	.word	0x0000132d
     128:	0000132d 	.word	0x0000132d
     12c:	0000132d 	.word	0x0000132d
     130:	0000132d 	.word	0x0000132d
     134:	0000132d 	.word	0x0000132d
     138:	0000132d 	.word	0x0000132d
     13c:	0000132d 	.word	0x0000132d
     140:	0000132d 	.word	0x0000132d
     144:	0000132d 	.word	0x0000132d
     148:	0000132d 	.word	0x0000132d
     14c:	0000132d 	.word	0x0000132d
     150:	0000132d 	.word	0x0000132d
     154:	0000132d 	.word	0x0000132d
     158:	0000132d 	.word	0x0000132d
     15c:	0000132d 	.word	0x0000132d
     160:	0000132d 	.word	0x0000132d
     164:	0000132d 	.word	0x0000132d
     168:	0000132d 	.word	0x0000132d
     16c:	0000132d 	.word	0x0000132d
     170:	0000132d 	.word	0x0000132d
     174:	0000132d 	.word	0x0000132d
     178:	0000132d 	.word	0x0000132d
     17c:	0000132d 	.word	0x0000132d

00000180 <__do_global_dtors_aux>:
     180:	b510      	push	{r4, lr}
     182:	4c05      	ldr	r4, [pc, #20]	; (198 <__do_global_dtors_aux+0x18>)
     184:	7823      	ldrb	r3, [r4, #0]
     186:	b933      	cbnz	r3, 196 <__do_global_dtors_aux+0x16>
     188:	4b04      	ldr	r3, [pc, #16]	; (19c <__do_global_dtors_aux+0x1c>)
     18a:	b113      	cbz	r3, 192 <__do_global_dtors_aux+0x12>
     18c:	4804      	ldr	r0, [pc, #16]	; (1a0 <__do_global_dtors_aux+0x20>)
     18e:	f3af 8000 	nop.w
     192:	2301      	movs	r3, #1
     194:	7023      	strb	r3, [r4, #0]
     196:	bd10      	pop	{r4, pc}
     198:	20000894 	.word	0x20000894
     19c:	00000000 	.word	0x00000000
     1a0:	000046ec 	.word	0x000046ec

000001a4 <frame_dummy>:
     1a4:	4b08      	ldr	r3, [pc, #32]	; (1c8 <frame_dummy+0x24>)
     1a6:	b510      	push	{r4, lr}
     1a8:	b11b      	cbz	r3, 1b2 <frame_dummy+0xe>
     1aa:	4908      	ldr	r1, [pc, #32]	; (1cc <frame_dummy+0x28>)
     1ac:	4808      	ldr	r0, [pc, #32]	; (1d0 <frame_dummy+0x2c>)
     1ae:	f3af 8000 	nop.w
     1b2:	4808      	ldr	r0, [pc, #32]	; (1d4 <frame_dummy+0x30>)
     1b4:	6803      	ldr	r3, [r0, #0]
     1b6:	b903      	cbnz	r3, 1ba <frame_dummy+0x16>
     1b8:	bd10      	pop	{r4, pc}
     1ba:	4b07      	ldr	r3, [pc, #28]	; (1d8 <frame_dummy+0x34>)
     1bc:	2b00      	cmp	r3, #0
     1be:	d0fb      	beq.n	1b8 <frame_dummy+0x14>
     1c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     1c4:	4718      	bx	r3
     1c6:	bf00      	nop
     1c8:	00000000 	.word	0x00000000
     1cc:	20000898 	.word	0x20000898
     1d0:	000046ec 	.word	0x000046ec
     1d4:	000046ec 	.word	0x000046ec
     1d8:	00000000 	.word	0x00000000

000001dc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
     1dc:	b990      	cbnz	r0, 204 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     1de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     1e2:	460c      	mov	r4, r1
     1e4:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     1e6:	2a00      	cmp	r2, #0
     1e8:	dd0f      	ble.n	20a <_read+0x2e>
     1ea:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     1ec:	4e08      	ldr	r6, [pc, #32]	; (210 <_read+0x34>)
     1ee:	4d09      	ldr	r5, [pc, #36]	; (214 <_read+0x38>)
     1f0:	6830      	ldr	r0, [r6, #0]
     1f2:	4621      	mov	r1, r4
     1f4:	682b      	ldr	r3, [r5, #0]
     1f6:	4798      	blx	r3
		ptr++;
     1f8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     1fa:	42a7      	cmp	r7, r4
     1fc:	d1f8      	bne.n	1f0 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
     1fe:	4640      	mov	r0, r8
     200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     204:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
     208:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     20a:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
     20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     210:	20000928 	.word	0x20000928
     214:	20000920 	.word	0x20000920

00000218 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
     218:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
     21a:	010c      	lsls	r4, r1, #4
     21c:	4294      	cmp	r4, r2
     21e:	d90f      	bls.n	240 <usart_set_async_baudrate+0x28>
     220:	e01a      	b.n	258 <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
     222:	6841      	ldr	r1, [r0, #4]
     224:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
     228:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
     22a:	0412      	lsls	r2, r2, #16
     22c:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
     230:	431a      	orrs	r2, r3
     232:	6202      	str	r2, [r0, #32]

	return 0;
     234:	2000      	movs	r0, #0
     236:	e01c      	b.n	272 <usart_set_async_baudrate+0x5a>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
     238:	2001      	movs	r0, #1
     23a:	e01a      	b.n	272 <usart_set_async_baudrate+0x5a>
     23c:	2001      	movs	r0, #1
     23e:	e018      	b.n	272 <usart_set_async_baudrate+0x5a>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
     240:	0863      	lsrs	r3, r4, #1
     242:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
     246:	fbb2 f2f4 	udiv	r2, r2, r4
	cd = cd_fp >> 3;
     24a:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
     24c:	1e5c      	subs	r4, r3, #1
     24e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
     252:	428c      	cmp	r4, r1
     254:	d9e9      	bls.n	22a <usart_set_async_baudrate+0x12>
     256:	e7ef      	b.n	238 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
     258:	00c9      	lsls	r1, r1, #3
     25a:	084b      	lsrs	r3, r1, #1
     25c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
     260:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
     264:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
     266:	1e5c      	subs	r4, r3, #1
     268:	f64f 71fe 	movw	r1, #65534	; 0xfffe
     26c:	428c      	cmp	r4, r1
     26e:	d8e5      	bhi.n	23c <usart_set_async_baudrate+0x24>
     270:	e7d7      	b.n	222 <usart_set_async_baudrate+0xa>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
     272:	bc10      	pop	{r4}
     274:	4770      	bx	lr
     276:	bf00      	nop

00000278 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
     278:	4b0a      	ldr	r3, [pc, #40]	; (2a4 <usart_reset+0x2c>)
     27a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
     27e:	2300      	movs	r3, #0
     280:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
     282:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
     284:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
     286:	2388      	movs	r3, #136	; 0x88
     288:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
     28a:	2324      	movs	r3, #36	; 0x24
     28c:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
     28e:	f44f 7380 	mov.w	r3, #256	; 0x100
     292:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
     294:	f44f 2300 	mov.w	r3, #524288	; 0x80000
     298:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_DTRDIS;
     29a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
     29e:	6003      	str	r3, [r0, #0]
     2a0:	4770      	bx	lr
     2a2:	bf00      	nop
     2a4:	55534100 	.word	0x55534100

000002a8 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
     2a8:	b570      	push	{r4, r5, r6, lr}
     2aa:	4605      	mov	r5, r0
     2ac:	460c      	mov	r4, r1
     2ae:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
     2b0:	4b0f      	ldr	r3, [pc, #60]	; (2f0 <usart_init_rs232+0x48>)
     2b2:	4798      	blx	r3

	ul_reg_val = 0;
     2b4:	2200      	movs	r2, #0
     2b6:	4b0f      	ldr	r3, [pc, #60]	; (2f4 <usart_init_rs232+0x4c>)
     2b8:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
     2ba:	b19c      	cbz	r4, 2e4 <usart_init_rs232+0x3c>
     2bc:	4632      	mov	r2, r6
     2be:	6821      	ldr	r1, [r4, #0]
     2c0:	4628      	mov	r0, r5
     2c2:	4b0d      	ldr	r3, [pc, #52]	; (2f8 <usart_init_rs232+0x50>)
     2c4:	4798      	blx	r3
     2c6:	4602      	mov	r2, r0
     2c8:	b970      	cbnz	r0, 2e8 <usart_init_rs232+0x40>
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
     2ca:	6861      	ldr	r1, [r4, #4]
     2cc:	68a3      	ldr	r3, [r4, #8]
     2ce:	4319      	orrs	r1, r3
     2d0:	6923      	ldr	r3, [r4, #16]
     2d2:	4319      	orrs	r1, r3
     2d4:	68e3      	ldr	r3, [r4, #12]
     2d6:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
     2d8:	4906      	ldr	r1, [pc, #24]	; (2f4 <usart_init_rs232+0x4c>)
     2da:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
     2dc:	6869      	ldr	r1, [r5, #4]
     2de:	430b      	orrs	r3, r1
     2e0:	606b      	str	r3, [r5, #4]

	return 0;
     2e2:	e002      	b.n	2ea <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
     2e4:	2201      	movs	r2, #1
     2e6:	e000      	b.n	2ea <usart_init_rs232+0x42>
     2e8:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
     2ea:	4610      	mov	r0, r2
     2ec:	bd70      	pop	{r4, r5, r6, pc}
     2ee:	bf00      	nop
     2f0:	00000279 	.word	0x00000279
     2f4:	200008b0 	.word	0x200008b0
     2f8:	00000219 	.word	0x00000219

000002fc <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
     2fc:	2340      	movs	r3, #64	; 0x40
     2fe:	6003      	str	r3, [r0, #0]
     300:	4770      	bx	lr
     302:	bf00      	nop

00000304 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
     304:	2310      	movs	r3, #16
     306:	6003      	str	r3, [r0, #0]
     308:	4770      	bx	lr
     30a:	bf00      	nop

0000030c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
     30c:	6943      	ldr	r3, [r0, #20]
     30e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
     312:	bf1d      	ittte	ne
     314:	f3c1 0108 	ubfxne	r1, r1, #0, #9
     318:	61c1      	strne	r1, [r0, #28]
	return 0;
     31a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
     31c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
     31e:	4770      	bx	lr

00000320 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
     320:	6943      	ldr	r3, [r0, #20]
     322:	f013 0f01 	tst.w	r3, #1
     326:	d005      	beq.n	334 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
     328:	6983      	ldr	r3, [r0, #24]
     32a:	f3c3 0308 	ubfx	r3, r3, #0, #9
     32e:	600b      	str	r3, [r1, #0]

	return 0;
     330:	2000      	movs	r0, #0
     332:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
     334:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
     336:	4770      	bx	lr

00000338 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     338:	3801      	subs	r0, #1
     33a:	2802      	cmp	r0, #2
     33c:	d815      	bhi.n	36a <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
     33e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     342:	460e      	mov	r6, r1
     344:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     346:	b19a      	cbz	r2, 370 <_write+0x38>
     348:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
     34a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 384 <_write+0x4c>
     34e:	4f0c      	ldr	r7, [pc, #48]	; (380 <_write+0x48>)
     350:	f8d8 0000 	ldr.w	r0, [r8]
     354:	f815 1b01 	ldrb.w	r1, [r5], #1
     358:	683b      	ldr	r3, [r7, #0]
     35a:	4798      	blx	r3
     35c:	2800      	cmp	r0, #0
     35e:	db0a      	blt.n	376 <_write+0x3e>
     360:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     362:	3c01      	subs	r4, #1
     364:	d1f4      	bne.n	350 <_write+0x18>
     366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     36a:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
     36e:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     370:	2000      	movs	r0, #0
     372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     376:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
     37a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     37e:	bf00      	nop
     380:	20000924 	.word	0x20000924
     384:	20000928 	.word	0x20000928

00000388 <gpio_common_handler>:

/**
 * Common GPIO handler.
 */
static void gpio_common_handler(uint32_t port_id, uint32_t port_mask)
{
     388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     38c:	b083      	sub	sp, #12
     38e:	9101      	str	r1, [sp, #4]
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[port_id]);
     390:	0247      	lsls	r7, r0, #9
     392:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
     396:	f507 2761 	add.w	r7, r7, #921600	; 0xe1000
	uint32_t i;
	uint32_t int_flags;
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;
     39a:	f8d7 a0d0 	ldr.w	sl, [r7, #208]	; 0xd0

	for (i = 0; i < gpio_nb_sources; i++) {
     39e:	4b14      	ldr	r3, [pc, #80]	; (3f0 <gpio_common_handler+0x68>)
     3a0:	681b      	ldr	r3, [r3, #0]
     3a2:	b1e3      	cbz	r3, 3de <gpio_common_handler+0x56>
     3a4:	4606      	mov	r6, r0
     3a6:	4d13      	ldr	r5, [pc, #76]	; (3f4 <gpio_common_handler+0x6c>)
     3a8:	2400      	movs	r4, #0
		pin = gpio_int_sources[i].pin;
     3aa:	46a9      	mov	r9, r5
		if ((ioport_pin_to_port_id(pin) == port_id) &&
     3ac:	f04f 0b01 	mov.w	fp, #1
	uint32_t int_flags;
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;

	for (i = 0; i < gpio_nb_sources; i++) {
     3b0:	f8df 803c 	ldr.w	r8, [pc, #60]	; 3f0 <gpio_common_handler+0x68>
		pin = gpio_int_sources[i].pin;
     3b4:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
		if ((ioport_pin_to_port_id(pin) == port_id) &&
     3b8:	ebb6 1f53 	cmp.w	r6, r3, lsr #5
     3bc:	d109      	bne.n	3d2 <gpio_common_handler+0x4a>
     3be:	f003 031f 	and.w	r3, r3, #31
     3c2:	fa0b f303 	lsl.w	r3, fp, r3
     3c6:	ea13 0f0a 	tst.w	r3, sl
     3ca:	d002      	beq.n	3d2 <gpio_common_handler+0x4a>
				(ioport_pin_to_mask(pin) & int_flags)) {
			if (gpio_int_sources[i].callback != NULL) {
     3cc:	686b      	ldr	r3, [r5, #4]
     3ce:	b103      	cbz	r3, 3d2 <gpio_common_handler+0x4a>
				gpio_int_sources[i].callback();
     3d0:	4798      	blx	r3
	uint32_t int_flags;
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;

	for (i = 0; i < gpio_nb_sources; i++) {
     3d2:	3401      	adds	r4, #1
     3d4:	3508      	adds	r5, #8
     3d6:	f8d8 3000 	ldr.w	r3, [r8]
     3da:	42a3      	cmp	r3, r4
     3dc:	d8ea      	bhi.n	3b4 <gpio_common_handler+0x2c>
				Assert(false); /* Catch unexpected interrupt */
			}
		}
	}

	gpio_port->GPIO_IFRC = (int_flags & port_mask);
     3de:	9b01      	ldr	r3, [sp, #4]
     3e0:	ea0a 0303 	and.w	r3, sl, r3
     3e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
}
     3e8:	b003      	add	sp, #12
     3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     3ee:	bf00      	nop
     3f0:	200008b4 	.word	0x200008b4
     3f4:	200008b8 	.word	0x200008b8

000003f8 <GPIO_0_Handler>:

/**
 * GPIO handler 0 (PA 0..7)
 */
void GPIO_0_Handler(void)
{
     3f8:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, GPIO_INT_GROUP_MASK);
     3fa:	21ff      	movs	r1, #255	; 0xff
     3fc:	2000      	movs	r0, #0
     3fe:	4b01      	ldr	r3, [pc, #4]	; (404 <GPIO_0_Handler+0xc>)
     400:	4798      	blx	r3
     402:	bd08      	pop	{r3, pc}
     404:	00000389 	.word	0x00000389

00000408 <GPIO_1_Handler>:

/**
 * GPIO handler 1 (PA 8..15)
 */
void GPIO_1_Handler(void)
{
     408:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 8));
     40a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
     40e:	2000      	movs	r0, #0
     410:	4b01      	ldr	r3, [pc, #4]	; (418 <GPIO_1_Handler+0x10>)
     412:	4798      	blx	r3
     414:	bd08      	pop	{r3, pc}
     416:	bf00      	nop
     418:	00000389 	.word	0x00000389

0000041c <GPIO_2_Handler>:

/**
 * GPIO handler 2 (PA 16..23)
 */
void GPIO_2_Handler(void)
{
     41c:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 16));
     41e:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
     422:	2000      	movs	r0, #0
     424:	4b01      	ldr	r3, [pc, #4]	; (42c <GPIO_2_Handler+0x10>)
     426:	4798      	blx	r3
     428:	bd08      	pop	{r3, pc}
     42a:	bf00      	nop
     42c:	00000389 	.word	0x00000389

00000430 <GPIO_3_Handler>:

/**
 * GPIO handler 3 (PA 24..31)
 */
void GPIO_3_Handler(void)
{
     430:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 24));
     432:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
     436:	2000      	movs	r0, #0
     438:	4b01      	ldr	r3, [pc, #4]	; (440 <GPIO_3_Handler+0x10>)
     43a:	4798      	blx	r3
     43c:	bd08      	pop	{r3, pc}
     43e:	bf00      	nop
     440:	00000389 	.word	0x00000389

00000444 <GPIO_4_Handler>:

/**
 * GPIO handler 4 (PB 0..7)
 */
void GPIO_4_Handler(void)
{
     444:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, GPIO_INT_GROUP_MASK);
     446:	21ff      	movs	r1, #255	; 0xff
     448:	2001      	movs	r0, #1
     44a:	4b01      	ldr	r3, [pc, #4]	; (450 <GPIO_4_Handler+0xc>)
     44c:	4798      	blx	r3
     44e:	bd08      	pop	{r3, pc}
     450:	00000389 	.word	0x00000389

00000454 <GPIO_5_Handler>:

/**
 * GPIO handler 5 (PB 8..15)
 */
void GPIO_5_Handler(void)
{
     454:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 8));
     456:	f44f 417f 	mov.w	r1, #65280	; 0xff00
     45a:	2001      	movs	r0, #1
     45c:	4b01      	ldr	r3, [pc, #4]	; (464 <GPIO_5_Handler+0x10>)
     45e:	4798      	blx	r3
     460:	bd08      	pop	{r3, pc}
     462:	bf00      	nop
     464:	00000389 	.word	0x00000389

00000468 <GPIO_6_Handler>:

/**
 * GPIO handler 6 (PB 16..23)
 */
void GPIO_6_Handler(void)
{
     468:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 16));
     46a:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
     46e:	2001      	movs	r0, #1
     470:	4b01      	ldr	r3, [pc, #4]	; (478 <GPIO_6_Handler+0x10>)
     472:	4798      	blx	r3
     474:	bd08      	pop	{r3, pc}
     476:	bf00      	nop
     478:	00000389 	.word	0x00000389

0000047c <GPIO_7_Handler>:

/**
 * GPIO handler 7 (PB 24..31)
 */
void GPIO_7_Handler(void)
{
     47c:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 24));
     47e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
     482:	2001      	movs	r0, #1
     484:	4b01      	ldr	r3, [pc, #4]	; (48c <GPIO_7_Handler+0x10>)
     486:	4798      	blx	r3
     488:	bd08      	pop	{r3, pc}
     48a:	bf00      	nop
     48c:	00000389 	.word	0x00000389

00000490 <GPIO_8_Handler>:

/**
 * GPIO handler 8 (PC 0..7)
 */
void GPIO_8_Handler(void)
{
     490:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, GPIO_INT_GROUP_MASK);
     492:	21ff      	movs	r1, #255	; 0xff
     494:	2002      	movs	r0, #2
     496:	4b01      	ldr	r3, [pc, #4]	; (49c <GPIO_8_Handler+0xc>)
     498:	4798      	blx	r3
     49a:	bd08      	pop	{r3, pc}
     49c:	00000389 	.word	0x00000389

000004a0 <GPIO_9_Handler>:

/**
 * GPIO handler 9 (PC 8..15)
 */
void GPIO_9_Handler(void)
{
     4a0:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 8));
     4a2:	f44f 417f 	mov.w	r1, #65280	; 0xff00
     4a6:	2002      	movs	r0, #2
     4a8:	4b01      	ldr	r3, [pc, #4]	; (4b0 <GPIO_9_Handler+0x10>)
     4aa:	4798      	blx	r3
     4ac:	bd08      	pop	{r3, pc}
     4ae:	bf00      	nop
     4b0:	00000389 	.word	0x00000389

000004b4 <GPIO_10_Handler>:

/**
 * GPIO handler 10 (PC 16..23)
 */
void GPIO_10_Handler(void)
{
     4b4:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 16));
     4b6:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
     4ba:	2002      	movs	r0, #2
     4bc:	4b01      	ldr	r3, [pc, #4]	; (4c4 <GPIO_10_Handler+0x10>)
     4be:	4798      	blx	r3
     4c0:	bd08      	pop	{r3, pc}
     4c2:	bf00      	nop
     4c4:	00000389 	.word	0x00000389

000004c8 <GPIO_11_Handler>:

/**
 * GPIO handler 11 (PC 24..31)
 */
void GPIO_11_Handler(void)
{
     4c8:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 24));
     4ca:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
     4ce:	2002      	movs	r0, #2
     4d0:	4b01      	ldr	r3, [pc, #4]	; (4d8 <GPIO_11_Handler+0x10>)
     4d2:	4798      	blx	r3
     4d4:	bd08      	pop	{r3, pc}
     4d6:	bf00      	nop
     4d8:	00000389 	.word	0x00000389

000004dc <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(uint32_t bus_id, uint32_t module_index)
{
     4dc:	b470      	push	{r4, r5, r6}
     4de:	b083      	sub	sp, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     4e0:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     4e4:	fab3 f383 	clz	r3, r3
     4e8:	095b      	lsrs	r3, r3, #5
     4ea:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     4ec:	b672      	cpsid	i
     4ee:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     4f2:	2200      	movs	r2, #0
     4f4:	4b0e      	ldr	r3, [pc, #56]	; (530 <sysclk_priv_enable_module+0x54>)
     4f6:	701a      	strb	r2, [r3, #0]
	return flags;
     4f8:	9e01      	ldr	r6, [sp, #4]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
     4fa:	0083      	lsls	r3, r0, #2
     4fc:	4d0d      	ldr	r5, [pc, #52]	; (534 <sysclk_priv_enable_module+0x58>)
     4fe:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
	mask |= 1U << module_index;
     502:	2401      	movs	r4, #1
     504:	fa04 f101 	lsl.w	r1, r4, r1
     508:	4311      	orrs	r1, r2
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
     50a:	3320      	adds	r3, #32
     50c:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
     510:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
     514:	4a08      	ldr	r2, [pc, #32]	; (538 <sysclk_priv_enable_module+0x5c>)
     516:	6593      	str	r3, [r2, #88]	; 0x58
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
	*(&PM->PM_CPUMASK + bus_id) = mask;
     518:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     51c:	b126      	cbz	r6, 528 <sysclk_priv_enable_module+0x4c>
		cpu_irq_enable();
     51e:	4b04      	ldr	r3, [pc, #16]	; (530 <sysclk_priv_enable_module+0x54>)
     520:	701c      	strb	r4, [r3, #0]
     522:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     526:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
     528:	b003      	add	sp, #12
     52a:	bc70      	pop	{r4, r5, r6}
     52c:	4770      	bx	lr
     52e:	bf00      	nop
     530:	2000002c 	.word	0x2000002c
     534:	400e0020 	.word	0x400e0020
     538:	400e0000 	.word	0x400e0000

0000053c <sysclk_priv_disable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be disabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_disable_module(uint32_t bus_id, uint32_t module_index)
{
     53c:	b470      	push	{r4, r5, r6}
     53e:	b083      	sub	sp, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     540:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     544:	fab3 f383 	clz	r3, r3
     548:	095b      	lsrs	r3, r3, #5
     54a:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     54c:	b672      	cpsid	i
     54e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     552:	2200      	movs	r2, #0
     554:	4b0e      	ldr	r3, [pc, #56]	; (590 <sysclk_priv_disable_module+0x54>)
     556:	701a      	strb	r2, [r3, #0]
	return flags;
     558:	9e01      	ldr	r6, [sp, #4]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Disable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
     55a:	0083      	lsls	r3, r0, #2
     55c:	4d0d      	ldr	r5, [pc, #52]	; (594 <sysclk_priv_disable_module+0x58>)
     55e:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
	mask &= ~(1U << module_index);
     562:	2401      	movs	r4, #1
     564:	fa04 f101 	lsl.w	r1, r4, r1
     568:	ea22 0101 	bic.w	r1, r2, r1
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
     56c:	3320      	adds	r3, #32
     56e:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
     572:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
     576:	4a08      	ldr	r2, [pc, #32]	; (598 <sysclk_priv_disable_module+0x5c>)
     578:	6593      	str	r3, [r2, #88]	; 0x58
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
	*(&PM->PM_CPUMASK + bus_id) = mask;
     57a:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     57e:	b126      	cbz	r6, 58a <sysclk_priv_disable_module+0x4e>
		cpu_irq_enable();
     580:	4b03      	ldr	r3, [pc, #12]	; (590 <sysclk_priv_disable_module+0x54>)
     582:	701c      	strb	r4, [r3, #0]
     584:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     588:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
     58a:	b003      	add	sp, #12
     58c:	bc70      	pop	{r4, r5, r6}
     58e:	4770      	bx	lr
     590:	2000002c 	.word	0x2000002c
     594:	400e0020 	.word	0x400e0020
     598:	400e0000 	.word	0x400e0000

0000059c <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_enable_pba_module(uint32_t module_index)
{
     59c:	b530      	push	{r4, r5, lr}
     59e:	b083      	sub	sp, #12
     5a0:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     5a2:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     5a6:	fab3 f383 	clz	r3, r3
     5aa:	095b      	lsrs	r3, r3, #5
     5ac:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     5ae:	b672      	cpsid	i
     5b0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     5b4:	2200      	movs	r2, #0
     5b6:	4b0b      	ldr	r3, [pc, #44]	; (5e4 <sysclk_enable_pba_module+0x48>)
     5b8:	701a      	strb	r2, [r3, #0]
	return flags;
     5ba:	9d01      	ldr	r5, [sp, #4]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBAMASK == 0) {
     5bc:	4b0a      	ldr	r3, [pc, #40]	; (5e8 <sysclk_enable_pba_module+0x4c>)
     5be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     5c0:	b91b      	cbnz	r3, 5ca <sysclk_enable_pba_module+0x2e>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
     5c2:	2105      	movs	r1, #5
     5c4:	2001      	movs	r0, #1
     5c6:	4b09      	ldr	r3, [pc, #36]	; (5ec <sysclk_enable_pba_module+0x50>)
     5c8:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     5ca:	b12d      	cbz	r5, 5d8 <sysclk_enable_pba_module+0x3c>
		cpu_irq_enable();
     5cc:	2201      	movs	r2, #1
     5ce:	4b05      	ldr	r3, [pc, #20]	; (5e4 <sysclk_enable_pba_module+0x48>)
     5d0:	701a      	strb	r2, [r3, #0]
     5d2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     5d6:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBA, module_index);
     5d8:	4621      	mov	r1, r4
     5da:	2002      	movs	r0, #2
     5dc:	4b03      	ldr	r3, [pc, #12]	; (5ec <sysclk_enable_pba_module+0x50>)
     5de:	4798      	blx	r3
}
     5e0:	b003      	add	sp, #12
     5e2:	bd30      	pop	{r4, r5, pc}
     5e4:	2000002c 	.word	0x2000002c
     5e8:	400e0000 	.word	0x400e0000
     5ec:	000004dd 	.word	0x000004dd

000005f0 <sysclk_disable_pba_module>:
/**
 * \brief Disable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_disable_pba_module(uint32_t module_index)
{
     5f0:	b510      	push	{r4, lr}
     5f2:	b082      	sub	sp, #8
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBA, module_index);
     5f4:	4601      	mov	r1, r0
     5f6:	2002      	movs	r0, #2
     5f8:	4b0f      	ldr	r3, [pc, #60]	; (638 <sysclk_disable_pba_module+0x48>)
     5fa:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     5fc:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     600:	fab3 f383 	clz	r3, r3
     604:	095b      	lsrs	r3, r3, #5
     606:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     608:	b672      	cpsid	i
     60a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     60e:	2200      	movs	r2, #0
     610:	4b0a      	ldr	r3, [pc, #40]	; (63c <sysclk_disable_pba_module+0x4c>)
     612:	701a      	strb	r2, [r3, #0]
	return flags;
     614:	9c01      	ldr	r4, [sp, #4]

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	if (PM->PM_PBAMASK == 0) {
     616:	4b0a      	ldr	r3, [pc, #40]	; (640 <sysclk_disable_pba_module+0x50>)
     618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     61a:	b91b      	cbnz	r3, 624 <sysclk_disable_pba_module+0x34>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
     61c:	2105      	movs	r1, #5
     61e:	2001      	movs	r0, #1
     620:	4b05      	ldr	r3, [pc, #20]	; (638 <sysclk_disable_pba_module+0x48>)
     622:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     624:	b12c      	cbz	r4, 632 <sysclk_disable_pba_module+0x42>
		cpu_irq_enable();
     626:	2201      	movs	r2, #1
     628:	4b04      	ldr	r3, [pc, #16]	; (63c <sysclk_disable_pba_module+0x4c>)
     62a:	701a      	strb	r2, [r3, #0]
     62c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     630:	b662      	cpsie	i
		sysclk_disable_hsb_module(SYSCLK_PBA_BRIDGE);
	}

	cpu_irq_restore(flags);
}
     632:	b002      	add	sp, #8
     634:	bd10      	pop	{r4, pc}
     636:	bf00      	nop
     638:	0000053d 	.word	0x0000053d
     63c:	2000002c 	.word	0x2000002c
     640:	400e0000 	.word	0x400e0000

00000644 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(uint32_t module_index)
{
     644:	b530      	push	{r4, r5, lr}
     646:	b083      	sub	sp, #12
     648:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     64a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     64e:	fab3 f383 	clz	r3, r3
     652:	095b      	lsrs	r3, r3, #5
     654:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     656:	b672      	cpsid	i
     658:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     65c:	2200      	movs	r2, #0
     65e:	4b0b      	ldr	r3, [pc, #44]	; (68c <sysclk_enable_pbb_module+0x48>)
     660:	701a      	strb	r2, [r3, #0]
	return flags;
     662:	9d01      	ldr	r5, [sp, #4]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBBMASK == 0) {
     664:	4b0a      	ldr	r3, [pc, #40]	; (690 <sysclk_enable_pbb_module+0x4c>)
     666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     668:	b91b      	cbnz	r3, 672 <sysclk_enable_pbb_module+0x2e>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
     66a:	2106      	movs	r1, #6
     66c:	2001      	movs	r0, #1
     66e:	4b09      	ldr	r3, [pc, #36]	; (694 <sysclk_enable_pbb_module+0x50>)
     670:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     672:	b12d      	cbz	r5, 680 <sysclk_enable_pbb_module+0x3c>
		cpu_irq_enable();
     674:	2201      	movs	r2, #1
     676:	4b05      	ldr	r3, [pc, #20]	; (68c <sysclk_enable_pbb_module+0x48>)
     678:	701a      	strb	r2, [r3, #0]
     67a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     67e:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBB, module_index);
     680:	4621      	mov	r1, r4
     682:	2003      	movs	r0, #3
     684:	4b03      	ldr	r3, [pc, #12]	; (694 <sysclk_enable_pbb_module+0x50>)
     686:	4798      	blx	r3
}
     688:	b003      	add	sp, #12
     68a:	bd30      	pop	{r4, r5, pc}
     68c:	2000002c 	.word	0x2000002c
     690:	400e0000 	.word	0x400e0000
     694:	000004dd 	.word	0x000004dd

00000698 <sysclk_disable_pbb_module>:
/**
 * \brief Disable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_disable_pbb_module(uint32_t module_index)
{
     698:	b510      	push	{r4, lr}
     69a:	b082      	sub	sp, #8
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBB, module_index);
     69c:	4601      	mov	r1, r0
     69e:	2003      	movs	r0, #3
     6a0:	4b0f      	ldr	r3, [pc, #60]	; (6e0 <sysclk_disable_pbb_module+0x48>)
     6a2:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     6a4:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     6a8:	fab3 f383 	clz	r3, r3
     6ac:	095b      	lsrs	r3, r3, #5
     6ae:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     6b0:	b672      	cpsid	i
     6b2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     6b6:	2200      	movs	r2, #0
     6b8:	4b0a      	ldr	r3, [pc, #40]	; (6e4 <sysclk_disable_pbb_module+0x4c>)
     6ba:	701a      	strb	r2, [r3, #0]
	return flags;
     6bc:	9c01      	ldr	r4, [sp, #4]

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	if (PM->PM_PBBMASK == 0) {
     6be:	4b0a      	ldr	r3, [pc, #40]	; (6e8 <sysclk_disable_pbb_module+0x50>)
     6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     6c2:	b91b      	cbnz	r3, 6cc <sysclk_disable_pbb_module+0x34>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
     6c4:	2106      	movs	r1, #6
     6c6:	2001      	movs	r0, #1
     6c8:	4b05      	ldr	r3, [pc, #20]	; (6e0 <sysclk_disable_pbb_module+0x48>)
     6ca:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     6cc:	b12c      	cbz	r4, 6da <sysclk_disable_pbb_module+0x42>
		cpu_irq_enable();
     6ce:	2201      	movs	r2, #1
     6d0:	4b04      	ldr	r3, [pc, #16]	; (6e4 <sysclk_disable_pbb_module+0x4c>)
     6d2:	701a      	strb	r2, [r3, #0]
     6d4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     6d8:	b662      	cpsie	i
		sysclk_disable_hsb_module(SYSCLK_PBB_BRIDGE);
	}

	cpu_irq_restore(flags);
}
     6da:	b002      	add	sp, #8
     6dc:	bd10      	pop	{r4, pc}
     6de:	bf00      	nop
     6e0:	0000053d 	.word	0x0000053d
     6e4:	2000002c 	.word	0x2000002c
     6e8:	400e0000 	.word	0x400e0000

000006ec <sysclk_get_peripheral_bus_hz>:
 * \return Frequency of the bus attached to the specified peripheral, in Hz.
 */
uint32_t sysclk_get_peripheral_bus_hz(const volatile void *module)
{
	/* Fallthroughs intended for modules sharing the same peripheral bus. */
	switch ((uintptr_t)module) {
     6ec:	4b5f      	ldr	r3, [pc, #380]	; (86c <sysclk_get_peripheral_bus_hz+0x180>)
     6ee:	4298      	cmp	r0, r3
     6f0:	f000 80ba 	beq.w	868 <sysclk_get_peripheral_bus_hz+0x17c>
     6f4:	d860      	bhi.n	7b8 <sysclk_get_peripheral_bus_hz+0xcc>
     6f6:	f5a3 23a0 	sub.w	r3, r3, #327680	; 0x50000
     6fa:	4298      	cmp	r0, r3
     6fc:	f000 80b4 	beq.w	868 <sysclk_get_peripheral_bus_hz+0x17c>
     700:	d82f      	bhi.n	762 <sysclk_get_peripheral_bus_hz+0x76>
     702:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
     706:	4298      	cmp	r0, r3
     708:	f000 80ae 	beq.w	868 <sysclk_get_peripheral_bus_hz+0x17c>
     70c:	d814      	bhi.n	738 <sysclk_get_peripheral_bus_hz+0x4c>
     70e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
     712:	4298      	cmp	r0, r3
     714:	f000 80a8 	beq.w	868 <sysclk_get_peripheral_bus_hz+0x17c>
     718:	d804      	bhi.n	724 <sysclk_get_peripheral_bus_hz+0x38>
     71a:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
     71e:	f040 80a1 	bne.w	864 <sysclk_get_peripheral_bus_hz+0x178>
     722:	e0a1      	b.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     724:	4b52      	ldr	r3, [pc, #328]	; (870 <sysclk_get_peripheral_bus_hz+0x184>)
     726:	4298      	cmp	r0, r3
     728:	f000 809e 	beq.w	868 <sysclk_get_peripheral_bus_hz+0x17c>
     72c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     730:	4298      	cmp	r0, r3
     732:	f040 8097 	bne.w	864 <sysclk_get_peripheral_bus_hz+0x178>
     736:	e097      	b.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     738:	4b4e      	ldr	r3, [pc, #312]	; (874 <sysclk_get_peripheral_bus_hz+0x188>)
     73a:	4298      	cmp	r0, r3
     73c:	f000 8094 	beq.w	868 <sysclk_get_peripheral_bus_hz+0x17c>
     740:	d805      	bhi.n	74e <sysclk_get_peripheral_bus_hz+0x62>
     742:	f5a3 5370 	sub.w	r3, r3, #15360	; 0x3c00
     746:	4298      	cmp	r0, r3
     748:	f040 808c 	bne.w	864 <sysclk_get_peripheral_bus_hz+0x178>
     74c:	e08c      	b.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     74e:	4b4a      	ldr	r3, [pc, #296]	; (878 <sysclk_get_peripheral_bus_hz+0x18c>)
     750:	4298      	cmp	r0, r3
     752:	f000 8089 	beq.w	868 <sysclk_get_peripheral_bus_hz+0x17c>
     756:	f503 43f8 	add.w	r3, r3, #31744	; 0x7c00
     75a:	4298      	cmp	r0, r3
     75c:	f040 8082 	bne.w	864 <sysclk_get_peripheral_bus_hz+0x178>
     760:	e082      	b.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     762:	4b46      	ldr	r3, [pc, #280]	; (87c <sysclk_get_peripheral_bus_hz+0x190>)
     764:	4298      	cmp	r0, r3
     766:	d07f      	beq.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     768:	d811      	bhi.n	78e <sysclk_get_peripheral_bus_hz+0xa2>
     76a:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
     76e:	4298      	cmp	r0, r3
     770:	d07a      	beq.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     772:	d804      	bhi.n	77e <sysclk_get_peripheral_bus_hz+0x92>
     774:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     778:	4298      	cmp	r0, r3
     77a:	d173      	bne.n	864 <sysclk_get_peripheral_bus_hz+0x178>
     77c:	e074      	b.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     77e:	4b40      	ldr	r3, [pc, #256]	; (880 <sysclk_get_peripheral_bus_hz+0x194>)
     780:	4298      	cmp	r0, r3
     782:	d071      	beq.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     784:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     788:	4298      	cmp	r0, r3
     78a:	d16b      	bne.n	864 <sysclk_get_peripheral_bus_hz+0x178>
     78c:	e06c      	b.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     78e:	4b3d      	ldr	r3, [pc, #244]	; (884 <sysclk_get_peripheral_bus_hz+0x198>)
     790:	4298      	cmp	r0, r3
     792:	d069      	beq.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     794:	d808      	bhi.n	7a8 <sysclk_get_peripheral_bus_hz+0xbc>
     796:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
     79a:	4298      	cmp	r0, r3
     79c:	d064      	beq.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     79e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     7a2:	4298      	cmp	r0, r3
     7a4:	d15e      	bne.n	864 <sysclk_get_peripheral_bus_hz+0x178>
     7a6:	e05f      	b.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     7a8:	4b37      	ldr	r3, [pc, #220]	; (888 <sysclk_get_peripheral_bus_hz+0x19c>)
     7aa:	4298      	cmp	r0, r3
     7ac:	d05c      	beq.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     7ae:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     7b2:	4298      	cmp	r0, r3
     7b4:	d156      	bne.n	864 <sysclk_get_peripheral_bus_hz+0x178>
     7b6:	e057      	b.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     7b8:	4b34      	ldr	r3, [pc, #208]	; (88c <sysclk_get_peripheral_bus_hz+0x1a0>)
     7ba:	4298      	cmp	r0, r3
     7bc:	d054      	beq.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     7be:	d827      	bhi.n	810 <sysclk_get_peripheral_bus_hz+0x124>
     7c0:	f5a3 337c 	sub.w	r3, r3, #258048	; 0x3f000
     7c4:	4298      	cmp	r0, r3
     7c6:	d04f      	beq.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     7c8:	d811      	bhi.n	7ee <sysclk_get_peripheral_bus_hz+0x102>
     7ca:	f5a3 3304 	sub.w	r3, r3, #135168	; 0x21000
     7ce:	4298      	cmp	r0, r3
     7d0:	d04a      	beq.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     7d2:	d804      	bhi.n	7de <sysclk_get_peripheral_bus_hz+0xf2>
     7d4:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     7d8:	4298      	cmp	r0, r3
     7da:	d143      	bne.n	864 <sysclk_get_peripheral_bus_hz+0x178>
     7dc:	e044      	b.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     7de:	4b2c      	ldr	r3, [pc, #176]	; (890 <sysclk_get_peripheral_bus_hz+0x1a4>)
     7e0:	4298      	cmp	r0, r3
     7e2:	d041      	beq.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     7e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     7e8:	4298      	cmp	r0, r3
     7ea:	d13b      	bne.n	864 <sysclk_get_peripheral_bus_hz+0x178>
     7ec:	e03c      	b.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     7ee:	4b29      	ldr	r3, [pc, #164]	; (894 <sysclk_get_peripheral_bus_hz+0x1a8>)
     7f0:	4298      	cmp	r0, r3
     7f2:	d039      	beq.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     7f4:	d804      	bhi.n	800 <sysclk_get_peripheral_bus_hz+0x114>
     7f6:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
     7fa:	4298      	cmp	r0, r3
     7fc:	d132      	bne.n	864 <sysclk_get_peripheral_bus_hz+0x178>
     7fe:	e033      	b.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     800:	4b25      	ldr	r3, [pc, #148]	; (898 <sysclk_get_peripheral_bus_hz+0x1ac>)
     802:	4298      	cmp	r0, r3
     804:	d030      	beq.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     80a:	4298      	cmp	r0, r3
     80c:	d12a      	bne.n	864 <sysclk_get_peripheral_bus_hz+0x178>
     80e:	e02b      	b.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     810:	4b22      	ldr	r3, [pc, #136]	; (89c <sysclk_get_peripheral_bus_hz+0x1b0>)
     812:	4298      	cmp	r0, r3
     814:	d028      	beq.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     816:	d811      	bhi.n	83c <sysclk_get_peripheral_bus_hz+0x150>
     818:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
     81c:	4298      	cmp	r0, r3
     81e:	d023      	beq.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     820:	d804      	bhi.n	82c <sysclk_get_peripheral_bus_hz+0x140>
     822:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
     826:	4298      	cmp	r0, r3
     828:	d11c      	bne.n	864 <sysclk_get_peripheral_bus_hz+0x178>
     82a:	e01d      	b.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     82c:	4b1c      	ldr	r3, [pc, #112]	; (8a0 <sysclk_get_peripheral_bus_hz+0x1b4>)
     82e:	4298      	cmp	r0, r3
     830:	d01a      	beq.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     832:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     836:	4298      	cmp	r0, r3
     838:	d114      	bne.n	864 <sysclk_get_peripheral_bus_hz+0x178>
     83a:	e015      	b.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     83c:	4b19      	ldr	r3, [pc, #100]	; (8a4 <sysclk_get_peripheral_bus_hz+0x1b8>)
     83e:	4298      	cmp	r0, r3
     840:	d012      	beq.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     842:	d808      	bhi.n	856 <sysclk_get_peripheral_bus_hz+0x16a>
     844:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
     848:	4298      	cmp	r0, r3
     84a:	d00d      	beq.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     84c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     850:	4298      	cmp	r0, r3
     852:	d107      	bne.n	864 <sysclk_get_peripheral_bus_hz+0x178>
     854:	e008      	b.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     856:	4b14      	ldr	r3, [pc, #80]	; (8a8 <sysclk_get_peripheral_bus_hz+0x1bc>)
     858:	4298      	cmp	r0, r3
     85a:	d005      	beq.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
     85c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     860:	4298      	cmp	r0, r3
     862:	d001      	beq.n	868 <sysclk_get_peripheral_bus_hz+0x17c>
	case PICOUART_ADDR:
		return sysclk_get_pbd_hz();

	default:
		Assert(false);
		return 0;
     864:	2000      	movs	r0, #0
     866:	4770      	bx	lr
	case TWIM2_ADDR:
	case TWIM3_ADDR:
	#if !SAM4LS
	case LCDCA_ADDR:
	#endif
		return sysclk_get_pba_hz();
     868:	4810      	ldr	r0, [pc, #64]	; (8ac <sysclk_get_peripheral_bus_hz+0x1c0>)

	default:
		Assert(false);
		return 0;
	}
}
     86a:	4770      	bx	lr
     86c:	40078000 	.word	0x40078000
     870:	40010000 	.word	0x40010000
     874:	4001c000 	.word	0x4001c000
     878:	4001c400 	.word	0x4001c400
     87c:	40040000 	.word	0x40040000
     880:	40038000 	.word	0x40038000
     884:	40068000 	.word	0x40068000
     888:	4006c000 	.word	0x4006c000
     88c:	400e0000 	.word	0x400e0000
     890:	400a0000 	.word	0x400a0000
     894:	400a4000 	.word	0x400a4000
     898:	400a5000 	.word	0x400a5000
     89c:	400f0000 	.word	0x400f0000
     8a0:	400e0c00 	.word	0x400e0c00
     8a4:	400f0c00 	.word	0x400f0c00
     8a8:	400f1000 	.word	0x400f1000
     8ac:	0001c138 	.word	0x0001c138

000008b0 <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
     8b0:	b508      	push	{r3, lr}
	switch ((uintptr_t)module) {
     8b2:	4bb3      	ldr	r3, [pc, #716]	; (b80 <sysclk_enable_peripheral_clock+0x2d0>)
     8b4:	4298      	cmp	r0, r3
     8b6:	f000 815a 	beq.w	b6e <sysclk_enable_peripheral_clock+0x2be>
     8ba:	d86a      	bhi.n	992 <sysclk_enable_peripheral_clock+0xe2>
     8bc:	f5a3 23a0 	sub.w	r3, r3, #327680	; 0x50000
     8c0:	4298      	cmp	r0, r3
     8c2:	f000 8113 	beq.w	aec <sysclk_enable_peripheral_clock+0x23c>
     8c6:	d82f      	bhi.n	928 <sysclk_enable_peripheral_clock+0x78>
     8c8:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
     8cc:	4298      	cmp	r0, r3
     8ce:	f000 80f2 	beq.w	ab6 <sysclk_enable_peripheral_clock+0x206>
     8d2:	d814      	bhi.n	8fe <sysclk_enable_peripheral_clock+0x4e>
     8d4:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
     8d8:	4298      	cmp	r0, r3
     8da:	f000 80d2 	beq.w	a82 <sysclk_enable_peripheral_clock+0x1d2>
     8de:	d804      	bhi.n	8ea <sysclk_enable_peripheral_clock+0x3a>
     8e0:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
     8e4:	f000 80c9 	beq.w	a7a <sysclk_enable_peripheral_clock+0x1ca>
     8e8:	bd08      	pop	{r3, pc}
     8ea:	4ba6      	ldr	r3, [pc, #664]	; (b84 <sysclk_enable_peripheral_clock+0x2d4>)
     8ec:	4298      	cmp	r0, r3
     8ee:	f000 80cc 	beq.w	a8a <sysclk_enable_peripheral_clock+0x1da>
     8f2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     8f6:	4298      	cmp	r0, r3
     8f8:	f000 80d2 	beq.w	aa0 <sysclk_enable_peripheral_clock+0x1f0>
     8fc:	bd08      	pop	{r3, pc}
     8fe:	4ba2      	ldr	r3, [pc, #648]	; (b88 <sysclk_enable_peripheral_clock+0x2d8>)
     900:	4298      	cmp	r0, r3
     902:	f000 80e0 	beq.w	ac6 <sysclk_enable_peripheral_clock+0x216>
     906:	d805      	bhi.n	914 <sysclk_enable_peripheral_clock+0x64>
     908:	f5a3 5370 	sub.w	r3, r3, #15360	; 0x3c00
     90c:	4298      	cmp	r0, r3
     90e:	f000 80d6 	beq.w	abe <sysclk_enable_peripheral_clock+0x20e>
     912:	bd08      	pop	{r3, pc}
     914:	4b9d      	ldr	r3, [pc, #628]	; (b8c <sysclk_enable_peripheral_clock+0x2dc>)
     916:	4298      	cmp	r0, r3
     918:	f000 80d9 	beq.w	ace <sysclk_enable_peripheral_clock+0x21e>
     91c:	f503 43f8 	add.w	r3, r3, #31744	; 0x7c00
     920:	4298      	cmp	r0, r3
     922:	f000 80d8 	beq.w	ad6 <sysclk_enable_peripheral_clock+0x226>
     926:	bd08      	pop	{r3, pc}
     928:	4b99      	ldr	r3, [pc, #612]	; (b90 <sysclk_enable_peripheral_clock+0x2e0>)
     92a:	4298      	cmp	r0, r3
     92c:	f000 8107 	beq.w	b3e <sysclk_enable_peripheral_clock+0x28e>
     930:	d815      	bhi.n	95e <sysclk_enable_peripheral_clock+0xae>
     932:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
     936:	4298      	cmp	r0, r3
     938:	f000 80ee 	beq.w	b18 <sysclk_enable_peripheral_clock+0x268>
     93c:	d805      	bhi.n	94a <sysclk_enable_peripheral_clock+0x9a>
     93e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     942:	4298      	cmp	r0, r3
     944:	f000 80dd 	beq.w	b02 <sysclk_enable_peripheral_clock+0x252>
     948:	bd08      	pop	{r3, pc}
     94a:	4b92      	ldr	r3, [pc, #584]	; (b94 <sysclk_enable_peripheral_clock+0x2e4>)
     94c:	4298      	cmp	r0, r3
     94e:	f000 80ee 	beq.w	b2e <sysclk_enable_peripheral_clock+0x27e>
     952:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     956:	4298      	cmp	r0, r3
     958:	f000 80ed 	beq.w	b36 <sysclk_enable_peripheral_clock+0x286>
     95c:	bd08      	pop	{r3, pc}
     95e:	4b8e      	ldr	r3, [pc, #568]	; (b98 <sysclk_enable_peripheral_clock+0x2e8>)
     960:	4298      	cmp	r0, r3
     962:	f000 80f8 	beq.w	b56 <sysclk_enable_peripheral_clock+0x2a6>
     966:	d80a      	bhi.n	97e <sysclk_enable_peripheral_clock+0xce>
     968:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
     96c:	4298      	cmp	r0, r3
     96e:	f000 80ea 	beq.w	b46 <sysclk_enable_peripheral_clock+0x296>
     972:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     976:	4298      	cmp	r0, r3
     978:	f000 80e9 	beq.w	b4e <sysclk_enable_peripheral_clock+0x29e>
     97c:	bd08      	pop	{r3, pc}
     97e:	4b87      	ldr	r3, [pc, #540]	; (b9c <sysclk_enable_peripheral_clock+0x2ec>)
     980:	4298      	cmp	r0, r3
     982:	f000 80ec 	beq.w	b5e <sysclk_enable_peripheral_clock+0x2ae>
     986:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     98a:	4298      	cmp	r0, r3
     98c:	f000 80eb 	beq.w	b66 <sysclk_enable_peripheral_clock+0x2b6>
     990:	bd08      	pop	{r3, pc}
     992:	4b83      	ldr	r3, [pc, #524]	; (ba0 <sysclk_enable_peripheral_clock+0x2f0>)
     994:	4298      	cmp	r0, r3
     996:	f000 814d 	beq.w	c34 <sysclk_enable_peripheral_clock+0x384>
     99a:	d834      	bhi.n	a06 <sysclk_enable_peripheral_clock+0x156>
     99c:	f5a3 337c 	sub.w	r3, r3, #258048	; 0x3f000
     9a0:	4298      	cmp	r0, r3
     9a2:	f000 8127 	beq.w	bf4 <sysclk_enable_peripheral_clock+0x344>
     9a6:	d815      	bhi.n	9d4 <sysclk_enable_peripheral_clock+0x124>
     9a8:	f5a3 3304 	sub.w	r3, r3, #135168	; 0x21000
     9ac:	4298      	cmp	r0, r3
     9ae:	f000 810d 	beq.w	bcc <sysclk_enable_peripheral_clock+0x31c>
     9b2:	d805      	bhi.n	9c0 <sysclk_enable_peripheral_clock+0x110>
     9b4:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     9b8:	4298      	cmp	r0, r3
     9ba:	f000 80dc 	beq.w	b76 <sysclk_enable_peripheral_clock+0x2c6>
     9be:	bd08      	pop	{r3, pc}
     9c0:	4b78      	ldr	r3, [pc, #480]	; (ba4 <sysclk_enable_peripheral_clock+0x2f4>)
     9c2:	4298      	cmp	r0, r3
     9c4:	f000 8106 	beq.w	bd4 <sysclk_enable_peripheral_clock+0x324>
     9c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     9cc:	4298      	cmp	r0, r3
     9ce:	f000 8109 	beq.w	be4 <sysclk_enable_peripheral_clock+0x334>
     9d2:	bd08      	pop	{r3, pc}
     9d4:	4b74      	ldr	r3, [pc, #464]	; (ba8 <sysclk_enable_peripheral_clock+0x2f8>)
     9d6:	4298      	cmp	r0, r3
     9d8:	f000 8120 	beq.w	c1c <sysclk_enable_peripheral_clock+0x36c>
     9dc:	d80a      	bhi.n	9f4 <sysclk_enable_peripheral_clock+0x144>
     9de:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
     9e2:	4298      	cmp	r0, r3
     9e4:	f000 810a 	beq.w	bfc <sysclk_enable_peripheral_clock+0x34c>
     9e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     9ec:	4298      	cmp	r0, r3
     9ee:	f000 810d 	beq.w	c0c <sysclk_enable_peripheral_clock+0x35c>
     9f2:	bd08      	pop	{r3, pc}
     9f4:	4b6d      	ldr	r3, [pc, #436]	; (bac <sysclk_enable_peripheral_clock+0x2fc>)
     9f6:	4298      	cmp	r0, r3
     9f8:	f000 8118 	beq.w	c2c <sysclk_enable_peripheral_clock+0x37c>
     9fc:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
     a00:	4298      	cmp	r0, r3
     a02:	d035      	beq.n	a70 <sysclk_enable_peripheral_clock+0x1c0>
     a04:	bd08      	pop	{r3, pc}
     a06:	4b6a      	ldr	r3, [pc, #424]	; (bb0 <sysclk_enable_peripheral_clock+0x300>)
     a08:	4298      	cmp	r0, r3
     a0a:	f000 812c 	beq.w	c66 <sysclk_enable_peripheral_clock+0x3b6>
     a0e:	d815      	bhi.n	a3c <sysclk_enable_peripheral_clock+0x18c>
     a10:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
     a14:	4298      	cmp	r0, r3
     a16:	f000 8117 	beq.w	c48 <sysclk_enable_peripheral_clock+0x398>
     a1a:	d805      	bhi.n	a28 <sysclk_enable_peripheral_clock+0x178>
     a1c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
     a20:	4298      	cmp	r0, r3
     a22:	f000 810c 	beq.w	c3e <sysclk_enable_peripheral_clock+0x38e>
     a26:	bd08      	pop	{r3, pc}
     a28:	4b62      	ldr	r3, [pc, #392]	; (bb4 <sysclk_enable_peripheral_clock+0x304>)
     a2a:	4298      	cmp	r0, r3
     a2c:	f000 8111 	beq.w	c52 <sysclk_enable_peripheral_clock+0x3a2>
     a30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     a34:	4298      	cmp	r0, r3
     a36:	f000 8111 	beq.w	c5c <sysclk_enable_peripheral_clock+0x3ac>
     a3a:	bd08      	pop	{r3, pc}
     a3c:	4b5e      	ldr	r3, [pc, #376]	; (bb8 <sysclk_enable_peripheral_clock+0x308>)
     a3e:	4298      	cmp	r0, r3
     a40:	f000 8120 	beq.w	c84 <sysclk_enable_peripheral_clock+0x3d4>
     a44:	d80a      	bhi.n	a5c <sysclk_enable_peripheral_clock+0x1ac>
     a46:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
     a4a:	4298      	cmp	r0, r3
     a4c:	f000 8110 	beq.w	c70 <sysclk_enable_peripheral_clock+0x3c0>
     a50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     a54:	4298      	cmp	r0, r3
     a56:	f000 8110 	beq.w	c7a <sysclk_enable_peripheral_clock+0x3ca>
     a5a:	bd08      	pop	{r3, pc}
     a5c:	4b57      	ldr	r3, [pc, #348]	; (bbc <sysclk_enable_peripheral_clock+0x30c>)
     a5e:	4298      	cmp	r0, r3
     a60:	f000 8115 	beq.w	c8e <sysclk_enable_peripheral_clock+0x3de>
     a64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     a68:	4298      	cmp	r0, r3
     a6a:	f000 8115 	beq.w	c98 <sysclk_enable_peripheral_clock+0x3e8>
     a6e:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
     a70:	2109      	movs	r1, #9
     a72:	2001      	movs	r0, #1
     a74:	4b52      	ldr	r3, [pc, #328]	; (bc0 <sysclk_enable_peripheral_clock+0x310>)
     a76:	4798      	blx	r3
     a78:	bd08      	pop	{r3, pc}
		sysclk_enable_hsb_module(SYSCLK_AESA_HSB);
		break;
	#endif

	case IISC_ADDR:
		sysclk_enable_pba_module(SYSCLK_IISC);
     a7a:	2000      	movs	r0, #0
     a7c:	4b51      	ldr	r3, [pc, #324]	; (bc4 <sysclk_enable_peripheral_clock+0x314>)
     a7e:	4798      	blx	r3
		break;
     a80:	bd08      	pop	{r3, pc}

	case SPI_ADDR:
		sysclk_enable_pba_module(SYSCLK_SPI);
     a82:	2001      	movs	r0, #1
     a84:	4b4f      	ldr	r3, [pc, #316]	; (bc4 <sysclk_enable_peripheral_clock+0x314>)
     a86:	4798      	blx	r3
		break;
     a88:	bd08      	pop	{r3, pc}

	case TC0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC0);
     a8a:	2002      	movs	r0, #2
     a8c:	4b4d      	ldr	r3, [pc, #308]	; (bc4 <sysclk_enable_peripheral_clock+0x314>)
     a8e:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
     a90:	4b43      	ldr	r3, [pc, #268]	; (ba0 <sysclk_enable_peripheral_clock+0x2f0>)
     a92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
     a94:	f042 0255 	orr.w	r2, r2, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     a98:	494b      	ldr	r1, [pc, #300]	; (bc8 <sysclk_enable_peripheral_clock+0x318>)
     a9a:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
     a9c:	641a      	str	r2, [r3, #64]	; 0x40
     a9e:	bd08      	pop	{r3, pc}
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;

	case TC1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC1);
     aa0:	2003      	movs	r0, #3
     aa2:	4b48      	ldr	r3, [pc, #288]	; (bc4 <sysclk_enable_peripheral_clock+0x314>)
     aa4:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
     aa6:	4b3e      	ldr	r3, [pc, #248]	; (ba0 <sysclk_enable_peripheral_clock+0x2f0>)
     aa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
     aaa:	f042 0255 	orr.w	r2, r2, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     aae:	4946      	ldr	r1, [pc, #280]	; (bc8 <sysclk_enable_peripheral_clock+0x318>)
     ab0:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
     ab2:	641a      	str	r2, [r3, #64]	; 0x40
     ab4:	bd08      	pop	{r3, pc}
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;

	case TWIM0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM0);
     ab6:	2004      	movs	r0, #4
     ab8:	4b42      	ldr	r3, [pc, #264]	; (bc4 <sysclk_enable_peripheral_clock+0x314>)
     aba:	4798      	blx	r3
		break;
     abc:	bd08      	pop	{r3, pc}

	case TWIS0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS0);
     abe:	2005      	movs	r0, #5
     ac0:	4b40      	ldr	r3, [pc, #256]	; (bc4 <sysclk_enable_peripheral_clock+0x314>)
     ac2:	4798      	blx	r3
		break;
     ac4:	bd08      	pop	{r3, pc}

	case TWIM1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM1);
     ac6:	2006      	movs	r0, #6
     ac8:	4b3e      	ldr	r3, [pc, #248]	; (bc4 <sysclk_enable_peripheral_clock+0x314>)
     aca:	4798      	blx	r3
		break;
     acc:	bd08      	pop	{r3, pc}

	case TWIS1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS1);
     ace:	2007      	movs	r0, #7
     ad0:	4b3c      	ldr	r3, [pc, #240]	; (bc4 <sysclk_enable_peripheral_clock+0x314>)
     ad2:	4798      	blx	r3
		break;
     ad4:	bd08      	pop	{r3, pc}

	case USART0_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART0);
     ad6:	2008      	movs	r0, #8
     ad8:	4b3a      	ldr	r3, [pc, #232]	; (bc4 <sysclk_enable_peripheral_clock+0x314>)
     ada:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
     adc:	4b30      	ldr	r3, [pc, #192]	; (ba0 <sysclk_enable_peripheral_clock+0x2f0>)
     ade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
     ae0:	f042 0204 	orr.w	r2, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     ae4:	4938      	ldr	r1, [pc, #224]	; (bc8 <sysclk_enable_peripheral_clock+0x318>)
     ae6:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
     ae8:	641a      	str	r2, [r3, #64]	; 0x40
     aea:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART1_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART1);
     aec:	2009      	movs	r0, #9
     aee:	4b35      	ldr	r3, [pc, #212]	; (bc4 <sysclk_enable_peripheral_clock+0x314>)
     af0:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
     af2:	4b2b      	ldr	r3, [pc, #172]	; (ba0 <sysclk_enable_peripheral_clock+0x2f0>)
     af4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
     af6:	f042 0204 	orr.w	r2, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     afa:	4933      	ldr	r1, [pc, #204]	; (bc8 <sysclk_enable_peripheral_clock+0x318>)
     afc:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
     afe:	641a      	str	r2, [r3, #64]	; 0x40
     b00:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART2_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART2);
     b02:	200a      	movs	r0, #10
     b04:	4b2f      	ldr	r3, [pc, #188]	; (bc4 <sysclk_enable_peripheral_clock+0x314>)
     b06:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
     b08:	4b25      	ldr	r3, [pc, #148]	; (ba0 <sysclk_enable_peripheral_clock+0x2f0>)
     b0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
     b0c:	f042 0204 	orr.w	r2, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     b10:	492d      	ldr	r1, [pc, #180]	; (bc8 <sysclk_enable_peripheral_clock+0x318>)
     b12:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
     b14:	641a      	str	r2, [r3, #64]	; 0x40
     b16:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART3_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART3);
     b18:	200b      	movs	r0, #11
     b1a:	4b2a      	ldr	r3, [pc, #168]	; (bc4 <sysclk_enable_peripheral_clock+0x314>)
     b1c:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
     b1e:	4b20      	ldr	r3, [pc, #128]	; (ba0 <sysclk_enable_peripheral_clock+0x2f0>)
     b20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
     b22:	f042 0204 	orr.w	r2, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
     b26:	4928      	ldr	r1, [pc, #160]	; (bc8 <sysclk_enable_peripheral_clock+0x318>)
     b28:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
     b2a:	641a      	str	r2, [r3, #64]	; 0x40
     b2c:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case ADCIFE_ADDR:
		sysclk_enable_pba_module(SYSCLK_ADCIFE);
     b2e:	200c      	movs	r0, #12
     b30:	4b24      	ldr	r3, [pc, #144]	; (bc4 <sysclk_enable_peripheral_clock+0x314>)
     b32:	4798      	blx	r3
		break;
     b34:	bd08      	pop	{r3, pc}

	case DACC_ADDR:
		sysclk_enable_pba_module(SYSCLK_DACC);
     b36:	200d      	movs	r0, #13
     b38:	4b22      	ldr	r3, [pc, #136]	; (bc4 <sysclk_enable_peripheral_clock+0x314>)
     b3a:	4798      	blx	r3
		break;
     b3c:	bd08      	pop	{r3, pc}

	case ACIFC_ADDR:
		sysclk_enable_pba_module(SYSCLK_ACIFC);
     b3e:	200e      	movs	r0, #14
     b40:	4b20      	ldr	r3, [pc, #128]	; (bc4 <sysclk_enable_peripheral_clock+0x314>)
     b42:	4798      	blx	r3
		break;
     b44:	bd08      	pop	{r3, pc}

	case GLOC_ADDR:
		sysclk_enable_pba_module(SYSCLK_GLOC);
     b46:	200f      	movs	r0, #15
     b48:	4b1e      	ldr	r3, [pc, #120]	; (bc4 <sysclk_enable_peripheral_clock+0x314>)
     b4a:	4798      	blx	r3
		break;
     b4c:	bd08      	pop	{r3, pc}

	case ABDACB_ADDR:
		sysclk_enable_pba_module(SYSCLK_ABDACB);
     b4e:	2010      	movs	r0, #16
     b50:	4b1c      	ldr	r3, [pc, #112]	; (bc4 <sysclk_enable_peripheral_clock+0x314>)
     b52:	4798      	blx	r3
		break;
     b54:	bd08      	pop	{r3, pc}

	case TRNG_ADDR:
		sysclk_enable_pba_module(SYSCLK_TRNG);
     b56:	2011      	movs	r0, #17
     b58:	4b1a      	ldr	r3, [pc, #104]	; (bc4 <sysclk_enable_peripheral_clock+0x314>)
     b5a:	4798      	blx	r3
		break;
     b5c:	bd08      	pop	{r3, pc}

	case PARC_ADDR:
		sysclk_enable_pba_module(SYSCLK_PARC);
     b5e:	2012      	movs	r0, #18
     b60:	4b18      	ldr	r3, [pc, #96]	; (bc4 <sysclk_enable_peripheral_clock+0x314>)
     b62:	4798      	blx	r3
		break;
     b64:	bd08      	pop	{r3, pc}

	case CATB_ADDR:
		sysclk_enable_pba_module(SYSCLK_CATB);
     b66:	2013      	movs	r0, #19
     b68:	4b16      	ldr	r3, [pc, #88]	; (bc4 <sysclk_enable_peripheral_clock+0x314>)
     b6a:	4798      	blx	r3
		break;
     b6c:	bd08      	pop	{r3, pc}

	case TWIM2_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM2);
     b6e:	2015      	movs	r0, #21
     b70:	4b14      	ldr	r3, [pc, #80]	; (bc4 <sysclk_enable_peripheral_clock+0x314>)
     b72:	4798      	blx	r3
		break;
     b74:	bd08      	pop	{r3, pc}

	case TWIM3_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM3);
     b76:	2016      	movs	r0, #22
     b78:	4b12      	ldr	r3, [pc, #72]	; (bc4 <sysclk_enable_peripheral_clock+0x314>)
     b7a:	4798      	blx	r3
		break;
     b7c:	bd08      	pop	{r3, pc}
     b7e:	bf00      	nop
     b80:	40078000 	.word	0x40078000
     b84:	40010000 	.word	0x40010000
     b88:	4001c000 	.word	0x4001c000
     b8c:	4001c400 	.word	0x4001c400
     b90:	40040000 	.word	0x40040000
     b94:	40038000 	.word	0x40038000
     b98:	40068000 	.word	0x40068000
     b9c:	4006c000 	.word	0x4006c000
     ba0:	400e0000 	.word	0x400e0000
     ba4:	400a0000 	.word	0x400a0000
     ba8:	400a5000 	.word	0x400a5000
     bac:	400a6000 	.word	0x400a6000
     bb0:	400f0000 	.word	0x400f0000
     bb4:	400e0c00 	.word	0x400e0c00
     bb8:	400f0c00 	.word	0x400f0c00
     bbc:	400f1000 	.word	0x400f1000
     bc0:	000004dd 	.word	0x000004dd
     bc4:	0000059d 	.word	0x0000059d
     bc8:	aa000040 	.word	0xaa000040

	#if !SAM4LS
	case LCDCA_ADDR:
		sysclk_enable_pba_module(SYSCLK_LCDCA);
     bcc:	2017      	movs	r0, #23
     bce:	4b35      	ldr	r3, [pc, #212]	; (ca4 <sysclk_enable_peripheral_clock+0x3f4>)
     bd0:	4798      	blx	r3
		break;
     bd2:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
     bd4:	2101      	movs	r1, #1
     bd6:	4608      	mov	r0, r1
     bd8:	4b33      	ldr	r3, [pc, #204]	; (ca8 <sysclk_enable_peripheral_clock+0x3f8>)
     bda:	4798      	blx	r3
	#endif

	case HFLASHC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HFLASHC_DATA);
		sysclk_enable_pbb_module(SYSCLK_HFLASHC_REGS);
     bdc:	2000      	movs	r0, #0
     bde:	4b33      	ldr	r3, [pc, #204]	; (cac <sysclk_enable_peripheral_clock+0x3fc>)
     be0:	4798      	blx	r3
		break;
     be2:	bd08      	pop	{r3, pc}
     be4:	2102      	movs	r1, #2
     be6:	2001      	movs	r0, #1
     be8:	4b2f      	ldr	r3, [pc, #188]	; (ca8 <sysclk_enable_peripheral_clock+0x3f8>)
     bea:	4798      	blx	r3

	case HCACHE_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HRAMC1_DATA);
		sysclk_enable_pbb_module(SYSCLK_HRAMC1_REGS);
     bec:	2001      	movs	r0, #1
     bee:	4b2f      	ldr	r3, [pc, #188]	; (cac <sysclk_enable_peripheral_clock+0x3fc>)
     bf0:	4798      	blx	r3
		break;
     bf2:	bd08      	pop	{r3, pc}

	case HMATRIX_ADDR:
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
     bf4:	2002      	movs	r0, #2
     bf6:	4b2d      	ldr	r3, [pc, #180]	; (cac <sysclk_enable_peripheral_clock+0x3fc>)
     bf8:	4798      	blx	r3
		break;
     bfa:	bd08      	pop	{r3, pc}
     bfc:	2100      	movs	r1, #0
     bfe:	2001      	movs	r0, #1
     c00:	4b29      	ldr	r3, [pc, #164]	; (ca8 <sysclk_enable_peripheral_clock+0x3f8>)
     c02:	4798      	blx	r3

	case PDCA_ADDR:
		sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
		sysclk_enable_pbb_module(SYSCLK_PDCA_PB);
     c04:	2003      	movs	r0, #3
     c06:	4b29      	ldr	r3, [pc, #164]	; (cac <sysclk_enable_peripheral_clock+0x3fc>)
     c08:	4798      	blx	r3
		break;
     c0a:	bd08      	pop	{r3, pc}
     c0c:	2104      	movs	r1, #4
     c0e:	2001      	movs	r0, #1
     c10:	4b25      	ldr	r3, [pc, #148]	; (ca8 <sysclk_enable_peripheral_clock+0x3f8>)
     c12:	4798      	blx	r3

	case CRCCU_ADDR:
		sysclk_enable_hsb_module(SYSCLK_CRCCU_DATA);
		sysclk_enable_pbb_module(SYSCLK_CRCCU_REGS);
     c14:	2004      	movs	r0, #4
     c16:	4b25      	ldr	r3, [pc, #148]	; (cac <sysclk_enable_peripheral_clock+0x3fc>)
     c18:	4798      	blx	r3
		break;
     c1a:	bd08      	pop	{r3, pc}
     c1c:	2103      	movs	r1, #3
     c1e:	2001      	movs	r0, #1
     c20:	4b21      	ldr	r3, [pc, #132]	; (ca8 <sysclk_enable_peripheral_clock+0x3f8>)
     c22:	4798      	blx	r3

	case USBC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_USBC_DATA);
		sysclk_enable_pbb_module(SYSCLK_USBC_REGS);
     c24:	2005      	movs	r0, #5
     c26:	4b21      	ldr	r3, [pc, #132]	; (cac <sysclk_enable_peripheral_clock+0x3fc>)
     c28:	4798      	blx	r3
		break;
     c2a:	bd08      	pop	{r3, pc}

	case PEVC_ADDR:
		sysclk_enable_pbb_module(SYSCLK_PEVC);
     c2c:	2006      	movs	r0, #6
     c2e:	4b1f      	ldr	r3, [pc, #124]	; (cac <sysclk_enable_peripheral_clock+0x3fc>)
     c30:	4798      	blx	r3
		break;
     c32:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbc_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_PBC, module_index);
     c34:	2100      	movs	r1, #0
     c36:	2004      	movs	r0, #4
     c38:	4b1b      	ldr	r3, [pc, #108]	; (ca8 <sysclk_enable_peripheral_clock+0x3f8>)
     c3a:	4798      	blx	r3
     c3c:	bd08      	pop	{r3, pc}
     c3e:	2101      	movs	r1, #1
     c40:	2004      	movs	r0, #4
     c42:	4b19      	ldr	r3, [pc, #100]	; (ca8 <sysclk_enable_peripheral_clock+0x3f8>)
     c44:	4798      	blx	r3
     c46:	bd08      	pop	{r3, pc}
     c48:	2102      	movs	r1, #2
     c4a:	2004      	movs	r0, #4
     c4c:	4b16      	ldr	r3, [pc, #88]	; (ca8 <sysclk_enable_peripheral_clock+0x3f8>)
     c4e:	4798      	blx	r3
     c50:	bd08      	pop	{r3, pc}
     c52:	2103      	movs	r1, #3
     c54:	2004      	movs	r0, #4
     c56:	4b14      	ldr	r3, [pc, #80]	; (ca8 <sysclk_enable_peripheral_clock+0x3f8>)
     c58:	4798      	blx	r3
     c5a:	bd08      	pop	{r3, pc}
     c5c:	2104      	movs	r1, #4
     c5e:	4608      	mov	r0, r1
     c60:	4b11      	ldr	r3, [pc, #68]	; (ca8 <sysclk_enable_peripheral_clock+0x3f8>)
     c62:	4798      	blx	r3
     c64:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbd_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_PBD, module_index);
     c66:	2100      	movs	r1, #0
     c68:	2005      	movs	r0, #5
     c6a:	4b0f      	ldr	r3, [pc, #60]	; (ca8 <sysclk_enable_peripheral_clock+0x3f8>)
     c6c:	4798      	blx	r3
     c6e:	bd08      	pop	{r3, pc}
     c70:	2101      	movs	r1, #1
     c72:	2005      	movs	r0, #5
     c74:	4b0c      	ldr	r3, [pc, #48]	; (ca8 <sysclk_enable_peripheral_clock+0x3f8>)
     c76:	4798      	blx	r3
     c78:	bd08      	pop	{r3, pc}
     c7a:	2102      	movs	r1, #2
     c7c:	2005      	movs	r0, #5
     c7e:	4b0a      	ldr	r3, [pc, #40]	; (ca8 <sysclk_enable_peripheral_clock+0x3f8>)
     c80:	4798      	blx	r3
     c82:	bd08      	pop	{r3, pc}
     c84:	2103      	movs	r1, #3
     c86:	2005      	movs	r0, #5
     c88:	4b07      	ldr	r3, [pc, #28]	; (ca8 <sysclk_enable_peripheral_clock+0x3f8>)
     c8a:	4798      	blx	r3
     c8c:	bd08      	pop	{r3, pc}
     c8e:	2104      	movs	r1, #4
     c90:	2005      	movs	r0, #5
     c92:	4b05      	ldr	r3, [pc, #20]	; (ca8 <sysclk_enable_peripheral_clock+0x3f8>)
     c94:	4798      	blx	r3
     c96:	bd08      	pop	{r3, pc}
     c98:	2105      	movs	r1, #5
     c9a:	4608      	mov	r0, r1
     c9c:	4b02      	ldr	r3, [pc, #8]	; (ca8 <sysclk_enable_peripheral_clock+0x3f8>)
     c9e:	4798      	blx	r3
     ca0:	bd08      	pop	{r3, pc}
     ca2:	bf00      	nop
     ca4:	0000059d 	.word	0x0000059d
     ca8:	000004dd 	.word	0x000004dd
     cac:	00000645 	.word	0x00000645

00000cb0 <sysclk_disable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be disabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
     cb0:	b508      	push	{r3, lr}
	switch ((uintptr_t)module) {
     cb2:	4bb4      	ldr	r3, [pc, #720]	; (f84 <sysclk_disable_peripheral_clock+0x2d4>)
     cb4:	4298      	cmp	r0, r3
     cb6:	f000 8130 	beq.w	f1a <sysclk_disable_peripheral_clock+0x26a>
     cba:	d86a      	bhi.n	d92 <sysclk_disable_peripheral_clock+0xe2>
     cbc:	f5a3 23a0 	sub.w	r3, r3, #327680	; 0x50000
     cc0:	4298      	cmp	r0, r3
     cc2:	f000 80fe 	beq.w	ec2 <sysclk_disable_peripheral_clock+0x212>
     cc6:	d82f      	bhi.n	d28 <sysclk_disable_peripheral_clock+0x78>
     cc8:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
     ccc:	4298      	cmp	r0, r3
     cce:	f000 80e4 	beq.w	e9a <sysclk_disable_peripheral_clock+0x1ea>
     cd2:	d814      	bhi.n	cfe <sysclk_disable_peripheral_clock+0x4e>
     cd4:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
     cd8:	4298      	cmp	r0, r3
     cda:	f000 80d2 	beq.w	e82 <sysclk_disable_peripheral_clock+0x1d2>
     cde:	d804      	bhi.n	cea <sysclk_disable_peripheral_clock+0x3a>
     ce0:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
     ce4:	f000 80c9 	beq.w	e7a <sysclk_disable_peripheral_clock+0x1ca>
     ce8:	bd08      	pop	{r3, pc}
     cea:	4ba7      	ldr	r3, [pc, #668]	; (f88 <sysclk_disable_peripheral_clock+0x2d8>)
     cec:	4298      	cmp	r0, r3
     cee:	f000 80cc 	beq.w	e8a <sysclk_disable_peripheral_clock+0x1da>
     cf2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     cf6:	4298      	cmp	r0, r3
     cf8:	f000 80cb 	beq.w	e92 <sysclk_disable_peripheral_clock+0x1e2>
     cfc:	bd08      	pop	{r3, pc}
     cfe:	4ba3      	ldr	r3, [pc, #652]	; (f8c <sysclk_disable_peripheral_clock+0x2dc>)
     d00:	4298      	cmp	r0, r3
     d02:	f000 80d2 	beq.w	eaa <sysclk_disable_peripheral_clock+0x1fa>
     d06:	d805      	bhi.n	d14 <sysclk_disable_peripheral_clock+0x64>
     d08:	f5a3 5370 	sub.w	r3, r3, #15360	; 0x3c00
     d0c:	4298      	cmp	r0, r3
     d0e:	f000 80c8 	beq.w	ea2 <sysclk_disable_peripheral_clock+0x1f2>
     d12:	bd08      	pop	{r3, pc}
     d14:	4b9e      	ldr	r3, [pc, #632]	; (f90 <sysclk_disable_peripheral_clock+0x2e0>)
     d16:	4298      	cmp	r0, r3
     d18:	f000 80cb 	beq.w	eb2 <sysclk_disable_peripheral_clock+0x202>
     d1c:	f503 43f8 	add.w	r3, r3, #31744	; 0x7c00
     d20:	4298      	cmp	r0, r3
     d22:	f000 80ca 	beq.w	eba <sysclk_disable_peripheral_clock+0x20a>
     d26:	bd08      	pop	{r3, pc}
     d28:	4b9a      	ldr	r3, [pc, #616]	; (f94 <sysclk_disable_peripheral_clock+0x2e4>)
     d2a:	4298      	cmp	r0, r3
     d2c:	f000 80dd 	beq.w	eea <sysclk_disable_peripheral_clock+0x23a>
     d30:	d815      	bhi.n	d5e <sysclk_disable_peripheral_clock+0xae>
     d32:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
     d36:	4298      	cmp	r0, r3
     d38:	f000 80cb 	beq.w	ed2 <sysclk_disable_peripheral_clock+0x222>
     d3c:	d805      	bhi.n	d4a <sysclk_disable_peripheral_clock+0x9a>
     d3e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     d42:	4298      	cmp	r0, r3
     d44:	f000 80c1 	beq.w	eca <sysclk_disable_peripheral_clock+0x21a>
     d48:	bd08      	pop	{r3, pc}
     d4a:	4b93      	ldr	r3, [pc, #588]	; (f98 <sysclk_disable_peripheral_clock+0x2e8>)
     d4c:	4298      	cmp	r0, r3
     d4e:	f000 80c4 	beq.w	eda <sysclk_disable_peripheral_clock+0x22a>
     d52:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     d56:	4298      	cmp	r0, r3
     d58:	f000 80c3 	beq.w	ee2 <sysclk_disable_peripheral_clock+0x232>
     d5c:	bd08      	pop	{r3, pc}
     d5e:	4b8f      	ldr	r3, [pc, #572]	; (f9c <sysclk_disable_peripheral_clock+0x2ec>)
     d60:	4298      	cmp	r0, r3
     d62:	f000 80ce 	beq.w	f02 <sysclk_disable_peripheral_clock+0x252>
     d66:	d80a      	bhi.n	d7e <sysclk_disable_peripheral_clock+0xce>
     d68:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
     d6c:	4298      	cmp	r0, r3
     d6e:	f000 80c0 	beq.w	ef2 <sysclk_disable_peripheral_clock+0x242>
     d72:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     d76:	4298      	cmp	r0, r3
     d78:	f000 80bf 	beq.w	efa <sysclk_disable_peripheral_clock+0x24a>
     d7c:	bd08      	pop	{r3, pc}
     d7e:	4b88      	ldr	r3, [pc, #544]	; (fa0 <sysclk_disable_peripheral_clock+0x2f0>)
     d80:	4298      	cmp	r0, r3
     d82:	f000 80c2 	beq.w	f0a <sysclk_disable_peripheral_clock+0x25a>
     d86:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
     d8a:	4298      	cmp	r0, r3
     d8c:	f000 80c1 	beq.w	f12 <sysclk_disable_peripheral_clock+0x262>
     d90:	bd08      	pop	{r3, pc}
     d92:	4b84      	ldr	r3, [pc, #528]	; (fa4 <sysclk_disable_peripheral_clock+0x2f4>)
     d94:	4298      	cmp	r0, r3
     d96:	f000 811f 	beq.w	fd8 <sysclk_disable_peripheral_clock+0x328>
     d9a:	d834      	bhi.n	e06 <sysclk_disable_peripheral_clock+0x156>
     d9c:	f5a3 337c 	sub.w	r3, r3, #258048	; 0x3f000
     da0:	4298      	cmp	r0, r3
     da2:	f000 80d2 	beq.w	f4a <sysclk_disable_peripheral_clock+0x29a>
     da6:	d815      	bhi.n	dd4 <sysclk_disable_peripheral_clock+0x124>
     da8:	f5a3 3304 	sub.w	r3, r3, #135168	; 0x21000
     dac:	4298      	cmp	r0, r3
     dae:	f000 80bc 	beq.w	f2a <sysclk_disable_peripheral_clock+0x27a>
     db2:	d805      	bhi.n	dc0 <sysclk_disable_peripheral_clock+0x110>
     db4:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     db8:	4298      	cmp	r0, r3
     dba:	f000 80b2 	beq.w	f22 <sysclk_disable_peripheral_clock+0x272>
     dbe:	bd08      	pop	{r3, pc}
     dc0:	4b79      	ldr	r3, [pc, #484]	; (fa8 <sysclk_disable_peripheral_clock+0x2f8>)
     dc2:	4298      	cmp	r0, r3
     dc4:	f000 80b5 	beq.w	f32 <sysclk_disable_peripheral_clock+0x282>
     dc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     dcc:	4298      	cmp	r0, r3
     dce:	f000 80b4 	beq.w	f3a <sysclk_disable_peripheral_clock+0x28a>
     dd2:	bd08      	pop	{r3, pc}
     dd4:	4b75      	ldr	r3, [pc, #468]	; (fac <sysclk_disable_peripheral_clock+0x2fc>)
     dd6:	4298      	cmp	r0, r3
     dd8:	f000 80cb 	beq.w	f72 <sysclk_disable_peripheral_clock+0x2c2>
     ddc:	d80a      	bhi.n	df4 <sysclk_disable_peripheral_clock+0x144>
     dde:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
     de2:	4298      	cmp	r0, r3
     de4:	f000 80b5 	beq.w	f52 <sysclk_disable_peripheral_clock+0x2a2>
     de8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     dec:	4298      	cmp	r0, r3
     dee:	f000 80b8 	beq.w	f62 <sysclk_disable_peripheral_clock+0x2b2>
     df2:	bd08      	pop	{r3, pc}
     df4:	4b6e      	ldr	r3, [pc, #440]	; (fb0 <sysclk_disable_peripheral_clock+0x300>)
     df6:	4298      	cmp	r0, r3
     df8:	f000 80ea 	beq.w	fd0 <sysclk_disable_peripheral_clock+0x320>
     dfc:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
     e00:	4298      	cmp	r0, r3
     e02:	d035      	beq.n	e70 <sysclk_disable_peripheral_clock+0x1c0>
     e04:	bd08      	pop	{r3, pc}
     e06:	4b6b      	ldr	r3, [pc, #428]	; (fb4 <sysclk_disable_peripheral_clock+0x304>)
     e08:	4298      	cmp	r0, r3
     e0a:	f000 80fe 	beq.w	100a <__stack_size__+0xa>
     e0e:	d815      	bhi.n	e3c <sysclk_disable_peripheral_clock+0x18c>
     e10:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
     e14:	4298      	cmp	r0, r3
     e16:	f000 80e9 	beq.w	fec <sysclk_disable_peripheral_clock+0x33c>
     e1a:	d805      	bhi.n	e28 <sysclk_disable_peripheral_clock+0x178>
     e1c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
     e20:	4298      	cmp	r0, r3
     e22:	f000 80de 	beq.w	fe2 <sysclk_disable_peripheral_clock+0x332>
     e26:	bd08      	pop	{r3, pc}
     e28:	4b63      	ldr	r3, [pc, #396]	; (fb8 <sysclk_disable_peripheral_clock+0x308>)
     e2a:	4298      	cmp	r0, r3
     e2c:	f000 80e3 	beq.w	ff6 <sysclk_disable_peripheral_clock+0x346>
     e30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     e34:	4298      	cmp	r0, r3
     e36:	f000 80e3 	beq.w	1000 <__stack_size__>
     e3a:	bd08      	pop	{r3, pc}
     e3c:	4b5f      	ldr	r3, [pc, #380]	; (fbc <sysclk_disable_peripheral_clock+0x30c>)
     e3e:	4298      	cmp	r0, r3
     e40:	f000 80f2 	beq.w	1028 <__stack_size__+0x28>
     e44:	d80a      	bhi.n	e5c <sysclk_disable_peripheral_clock+0x1ac>
     e46:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
     e4a:	4298      	cmp	r0, r3
     e4c:	f000 80e2 	beq.w	1014 <__stack_size__+0x14>
     e50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     e54:	4298      	cmp	r0, r3
     e56:	f000 80e2 	beq.w	101e <__stack_size__+0x1e>
     e5a:	bd08      	pop	{r3, pc}
     e5c:	4b58      	ldr	r3, [pc, #352]	; (fc0 <sysclk_disable_peripheral_clock+0x310>)
     e5e:	4298      	cmp	r0, r3
     e60:	f000 80e7 	beq.w	1032 <__stack_size__+0x32>
     e64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     e68:	4298      	cmp	r0, r3
     e6a:	f000 80e7 	beq.w	103c <__stack_size__+0x3c>
     e6e:	bd08      	pop	{r3, pc}
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
     e70:	2109      	movs	r1, #9
     e72:	2001      	movs	r0, #1
     e74:	4b53      	ldr	r3, [pc, #332]	; (fc4 <sysclk_disable_peripheral_clock+0x314>)
     e76:	4798      	blx	r3
     e78:	e0e4      	b.n	1044 <__stack_size__+0x44>
		sysclk_disable_hsb_module(SYSCLK_AESA_HSB);
		break;
	#endif

	case IISC_ADDR:
		sysclk_disable_pba_module(SYSCLK_IISC);
     e7a:	2000      	movs	r0, #0
     e7c:	4b52      	ldr	r3, [pc, #328]	; (fc8 <sysclk_disable_peripheral_clock+0x318>)
     e7e:	4798      	blx	r3
		break;
     e80:	e0e0      	b.n	1044 <__stack_size__+0x44>

	case SPI_ADDR:
		sysclk_disable_pba_module(SYSCLK_SPI);
     e82:	2001      	movs	r0, #1
     e84:	4b50      	ldr	r3, [pc, #320]	; (fc8 <sysclk_disable_peripheral_clock+0x318>)
     e86:	4798      	blx	r3
		break;
     e88:	e0dc      	b.n	1044 <__stack_size__+0x44>

	case TC0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TC0);
     e8a:	2002      	movs	r0, #2
     e8c:	4b4e      	ldr	r3, [pc, #312]	; (fc8 <sysclk_disable_peripheral_clock+0x318>)
     e8e:	4798      	blx	r3
		break;
     e90:	e0d8      	b.n	1044 <__stack_size__+0x44>

	case TC1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TC1);
     e92:	2003      	movs	r0, #3
     e94:	4b4c      	ldr	r3, [pc, #304]	; (fc8 <sysclk_disable_peripheral_clock+0x318>)
     e96:	4798      	blx	r3
		break;
     e98:	e0d4      	b.n	1044 <__stack_size__+0x44>

	case TWIM0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM0);
     e9a:	2004      	movs	r0, #4
     e9c:	4b4a      	ldr	r3, [pc, #296]	; (fc8 <sysclk_disable_peripheral_clock+0x318>)
     e9e:	4798      	blx	r3
		break;
     ea0:	e0d0      	b.n	1044 <__stack_size__+0x44>

	case TWIS0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIS0);
     ea2:	2005      	movs	r0, #5
     ea4:	4b48      	ldr	r3, [pc, #288]	; (fc8 <sysclk_disable_peripheral_clock+0x318>)
     ea6:	4798      	blx	r3
		break;
     ea8:	e0cc      	b.n	1044 <__stack_size__+0x44>

	case TWIM1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM1);
     eaa:	2006      	movs	r0, #6
     eac:	4b46      	ldr	r3, [pc, #280]	; (fc8 <sysclk_disable_peripheral_clock+0x318>)
     eae:	4798      	blx	r3
		break;
     eb0:	e0c8      	b.n	1044 <__stack_size__+0x44>

	case TWIS1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIS1);
     eb2:	2007      	movs	r0, #7
     eb4:	4b44      	ldr	r3, [pc, #272]	; (fc8 <sysclk_disable_peripheral_clock+0x318>)
     eb6:	4798      	blx	r3
		break;
     eb8:	e0c4      	b.n	1044 <__stack_size__+0x44>

	case USART0_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART0);
     eba:	2008      	movs	r0, #8
     ebc:	4b42      	ldr	r3, [pc, #264]	; (fc8 <sysclk_disable_peripheral_clock+0x318>)
     ebe:	4798      	blx	r3
		break;
     ec0:	e0c0      	b.n	1044 <__stack_size__+0x44>

	case USART1_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART1);
     ec2:	2009      	movs	r0, #9
     ec4:	4b40      	ldr	r3, [pc, #256]	; (fc8 <sysclk_disable_peripheral_clock+0x318>)
     ec6:	4798      	blx	r3
		break;
     ec8:	e0bc      	b.n	1044 <__stack_size__+0x44>

	case USART2_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART2);
     eca:	200a      	movs	r0, #10
     ecc:	4b3e      	ldr	r3, [pc, #248]	; (fc8 <sysclk_disable_peripheral_clock+0x318>)
     ece:	4798      	blx	r3
		break;
     ed0:	e0b8      	b.n	1044 <__stack_size__+0x44>

	case USART3_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART3);
     ed2:	200b      	movs	r0, #11
     ed4:	4b3c      	ldr	r3, [pc, #240]	; (fc8 <sysclk_disable_peripheral_clock+0x318>)
     ed6:	4798      	blx	r3
		break;
     ed8:	e0b4      	b.n	1044 <__stack_size__+0x44>

	case ADCIFE_ADDR:
		sysclk_disable_pba_module(SYSCLK_ADCIFE);
     eda:	200c      	movs	r0, #12
     edc:	4b3a      	ldr	r3, [pc, #232]	; (fc8 <sysclk_disable_peripheral_clock+0x318>)
     ede:	4798      	blx	r3
		break;
     ee0:	e0b0      	b.n	1044 <__stack_size__+0x44>

	case DACC_ADDR:
		sysclk_disable_pba_module(SYSCLK_DACC);
     ee2:	200d      	movs	r0, #13
     ee4:	4b38      	ldr	r3, [pc, #224]	; (fc8 <sysclk_disable_peripheral_clock+0x318>)
     ee6:	4798      	blx	r3
		break;
     ee8:	e0ac      	b.n	1044 <__stack_size__+0x44>

	case ACIFC_ADDR:
		sysclk_disable_pba_module(SYSCLK_ACIFC);
     eea:	200e      	movs	r0, #14
     eec:	4b36      	ldr	r3, [pc, #216]	; (fc8 <sysclk_disable_peripheral_clock+0x318>)
     eee:	4798      	blx	r3
		break;
     ef0:	e0a8      	b.n	1044 <__stack_size__+0x44>

	case GLOC_ADDR:
		sysclk_disable_pba_module(SYSCLK_GLOC);
     ef2:	200f      	movs	r0, #15
     ef4:	4b34      	ldr	r3, [pc, #208]	; (fc8 <sysclk_disable_peripheral_clock+0x318>)
     ef6:	4798      	blx	r3
		break;
     ef8:	e0a4      	b.n	1044 <__stack_size__+0x44>

	case ABDACB_ADDR:
		sysclk_disable_pba_module(SYSCLK_ABDACB);
     efa:	2010      	movs	r0, #16
     efc:	4b32      	ldr	r3, [pc, #200]	; (fc8 <sysclk_disable_peripheral_clock+0x318>)
     efe:	4798      	blx	r3
		break;
     f00:	e0a0      	b.n	1044 <__stack_size__+0x44>

	case TRNG_ADDR:
		sysclk_disable_pba_module(SYSCLK_TRNG);
     f02:	2011      	movs	r0, #17
     f04:	4b30      	ldr	r3, [pc, #192]	; (fc8 <sysclk_disable_peripheral_clock+0x318>)
     f06:	4798      	blx	r3
		break;
     f08:	e09c      	b.n	1044 <__stack_size__+0x44>

	case PARC_ADDR:
		sysclk_disable_pba_module(SYSCLK_PARC);
     f0a:	2012      	movs	r0, #18
     f0c:	4b2e      	ldr	r3, [pc, #184]	; (fc8 <sysclk_disable_peripheral_clock+0x318>)
     f0e:	4798      	blx	r3
		break;
     f10:	e098      	b.n	1044 <__stack_size__+0x44>

	case CATB_ADDR:
		sysclk_disable_pba_module(SYSCLK_CATB);
     f12:	2013      	movs	r0, #19
     f14:	4b2c      	ldr	r3, [pc, #176]	; (fc8 <sysclk_disable_peripheral_clock+0x318>)
     f16:	4798      	blx	r3
		break;
     f18:	e094      	b.n	1044 <__stack_size__+0x44>

	case TWIM2_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM2);
     f1a:	2015      	movs	r0, #21
     f1c:	4b2a      	ldr	r3, [pc, #168]	; (fc8 <sysclk_disable_peripheral_clock+0x318>)
     f1e:	4798      	blx	r3
		break;
     f20:	e090      	b.n	1044 <__stack_size__+0x44>

	case TWIM3_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM3);
     f22:	2016      	movs	r0, #22
     f24:	4b28      	ldr	r3, [pc, #160]	; (fc8 <sysclk_disable_peripheral_clock+0x318>)
     f26:	4798      	blx	r3
		break;
     f28:	e08c      	b.n	1044 <__stack_size__+0x44>

	#if !SAM4LS
	case LCDCA_ADDR:
		sysclk_disable_pba_module(SYSCLK_LCDCA);
     f2a:	2017      	movs	r0, #23
     f2c:	4b26      	ldr	r3, [pc, #152]	; (fc8 <sysclk_disable_peripheral_clock+0x318>)
     f2e:	4798      	blx	r3
		break;
     f30:	e088      	b.n	1044 <__stack_size__+0x44>
	#endif

	case HFLASHC_ADDR:
		sysclk_disable_pbb_module(SYSCLK_HFLASHC_REGS);
     f32:	2000      	movs	r0, #0
     f34:	4b25      	ldr	r3, [pc, #148]	; (fcc <sysclk_disable_peripheral_clock+0x31c>)
     f36:	4798      	blx	r3
		break;
     f38:	e084      	b.n	1044 <__stack_size__+0x44>
     f3a:	2102      	movs	r1, #2
     f3c:	2001      	movs	r0, #1
     f3e:	4b21      	ldr	r3, [pc, #132]	; (fc4 <sysclk_disable_peripheral_clock+0x314>)
     f40:	4798      	blx	r3

	case HCACHE_ADDR:
		sysclk_disable_hsb_module(SYSCLK_HRAMC1_DATA);
		sysclk_disable_pbb_module(SYSCLK_HRAMC1_REGS);
     f42:	2001      	movs	r0, #1
     f44:	4b21      	ldr	r3, [pc, #132]	; (fcc <sysclk_disable_peripheral_clock+0x31c>)
     f46:	4798      	blx	r3
		break;
     f48:	e07c      	b.n	1044 <__stack_size__+0x44>

	case HMATRIX_ADDR:
		sysclk_disable_pbb_module(SYSCLK_HMATRIX);
     f4a:	2002      	movs	r0, #2
     f4c:	4b1f      	ldr	r3, [pc, #124]	; (fcc <sysclk_disable_peripheral_clock+0x31c>)
     f4e:	4798      	blx	r3
		break;
     f50:	e078      	b.n	1044 <__stack_size__+0x44>
     f52:	2100      	movs	r1, #0
     f54:	2001      	movs	r0, #1
     f56:	4b1b      	ldr	r3, [pc, #108]	; (fc4 <sysclk_disable_peripheral_clock+0x314>)
     f58:	4798      	blx	r3

	case PDCA_ADDR:
		sysclk_disable_hsb_module(SYSCLK_PDCA_HSB);
		sysclk_disable_pbb_module(SYSCLK_PDCA_PB);
     f5a:	2003      	movs	r0, #3
     f5c:	4b1b      	ldr	r3, [pc, #108]	; (fcc <sysclk_disable_peripheral_clock+0x31c>)
     f5e:	4798      	blx	r3
		break;
     f60:	e070      	b.n	1044 <__stack_size__+0x44>
     f62:	2104      	movs	r1, #4
     f64:	2001      	movs	r0, #1
     f66:	4b17      	ldr	r3, [pc, #92]	; (fc4 <sysclk_disable_peripheral_clock+0x314>)
     f68:	4798      	blx	r3

	case CRCCU_ADDR:
		sysclk_disable_hsb_module(SYSCLK_CRCCU_DATA);
		sysclk_disable_pbb_module(SYSCLK_CRCCU_REGS);
     f6a:	2004      	movs	r0, #4
     f6c:	4b17      	ldr	r3, [pc, #92]	; (fcc <sysclk_disable_peripheral_clock+0x31c>)
     f6e:	4798      	blx	r3
		break;
     f70:	e068      	b.n	1044 <__stack_size__+0x44>
     f72:	2103      	movs	r1, #3
     f74:	2001      	movs	r0, #1
     f76:	4b13      	ldr	r3, [pc, #76]	; (fc4 <sysclk_disable_peripheral_clock+0x314>)
     f78:	4798      	blx	r3

	case USBC_ADDR:
		sysclk_disable_hsb_module(SYSCLK_USBC_DATA);
		sysclk_disable_pbb_module(SYSCLK_USBC_REGS);
     f7a:	2005      	movs	r0, #5
     f7c:	4b13      	ldr	r3, [pc, #76]	; (fcc <sysclk_disable_peripheral_clock+0x31c>)
     f7e:	4798      	blx	r3
		break;
     f80:	e060      	b.n	1044 <__stack_size__+0x44>
     f82:	bf00      	nop
     f84:	40078000 	.word	0x40078000
     f88:	40010000 	.word	0x40010000
     f8c:	4001c000 	.word	0x4001c000
     f90:	4001c400 	.word	0x4001c400
     f94:	40040000 	.word	0x40040000
     f98:	40038000 	.word	0x40038000
     f9c:	40068000 	.word	0x40068000
     fa0:	4006c000 	.word	0x4006c000
     fa4:	400e0000 	.word	0x400e0000
     fa8:	400a0000 	.word	0x400a0000
     fac:	400a5000 	.word	0x400a5000
     fb0:	400a6000 	.word	0x400a6000
     fb4:	400f0000 	.word	0x400f0000
     fb8:	400e0c00 	.word	0x400e0c00
     fbc:	400f0c00 	.word	0x400f0c00
     fc0:	400f1000 	.word	0x400f1000
     fc4:	0000053d 	.word	0x0000053d
     fc8:	000005f1 	.word	0x000005f1
     fcc:	00000699 	.word	0x00000699

	case PEVC_ADDR:
		sysclk_disable_pbb_module(SYSCLK_PEVC);
     fd0:	2006      	movs	r0, #6
     fd2:	4b23      	ldr	r3, [pc, #140]	; (1060 <__stack_size__+0x60>)
     fd4:	4798      	blx	r3
		break;
     fd6:	e035      	b.n	1044 <__stack_size__+0x44>
 * \brief Disable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbc_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_PBC, module_index);
     fd8:	2100      	movs	r1, #0
     fda:	2004      	movs	r0, #4
     fdc:	4b21      	ldr	r3, [pc, #132]	; (1064 <__stack_size__+0x64>)
     fde:	4798      	blx	r3
     fe0:	e030      	b.n	1044 <__stack_size__+0x44>
     fe2:	2101      	movs	r1, #1
     fe4:	2004      	movs	r0, #4
     fe6:	4b1f      	ldr	r3, [pc, #124]	; (1064 <__stack_size__+0x64>)
     fe8:	4798      	blx	r3
     fea:	e02b      	b.n	1044 <__stack_size__+0x44>
     fec:	2102      	movs	r1, #2
     fee:	2004      	movs	r0, #4
     ff0:	4b1c      	ldr	r3, [pc, #112]	; (1064 <__stack_size__+0x64>)
     ff2:	4798      	blx	r3
     ff4:	e026      	b.n	1044 <__stack_size__+0x44>
     ff6:	2103      	movs	r1, #3
     ff8:	2004      	movs	r0, #4
     ffa:	4b1a      	ldr	r3, [pc, #104]	; (1064 <__stack_size__+0x64>)
     ffc:	4798      	blx	r3
     ffe:	e021      	b.n	1044 <__stack_size__+0x44>
    1000:	2104      	movs	r1, #4
    1002:	4608      	mov	r0, r1
    1004:	4b17      	ldr	r3, [pc, #92]	; (1064 <__stack_size__+0x64>)
    1006:	4798      	blx	r3
    1008:	e01c      	b.n	1044 <__stack_size__+0x44>
 * \brief Disable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbd_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_PBD, module_index);
    100a:	2100      	movs	r1, #0
    100c:	2005      	movs	r0, #5
    100e:	4b15      	ldr	r3, [pc, #84]	; (1064 <__stack_size__+0x64>)
    1010:	4798      	blx	r3
    1012:	e017      	b.n	1044 <__stack_size__+0x44>
    1014:	2101      	movs	r1, #1
    1016:	2005      	movs	r0, #5
    1018:	4b12      	ldr	r3, [pc, #72]	; (1064 <__stack_size__+0x64>)
    101a:	4798      	blx	r3
    101c:	e012      	b.n	1044 <__stack_size__+0x44>
    101e:	2102      	movs	r1, #2
    1020:	2005      	movs	r0, #5
    1022:	4b10      	ldr	r3, [pc, #64]	; (1064 <__stack_size__+0x64>)
    1024:	4798      	blx	r3
    1026:	e00d      	b.n	1044 <__stack_size__+0x44>
    1028:	2103      	movs	r1, #3
    102a:	2005      	movs	r0, #5
    102c:	4b0d      	ldr	r3, [pc, #52]	; (1064 <__stack_size__+0x64>)
    102e:	4798      	blx	r3
    1030:	e008      	b.n	1044 <__stack_size__+0x44>
    1032:	2104      	movs	r1, #4
    1034:	2005      	movs	r0, #5
    1036:	4b0b      	ldr	r3, [pc, #44]	; (1064 <__stack_size__+0x64>)
    1038:	4798      	blx	r3
    103a:	e003      	b.n	1044 <__stack_size__+0x44>
    103c:	2105      	movs	r1, #5
    103e:	4608      	mov	r0, r1
    1040:	4b08      	ldr	r3, [pc, #32]	; (1064 <__stack_size__+0x64>)
    1042:	4798      	blx	r3
							(1 << SYSCLK_TC1) | \
							(1 << SYSCLK_USART0) | \
							(1 << SYSCLK_USART1) | \
							(1 << SYSCLK_USART2) | \
							(1 << SYSCLK_USART3))
	if ((PM->PM_PBAMASK & PBADIV_CLKSRC_MASK) == 0) {
    1044:	4b08      	ldr	r3, [pc, #32]	; (1068 <__stack_size__+0x68>)
    1046:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1048:	f640 730c 	movw	r3, #3852	; 0xf0c
    104c:	421a      	tst	r2, r3
    104e:	d106      	bne.n	105e <__stack_size__+0x5e>
 */
static inline void sysclk_disable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    1050:	4b05      	ldr	r3, [pc, #20]	; (1068 <__stack_size__+0x68>)
    1052:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask &= ~mask;
    1054:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1058:	4904      	ldr	r1, [pc, #16]	; (106c <__stack_size__+0x6c>)
    105a:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    105c:	641a      	str	r2, [r3, #64]	; 0x40
    105e:	bd08      	pop	{r3, pc}
    1060:	00000699 	.word	0x00000699
    1064:	0000053d 	.word	0x0000053d
    1068:	400e0000 	.word	0x400e0000
    106c:	aa000040 	.word	0xaa000040

00001070 <sysclk_init>:
   genclk_disable(7);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
    1070:	b530      	push	{r4, r5, lr}
    1072:	b083      	sub	sp, #12
	uint32_t ps_value = 0;
	bool is_fwu_enabled = false;

#if CONFIG_HCACHE_ENABLE == 1
	/* Enable HCACHE */
	sysclk_enable_peripheral_clock(HCACHE);
    1074:	4c16      	ldr	r4, [pc, #88]	; (10d0 <sysclk_init+0x60>)
    1076:	4620      	mov	r0, r4
    1078:	4b16      	ldr	r3, [pc, #88]	; (10d4 <sysclk_init+0x64>)
    107a:	4798      	blx	r3
	HCACHE->HCACHE_CTRL = HCACHE_CTRL_CEN_YES;
    107c:	2301      	movs	r3, #1
    107e:	60a3      	str	r3, [r4, #8]
	while (!(HCACHE->HCACHE_SR & HCACHE_SR_CSTS_EN));
    1080:	4622      	mov	r2, r4
    1082:	68d3      	ldr	r3, [r2, #12]
    1084:	f013 0f01 	tst.w	r3, #1
    1088:	d0fb      	beq.n	1082 <sysclk_init+0x12>
	if (!no_halt) {
		bpm_power_scaling_cpu(bpm, ps_value);
		return true;
	}

	return bpm_power_scaling_cpu_failsafe(bpm, ps_value, 240000);
    108a:	4a13      	ldr	r2, [pc, #76]	; (10d8 <sysclk_init+0x68>)
    108c:	2100      	movs	r1, #0
    108e:	4813      	ldr	r0, [pc, #76]	; (10dc <sysclk_init+0x6c>)
    1090:	4b13      	ldr	r3, [pc, #76]	; (10e0 <sysclk_init+0x70>)
    1092:	4798      	blx	r3
		Assert(false);
	}

	/* Automatically switch to low power mode */
	bpm_configure_power_scaling(BPM, ps_value, BPM_PSCM_CPU_NOT_HALT);
	while ((bpm_get_status(BPM) & BPM_SR_PSOK) == 0);
    1094:	4d11      	ldr	r5, [pc, #68]	; (10dc <sysclk_init+0x6c>)
    1096:	4c13      	ldr	r4, [pc, #76]	; (10e4 <sysclk_init+0x74>)
    1098:	4628      	mov	r0, r5
    109a:	47a0      	blx	r4
    109c:	f010 0f01 	tst.w	r0, #1
    10a0:	d0fa      	beq.n	1098 <sysclk_init+0x28>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    10a2:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    10a6:	fab3 f383 	clz	r3, r3
    10aa:	095b      	lsrs	r3, r3, #5
    10ac:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    10ae:	b672      	cpsid	i
    10b0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    10b4:	2200      	movs	r2, #0
    10b6:	4b0c      	ldr	r3, [pc, #48]	; (10e8 <sysclk_init+0x78>)
    10b8:	701a      	strb	r2, [r3, #0]
	return flags;
    10ba:	9b01      	ldr	r3, [sp, #4]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    10bc:	b12b      	cbz	r3, 10ca <sysclk_init+0x5a>
		cpu_irq_enable();
    10be:	2201      	movs	r2, #1
    10c0:	4b09      	ldr	r3, [pc, #36]	; (10e8 <sysclk_init+0x78>)
    10c2:	701a      	strb	r2, [r3, #0]
    10c4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    10c8:	b662      	cpsie	i

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
    10ca:	b003      	add	sp, #12
    10cc:	bd30      	pop	{r4, r5, pc}
    10ce:	bf00      	nop
    10d0:	400a0400 	.word	0x400a0400
    10d4:	000008b1 	.word	0x000008b1
    10d8:	0003a980 	.word	0x0003a980
    10dc:	400f0000 	.word	0x400f0000
    10e0:	0000118d 	.word	0x0000118d
    10e4:	00001201 	.word	0x00001201
    10e8:	2000002c 	.word	0x2000002c

000010ec <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_disable_pin(pin);\
	} while (0)

void board_init(void)
{
    10ec:	b500      	push	{lr}
    10ee:	b089      	sub	sp, #36	; 0x24
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	struct wdt_dev_inst wdt_inst;
	struct wdt_config   wdt_cfg;

	wdt_get_config_defaults(&wdt_cfg);
    10f0:	a801      	add	r0, sp, #4
    10f2:	4b1f      	ldr	r3, [pc, #124]	; (1170 <board_init+0x84>)
    10f4:	4798      	blx	r3
	wdt_init(&wdt_inst, WDT, &wdt_cfg);
    10f6:	aa01      	add	r2, sp, #4
    10f8:	491e      	ldr	r1, [pc, #120]	; (1174 <board_init+0x88>)
    10fa:	a806      	add	r0, sp, #24
    10fc:	4b1e      	ldr	r3, [pc, #120]	; (1178 <board_init+0x8c>)
    10fe:	4798      	blx	r3
	wdt_disable(&wdt_inst);
    1100:	a806      	add	r0, sp, #24
    1102:	4b1e      	ldr	r3, [pc, #120]	; (117c <board_init+0x90>)
    1104:	4798      	blx	r3
	return 1U << (pin & 0x1F);
}

__always_inline static void arch_ioport_init(void)
{
	sysclk_enable_peripheral_clock(GPIO);
    1106:	481e      	ldr	r0, [pc, #120]	; (1180 <board_init+0x94>)
    1108:	4b1e      	ldr	r3, [pc, #120]	; (1184 <board_init+0x98>)
    110a:	4798      	blx	r3

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    110c:	4b1e      	ldr	r3, [pc, #120]	; (1188 <board_init+0x9c>)
    110e:	2280      	movs	r2, #128	; 0x80
    1110:	645a      	str	r2, [r3, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    1112:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    1116:	655a      	str	r2, [r3, #84]	; 0x54
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    1118:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    111c:	649a      	str	r2, [r3, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    111e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
    1122:	675a      	str	r2, [r3, #116]	; 0x74

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    1124:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    1128:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    112c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    1130:	619a      	str	r2, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    1132:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    1134:	639a      	str	r2, [r3, #56]	; 0x38
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    1136:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    113a:	679a      	str	r2, [r3, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    113c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    1140:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    1144:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    1148:	619a      	str	r2, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    114a:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    114c:	639a      	str	r2, [r3, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    114e:	609a      	str	r2, [r3, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    1150:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    1154:	679a      	str	r2, [r3, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    1156:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    115a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    115e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    1162:	619a      	str	r2, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    1164:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    1166:	639a      	str	r2, [r3, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    1168:	609a      	str	r2, [r3, #8]
	ioport_set_pin_dir(UG_2832HSWEG04_DATA_CMD_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(UG_2832HSWEG04_DATA_CMD_GPIO, IOPORT_MODE_PULLUP);
	ioport_set_pin_dir(UG_2832HSWEG04_RESET_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(UG_2832HSWEG04_RESET_GPIO, IOPORT_MODE_PULLUP);
#endif
}
    116a:	b009      	add	sp, #36	; 0x24
    116c:	f85d fb04 	ldr.w	pc, [sp], #4
    1170:	0000123d 	.word	0x0000123d
    1174:	400f0c00 	.word	0x400f0c00
    1178:	00001255 	.word	0x00001255
    117c:	00001305 	.word	0x00001305
    1180:	400e1000 	.word	0x400e1000
    1184:	000008b1 	.word	0x000008b1
    1188:	400e1400 	.word	0x400e1400

0000118c <bpm_power_scaling_cpu_failsafe>:
}


bool bpm_power_scaling_cpu_failsafe(Bpm *bpm, uint32_t ps_value,
	uint32_t timeout)
{
    118c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1190:	b083      	sub	sp, #12
	uint32_t pmcon = 0;

	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;
    1192:	69c3      	ldr	r3, [r0, #28]
    1194:	f023 0303 	bic.w	r3, r3, #3
    1198:	f043 030c 	orr.w	r3, r3, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    119c:	f3ef 8410 	mrs	r4, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    11a0:	fab4 f484 	clz	r4, r4
    11a4:	0964      	lsrs	r4, r4, #5
    11a6:	9401      	str	r4, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    11a8:	b672      	cpsid	i
    11aa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    11ae:	2500      	movs	r5, #0
    11b0:	4c10      	ldr	r4, [pc, #64]	; (11f4 <bpm_power_scaling_cpu_failsafe+0x68>)
    11b2:	7025      	strb	r5, [r4, #0]
	return flags;
    11b4:	9e01      	ldr	r6, [sp, #4]
	uint32_t ctrl, load, val;
	/* Avoid interrupt while flash halt */
	flags = cpu_irq_save();

	/* Save SysTick */
	val = SysTick->VAL;
    11b6:	4c10      	ldr	r4, [pc, #64]	; (11f8 <bpm_power_scaling_cpu_failsafe+0x6c>)
    11b8:	f8d4 8008 	ldr.w	r8, [r4, #8]
	ctrl = SysTick->CTRL;
    11bc:	6827      	ldr	r7, [r4, #0]
	load = SysTick->LOAD;
    11be:	f8d4 9004 	ldr.w	r9, [r4, #4]
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
    11c2:	6062      	str	r2, [r4, #4]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    11c4:	2205      	movs	r2, #5
    11c6:	6022      	str	r2, [r4, #0]

	b_psok = bpm_ps_no_halt_exec(bpm, pmcon);
    11c8:	f001 0103 	and.w	r1, r1, #3
    11cc:	4319      	orrs	r1, r3
    11ce:	4b0b      	ldr	r3, [pc, #44]	; (11fc <bpm_power_scaling_cpu_failsafe+0x70>)
    11d0:	4798      	blx	r3

	/* Restore SysTick */
	SysTick->CTRL = 0;
    11d2:	6025      	str	r5, [r4, #0]
	SysTick->LOAD = load;
    11d4:	f8c4 9004 	str.w	r9, [r4, #4]
	SysTick->VAL = val;
    11d8:	f8c4 8008 	str.w	r8, [r4, #8]
	SysTick->CTRL = ctrl;
    11dc:	6027      	str	r7, [r4, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    11de:	b12e      	cbz	r6, 11ec <bpm_power_scaling_cpu_failsafe+0x60>
		cpu_irq_enable();
    11e0:	2201      	movs	r2, #1
    11e2:	4b04      	ldr	r3, [pc, #16]	; (11f4 <bpm_power_scaling_cpu_failsafe+0x68>)
    11e4:	701a      	strb	r2, [r3, #0]
    11e6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    11ea:	b662      	cpsie	i

	cpu_irq_restore(flags);
	return b_psok;
}
    11ec:	b003      	add	sp, #12
    11ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    11f2:	bf00      	nop
    11f4:	2000002c 	.word	0x2000002c
    11f8:	e000e010 	.word	0xe000e010
    11fc:	20000001 	.word	0x20000001

00001200 <bpm_get_status>:
	bpm->BPM_ICR = sources;
}

uint32_t bpm_get_status(Bpm *bpm)
{
	return bpm->BPM_SR;
    1200:	6940      	ldr	r0, [r0, #20]
}
    1202:	4770      	bx	lr

00001204 <wdt_set_ctrl>:
 *        to the WatchDog Timer key.
 *
 * \param ctrl  Value to set the WatchDog Timer Control register to.
 */
static void wdt_set_ctrl(uint32_t ctrl)
{
    1204:	b082      	sub	sp, #8
	volatile uint32_t dly;

	/* Calculate delay for internal synchronization, see 44.1.2 WDT errata */
	if ((WDT->WDT_CTRL & WDT_CTRL_CSSEL) == WDT_CLK_SRC_RCSYS) {
    1206:	4b0c      	ldr	r3, [pc, #48]	; (1238 <wdt_set_ctrl+0x34>)
    1208:	681b      	ldr	r3, [r3, #0]
    120a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RCSYS_NOMINAL_HZ);
    120e:	bf0c      	ite	eq
    1210:	2302      	moveq	r3, #2
	} else { /* WDT_CLK_SRC_32K */
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RC32K_NOMINAL_HZ);
    1212:	2308      	movne	r3, #8
    1214:	9301      	str	r3, [sp, #4]
	}
	dly >>= 3; /* ~8 cycles for one while loop */
    1216:	9b01      	ldr	r3, [sp, #4]
    1218:	08db      	lsrs	r3, r3, #3
    121a:	9301      	str	r3, [sp, #4]
	while(dly--);
    121c:	9b01      	ldr	r3, [sp, #4]
    121e:	1e5a      	subs	r2, r3, #1
    1220:	9201      	str	r2, [sp, #4]
    1222:	2b00      	cmp	r3, #0
    1224:	d1fa      	bne.n	121c <wdt_set_ctrl+0x18>
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_FIRST_KEY);
    1226:	f040 42aa 	orr.w	r2, r0, #1426063360	; 0x55000000
    122a:	4b03      	ldr	r3, [pc, #12]	; (1238 <wdt_set_ctrl+0x34>)
    122c:	601a      	str	r2, [r3, #0]
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_SECOND_KEY);
    122e:	f040 402a 	orr.w	r0, r0, #2852126720	; 0xaa000000
    1232:	6018      	str	r0, [r3, #0]
}
    1234:	b002      	add	sp, #8
    1236:	4770      	bx	lr
    1238:	400f0c00 	.word	0x400f0c00

0000123c <wdt_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(cfg);

	/* Default configuration values */
	cfg->clk_src = WDT_CLK_SRC_RCSYS;
    123c:	2300      	movs	r3, #0
    123e:	6003      	str	r3, [r0, #0]
	cfg->wdt_mode = WDT_MODE_BASIC;
    1240:	6043      	str	r3, [r0, #4]
	cfg->wdt_int = WDT_INT_DIS;
    1242:	6083      	str	r3, [r0, #8]
	cfg->timeout_period = WDT_PERIOD_131072_CLK;
    1244:	2210      	movs	r2, #16
    1246:	7302      	strb	r2, [r0, #12]
	cfg->window_period = WDT_PERIOD_NONE;
    1248:	7343      	strb	r3, [r0, #13]
	cfg->disable_flash_cali = true;
    124a:	2201      	movs	r2, #1
    124c:	7382      	strb	r2, [r0, #14]
	cfg->disable_wdt_after_reset = true;
    124e:	73c2      	strb	r2, [r0, #15]
	cfg->always_on = false;
    1250:	7403      	strb	r3, [r0, #16]
    1252:	4770      	bx	lr

00001254 <wdt_init>:
 */
bool wdt_init(
		struct wdt_dev_inst *const dev_inst,
		Wdt *const wdt,
		struct wdt_config *const cfg)
{
    1254:	b570      	push	{r4, r5, r6, lr}
    1256:	460c      	mov	r4, r1
    1258:	4616      	mov	r6, r2
	/* Sanity check arguments */
	Assert(dev_inst);
	Assert(wdt);
	Assert(cfg);

	dev_inst->hw_dev = wdt;
    125a:	6001      	str	r1, [r0, #0]
	dev_inst->wdt_cfg = cfg;
    125c:	6042      	str	r2, [r0, #4]

	/* Enable APB clock for WDT */
	sysclk_enable_peripheral_clock(wdt);
    125e:	4608      	mov	r0, r1
    1260:	4b25      	ldr	r3, [pc, #148]	; (12f8 <wdt_init+0xa4>)
    1262:	4798      	blx	r3

	/* Check SFV bit: if SFV bit is set, Control Register is locked */
	if (wdt->WDT_CTRL & WDT_CTRL_SFV) {
    1264:	6825      	ldr	r5, [r4, #0]
    1266:	f015 0508 	ands.w	r5, r5, #8
    126a:	d142      	bne.n	12f2 <wdt_init+0x9e>
		return false;
	}

	/* Disable the WDT */
	if (wdt->WDT_CTRL & WDT_CTRL_EN) {
    126c:	6823      	ldr	r3, [r4, #0]
    126e:	f013 0f01 	tst.w	r3, #1
    1272:	d008      	beq.n	1286 <wdt_init+0x32>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    1274:	6820      	ldr	r0, [r4, #0]
    1276:	f020 0001 	bic.w	r0, r0, #1
    127a:	4b20      	ldr	r3, [pc, #128]	; (12fc <wdt_init+0xa8>)
    127c:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    127e:	6823      	ldr	r3, [r4, #0]
    1280:	f013 0f01 	tst.w	r3, #1
    1284:	d1fb      	bne.n	127e <wdt_init+0x2a>
		}
	}
	/* Disable the WDT clock */
	if (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    1286:	6823      	ldr	r3, [r4, #0]
    1288:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    128c:	d008      	beq.n	12a0 <wdt_init+0x4c>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_CEN);
    128e:	6820      	ldr	r0, [r4, #0]
    1290:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    1294:	4b19      	ldr	r3, [pc, #100]	; (12fc <wdt_init+0xa8>)
    1296:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    1298:	6823      	ldr	r3, [r4, #0]
    129a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    129e:	d1fb      	bne.n	1298 <wdt_init+0x44>

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
			cfg->wdt_mode |
			cfg->wdt_int |
			WDT_CTRL_PSEL(cfg->timeout_period) |
    12a0:	6830      	ldr	r0, [r6, #0]
    12a2:	6873      	ldr	r3, [r6, #4]
    12a4:	4318      	orrs	r0, r3
    12a6:	68b3      	ldr	r3, [r6, #8]
    12a8:	4318      	orrs	r0, r3
    12aa:	7b33      	ldrb	r3, [r6, #12]
    12ac:	021b      	lsls	r3, r3, #8
    12ae:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    12b2:	4318      	orrs	r0, r3
    12b4:	7b73      	ldrb	r3, [r6, #13]
    12b6:	049b      	lsls	r3, r3, #18
    12b8:	f403 03f8 	and.w	r3, r3, #8126464	; 0x7c0000
    12bc:	4303      	orrs	r3, r0
			WDT_CTRL_TBAN(cfg->window_period) |
    12be:	7bb2      	ldrb	r2, [r6, #14]
    12c0:	2a00      	cmp	r2, #0
    12c2:	bf0c      	ite	eq
    12c4:	4628      	moveq	r0, r5
    12c6:	2080      	movne	r0, #128	; 0x80
    12c8:	4318      	orrs	r0, r3
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    12ca:	7bf3      	ldrb	r3, [r6, #15]
    12cc:	2b00      	cmp	r3, #0
    12ce:	bf18      	it	ne
    12d0:	2502      	movne	r5, #2
    12d2:	4328      	orrs	r0, r5
    12d4:	4d09      	ldr	r5, [pc, #36]	; (12fc <wdt_init+0xa8>)
    12d6:	47a8      	blx	r5
			WDT_CTRL_PSEL(cfg->timeout_period) |
			WDT_CTRL_TBAN(cfg->window_period) |
			(cfg->disable_flash_cali ? WDT_CTRL_FCD : 0) |
			(cfg->disable_wdt_after_reset ? WDT_CTRL_DAR : 0)
	);
	wdt_set_ctrl(wdt->WDT_CTRL | WDT_CTRL_CEN);
    12d8:	6820      	ldr	r0, [r4, #0]
    12da:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    12de:	47a8      	blx	r5
	while (!(wdt->WDT_CTRL & WDT_CTRL_CEN)) {
    12e0:	6823      	ldr	r3, [r4, #0]
    12e2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    12e6:	d0fb      	beq.n	12e0 <wdt_init+0x8c>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    12e8:	4620      	mov	r0, r4
    12ea:	4b05      	ldr	r3, [pc, #20]	; (1300 <wdt_init+0xac>)
    12ec:	4798      	blx	r3

	return true;
    12ee:	2001      	movs	r0, #1
    12f0:	bd70      	pop	{r4, r5, r6, pc}
	/* Enable APB clock for WDT */
	sysclk_enable_peripheral_clock(wdt);

	/* Check SFV bit: if SFV bit is set, Control Register is locked */
	if (wdt->WDT_CTRL & WDT_CTRL_SFV) {
		return false;
    12f2:	2000      	movs	r0, #0

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);

	return true;
}
    12f4:	bd70      	pop	{r4, r5, r6, pc}
    12f6:	bf00      	nop
    12f8:	000008b1 	.word	0x000008b1
    12fc:	00001205 	.word	0x00001205
    1300:	00000cb1 	.word	0x00000cb1

00001304 <wdt_disable>:
 * \brief Disable the WDT module.
 *
 * \param dev_inst    Device structure pointer.
 */
void wdt_disable(struct wdt_dev_inst *const dev_inst)
{
    1304:	b510      	push	{r4, lr}
	Wdt *wdt = dev_inst->hw_dev;
    1306:	6804      	ldr	r4, [r0, #0]

	/* Disable the WDT */
	wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    1308:	6820      	ldr	r0, [r4, #0]
    130a:	f020 0001 	bic.w	r0, r0, #1
    130e:	4b05      	ldr	r3, [pc, #20]	; (1324 <wdt_disable+0x20>)
    1310:	4798      	blx	r3
	while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    1312:	6823      	ldr	r3, [r4, #0]
    1314:	f013 0f01 	tst.w	r3, #1
    1318:	d1fb      	bne.n	1312 <wdt_disable+0xe>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    131a:	4620      	mov	r0, r4
    131c:	4b02      	ldr	r3, [pc, #8]	; (1328 <wdt_disable+0x24>)
    131e:	4798      	blx	r3
    1320:	bd10      	pop	{r4, pc}
    1322:	bf00      	nop
    1324:	00001205 	.word	0x00001205
    1328:	00000cb1 	.word	0x00000cb1

0000132c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    132c:	e7fe      	b.n	132c <Dummy_Handler>
    132e:	bf00      	nop

00001330 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1330:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
    1332:	4b19      	ldr	r3, [pc, #100]	; (1398 <Reset_Handler+0x68>)
    1334:	4a19      	ldr	r2, [pc, #100]	; (139c <Reset_Handler+0x6c>)
    1336:	429a      	cmp	r2, r3
    1338:	d003      	beq.n	1342 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
    133a:	4b19      	ldr	r3, [pc, #100]	; (13a0 <Reset_Handler+0x70>)
    133c:	4a16      	ldr	r2, [pc, #88]	; (1398 <Reset_Handler+0x68>)
    133e:	429a      	cmp	r2, r3
    1340:	d304      	bcc.n	134c <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    1342:	4b18      	ldr	r3, [pc, #96]	; (13a4 <Reset_Handler+0x74>)
    1344:	4a18      	ldr	r2, [pc, #96]	; (13a8 <Reset_Handler+0x78>)
    1346:	429a      	cmp	r2, r3
    1348:	d30f      	bcc.n	136a <Reset_Handler+0x3a>
    134a:	e01a      	b.n	1382 <Reset_Handler+0x52>
    134c:	4912      	ldr	r1, [pc, #72]	; (1398 <Reset_Handler+0x68>)
    134e:	4b17      	ldr	r3, [pc, #92]	; (13ac <Reset_Handler+0x7c>)
    1350:	1a5b      	subs	r3, r3, r1
    1352:	f023 0303 	bic.w	r3, r3, #3
    1356:	3304      	adds	r3, #4
    1358:	4a10      	ldr	r2, [pc, #64]	; (139c <Reset_Handler+0x6c>)
    135a:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
    135c:	f852 0b04 	ldr.w	r0, [r2], #4
    1360:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    1364:	429a      	cmp	r2, r3
    1366:	d1f9      	bne.n	135c <Reset_Handler+0x2c>
    1368:	e7eb      	b.n	1342 <Reset_Handler+0x12>
    136a:	4b11      	ldr	r3, [pc, #68]	; (13b0 <Reset_Handler+0x80>)
    136c:	4a11      	ldr	r2, [pc, #68]	; (13b4 <Reset_Handler+0x84>)
    136e:	1ad2      	subs	r2, r2, r3
    1370:	f022 0203 	bic.w	r2, r2, #3
    1374:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    1376:	3b04      	subs	r3, #4
		*pDest++ = 0;
    1378:	2100      	movs	r1, #0
    137a:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    137e:	4293      	cmp	r3, r2
    1380:	d1fb      	bne.n	137a <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) &_sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1382:	4a0d      	ldr	r2, [pc, #52]	; (13b8 <Reset_Handler+0x88>)
    1384:	4b0d      	ldr	r3, [pc, #52]	; (13bc <Reset_Handler+0x8c>)
    1386:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    138a:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
    138c:	4b0c      	ldr	r3, [pc, #48]	; (13c0 <Reset_Handler+0x90>)
    138e:	4798      	blx	r3

	/* Branch to main function */
	main();
    1390:	4b0c      	ldr	r3, [pc, #48]	; (13c4 <Reset_Handler+0x94>)
    1392:	4798      	blx	r3
    1394:	e7fe      	b.n	1394 <Reset_Handler+0x64>
    1396:	bf00      	nop
    1398:	20000000 	.word	0x20000000
    139c:	000046ec 	.word	0x000046ec
    13a0:	20000894 	.word	0x20000894
    13a4:	20000930 	.word	0x20000930
    13a8:	20000894 	.word	0x20000894
    13ac:	20000893 	.word	0x20000893
    13b0:	20000898 	.word	0x20000898
    13b4:	20000933 	.word	0x20000933
    13b8:	e000ed00 	.word	0xe000ed00
    13bc:	00000000 	.word	0x00000000
    13c0:	000015c1 	.word	0x000015c1
    13c4:	000014b5 	.word	0x000014b5

000013c8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
    13c8:	4b09      	ldr	r3, [pc, #36]	; (13f0 <_sbrk+0x28>)
    13ca:	681b      	ldr	r3, [r3, #0]
    13cc:	b913      	cbnz	r3, 13d4 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
    13ce:	4a09      	ldr	r2, [pc, #36]	; (13f4 <_sbrk+0x2c>)
    13d0:	4b07      	ldr	r3, [pc, #28]	; (13f0 <_sbrk+0x28>)
    13d2:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    13d4:	4b06      	ldr	r3, [pc, #24]	; (13f0 <_sbrk+0x28>)
    13d6:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
    13d8:	181a      	adds	r2, r3, r0
    13da:	4907      	ldr	r1, [pc, #28]	; (13f8 <_sbrk+0x30>)
    13dc:	4291      	cmp	r1, r2
    13de:	db04      	blt.n	13ea <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
    13e0:	4610      	mov	r0, r2
    13e2:	4a03      	ldr	r2, [pc, #12]	; (13f0 <_sbrk+0x28>)
    13e4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
    13e6:	4618      	mov	r0, r3
    13e8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
    13ea:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
    13ee:	4770      	bx	lr
    13f0:	200008e8 	.word	0x200008e8
    13f4:	20001930 	.word	0x20001930
    13f8:	20007ffc 	.word	0x20007ffc

000013fc <_close>:
}

extern int _close(int file)
{
	return -1;
}
    13fc:	f04f 30ff 	mov.w	r0, #4294967295
    1400:	4770      	bx	lr
    1402:	bf00      	nop

00001404 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    1408:	604b      	str	r3, [r1, #4]

	return 0;
}
    140a:	2000      	movs	r0, #0
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1410:	2001      	movs	r0, #1
    1412:	4770      	bx	lr

00001414 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1414:	2000      	movs	r0, #0
    1416:	4770      	bx	lr

00001418 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
    1418:	b570      	push	{r4, r5, r6, lr}
    141a:	460c      	mov	r4, r1
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
    141c:	4b18      	ldr	r3, [pc, #96]	; (1480 <usart_serial_putchar+0x68>)
    141e:	4298      	cmp	r0, r3
    1420:	d108      	bne.n	1434 <usart_serial_putchar+0x1c>
		while (usart_write(p_usart, c)!=0);
    1422:	461e      	mov	r6, r3
    1424:	4d17      	ldr	r5, [pc, #92]	; (1484 <usart_serial_putchar+0x6c>)
    1426:	4621      	mov	r1, r4
    1428:	4630      	mov	r0, r6
    142a:	47a8      	blx	r5
    142c:	2800      	cmp	r0, #0
    142e:	d1fa      	bne.n	1426 <usart_serial_putchar+0xe>
		return 1;
    1430:	2001      	movs	r0, #1
    1432:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
    1434:	4b14      	ldr	r3, [pc, #80]	; (1488 <usart_serial_putchar+0x70>)
    1436:	4298      	cmp	r0, r3
    1438:	d108      	bne.n	144c <usart_serial_putchar+0x34>
		while (usart_write(p_usart, c)!=0);
    143a:	461e      	mov	r6, r3
    143c:	4d11      	ldr	r5, [pc, #68]	; (1484 <usart_serial_putchar+0x6c>)
    143e:	4621      	mov	r1, r4
    1440:	4630      	mov	r0, r6
    1442:	47a8      	blx	r5
    1444:	2800      	cmp	r0, #0
    1446:	d1fa      	bne.n	143e <usart_serial_putchar+0x26>
		return 1;
    1448:	2001      	movs	r0, #1
    144a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
    144c:	4b0f      	ldr	r3, [pc, #60]	; (148c <usart_serial_putchar+0x74>)
    144e:	4298      	cmp	r0, r3
    1450:	d108      	bne.n	1464 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
    1452:	461e      	mov	r6, r3
    1454:	4d0b      	ldr	r5, [pc, #44]	; (1484 <usart_serial_putchar+0x6c>)
    1456:	4621      	mov	r1, r4
    1458:	4630      	mov	r0, r6
    145a:	47a8      	blx	r5
    145c:	2800      	cmp	r0, #0
    145e:	d1fa      	bne.n	1456 <usart_serial_putchar+0x3e>
		return 1;
    1460:	2001      	movs	r0, #1
    1462:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
    1464:	4b0a      	ldr	r3, [pc, #40]	; (1490 <usart_serial_putchar+0x78>)
    1466:	4298      	cmp	r0, r3
    1468:	d108      	bne.n	147c <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
    146a:	461e      	mov	r6, r3
    146c:	4d05      	ldr	r5, [pc, #20]	; (1484 <usart_serial_putchar+0x6c>)
    146e:	4621      	mov	r1, r4
    1470:	4630      	mov	r0, r6
    1472:	47a8      	blx	r5
    1474:	2800      	cmp	r0, #0
    1476:	d1fa      	bne.n	146e <usart_serial_putchar+0x56>
		return 1;
    1478:	2001      	movs	r0, #1
    147a:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
    147c:	2000      	movs	r0, #0
}
    147e:	bd70      	pop	{r4, r5, r6, pc}
    1480:	40024000 	.word	0x40024000
    1484:	0000030d 	.word	0x0000030d
    1488:	40028000 	.word	0x40028000
    148c:	4002c000 	.word	0x4002c000
    1490:	40030000 	.word	0x40030000

00001494 <setupLED>:
}

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
    1494:	0943      	lsrs	r3, r0, #5
    1496:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    149a:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    149e:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    14a0:	f000 001f 	and.w	r0, r0, #31
    14a4:	2201      	movs	r2, #1
    14a6:	fa02 f000 	lsl.w	r0, r2, r0

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    14aa:	6458      	str	r0, [r3, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    14ac:	f8c3 0168 	str.w	r0, [r3, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    14b0:	6558      	str	r0, [r3, #84]	; 0x54
    14b2:	4770      	bx	lr

000014b4 <main>:
	ioport_set_pin_dir(pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(pin, IOPORT_PIN_LEVEL_HIGH);
}

int main (void)
{
    14b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    14b6:	b087      	sub	sp, #28
	sysclk_init();
    14b8:	4b2d      	ldr	r3, [pc, #180]	; (1570 <main+0xbc>)
    14ba:	4798      	blx	r3
	board_init();
    14bc:	4b2d      	ldr	r3, [pc, #180]	; (1574 <main+0xc0>)
    14be:	4798      	blx	r3
	
	setupLED(EXT1_PIN_7);
    14c0:	2040      	movs	r0, #64	; 0x40
    14c2:	4c2d      	ldr	r4, [pc, #180]	; (1578 <main+0xc4>)
    14c4:	47a0      	blx	r4
	setupLED(EXT1_PIN_8);
    14c6:	2041      	movs	r0, #65	; 0x41
    14c8:	47a0      	blx	r4
	setupLED(EXT1_PIN_6);
    14ca:	2042      	movs	r0, #66	; 0x42
    14cc:	47a0      	blx	r4
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
    14ce:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    14d2:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
    14d4:	23c0      	movs	r3, #192	; 0xc0
    14d6:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
    14d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
    14dc:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
    14de:	2500      	movs	r5, #0
    14e0:	9503      	str	r5, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
    14e2:	9504      	str	r5, [sp, #16]
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_hz());
#endif
#if (SAM4L)
		sysclk_enable_peripheral_clock(p_usart);
    14e4:	4c25      	ldr	r4, [pc, #148]	; (157c <main+0xc8>)
    14e6:	4620      	mov	r0, r4
    14e8:	4b25      	ldr	r3, [pc, #148]	; (1580 <main+0xcc>)
    14ea:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
    14ec:	4620      	mov	r0, r4
    14ee:	4b25      	ldr	r3, [pc, #148]	; (1584 <main+0xd0>)
    14f0:	4798      	blx	r3
    14f2:	4602      	mov	r2, r0
    14f4:	4669      	mov	r1, sp
    14f6:	4620      	mov	r0, r4
    14f8:	4b23      	ldr	r3, [pc, #140]	; (1588 <main+0xd4>)
    14fa:	4798      	blx	r3
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
    14fc:	4620      	mov	r0, r4
    14fe:	4b23      	ldr	r3, [pc, #140]	; (158c <main+0xd8>)
    1500:	4798      	blx	r3
		usart_enable_rx(p_usart);
    1502:	4620      	mov	r0, r4
    1504:	4b22      	ldr	r3, [pc, #136]	; (1590 <main+0xdc>)
    1506:	4798      	blx	r3
		.stopbits = US_MR_NBSTOP_1
	};

	usart_serial_init(USART1, &serial_config);
	
	stdio_base = USART1;
    1508:	4b22      	ldr	r3, [pc, #136]	; (1594 <main+0xe0>)
    150a:	601c      	str	r4, [r3, #0]
	ptr_put = (int(*)(void volatile*, char)) usart_serial_putchar;
    150c:	4a22      	ldr	r2, [pc, #136]	; (1598 <main+0xe4>)
    150e:	4b23      	ldr	r3, [pc, #140]	; (159c <main+0xe8>)
    1510:	601a      	str	r2, [r3, #0]
	//ptr_get = (int(*)(void volatile*, char)) usart_serial_getchar;
	setbuf(stdout, NULL);
    1512:	4b23      	ldr	r3, [pc, #140]	; (15a0 <main+0xec>)
    1514:	681b      	ldr	r3, [r3, #0]
    1516:	4629      	mov	r1, r5
    1518:	6898      	ldr	r0, [r3, #8]
    151a:	4b22      	ldr	r3, [pc, #136]	; (15a4 <main+0xf0>)
    151c:	4798      	blx	r3
	
	while (1) {

		char ledToToggle;
		printf("Which LED should I light up?");
    151e:	4e22      	ldr	r6, [pc, #136]	; (15a8 <main+0xf4>)
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_read(p_usart, &val));
    1520:	4625      	mov	r5, r4
	return arch_ioport_port_to_base(port)->GPIO_PVR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	arch_ioport_pin_to_base(pin)->GPIO_OVRT = arch_ioport_pin_to_mask(pin);
    1522:	4f22      	ldr	r7, [pc, #136]	; (15ac <main+0xf8>)
    1524:	4822      	ldr	r0, [pc, #136]	; (15b0 <main+0xfc>)
    1526:	47b0      	blx	r6
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
    1528:	2300      	movs	r3, #0
    152a:	9300      	str	r3, [sp, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_read(p_usart, &val));
    152c:	4c21      	ldr	r4, [pc, #132]	; (15b4 <main+0x100>)
    152e:	4669      	mov	r1, sp
    1530:	4628      	mov	r0, r5
    1532:	47a0      	blx	r4
    1534:	2800      	cmp	r0, #0
    1536:	d1fa      	bne.n	152e <main+0x7a>
		usart_serial_getchar(USART1, &ledToToggle);
		
		printf(" %c \r\n", ledToToggle);
    1538:	f89d 4000 	ldrb.w	r4, [sp]
    153c:	4621      	mov	r1, r4
    153e:	481e      	ldr	r0, [pc, #120]	; (15b8 <main+0x104>)
    1540:	47b0      	blx	r6
		
		switch(ledToToggle) {
    1542:	3c30      	subs	r4, #48	; 0x30
    1544:	2c03      	cmp	r4, #3
    1546:	d80f      	bhi.n	1568 <main+0xb4>
    1548:	e8df f004 	tbb	[pc, r4]
    154c:	0b080502 	.word	0x0b080502
    1550:	2380      	movs	r3, #128	; 0x80
    1552:	65fb      	str	r3, [r7, #92]	; 0x5c
    1554:	e7e6      	b.n	1524 <main+0x70>
    1556:	2301      	movs	r3, #1
    1558:	65fb      	str	r3, [r7, #92]	; 0x5c
    155a:	e7e3      	b.n	1524 <main+0x70>
    155c:	2302      	movs	r3, #2
    155e:	65fb      	str	r3, [r7, #92]	; 0x5c
    1560:	e7e0      	b.n	1524 <main+0x70>
    1562:	2304      	movs	r3, #4
    1564:	65fb      	str	r3, [r7, #92]	; 0x5c
    1566:	e7dd      	b.n	1524 <main+0x70>
				break;
			case '3':
				ioport_toggle_pin_level(EXT1_PIN_6);
				break;
			default:
				printf("Unknown number! \r\n");
    1568:	4814      	ldr	r0, [pc, #80]	; (15bc <main+0x108>)
    156a:	47b0      	blx	r6
				break;
    156c:	e7da      	b.n	1524 <main+0x70>
    156e:	bf00      	nop
    1570:	00001071 	.word	0x00001071
    1574:	000010ed 	.word	0x000010ed
    1578:	00001495 	.word	0x00001495
    157c:	40028000 	.word	0x40028000
    1580:	000008b1 	.word	0x000008b1
    1584:	000006ed 	.word	0x000006ed
    1588:	000002a9 	.word	0x000002a9
    158c:	000002fd 	.word	0x000002fd
    1590:	00000305 	.word	0x00000305
    1594:	20000928 	.word	0x20000928
    1598:	00001419 	.word	0x00001419
    159c:	20000924 	.word	0x20000924
    15a0:	20000458 	.word	0x20000458
    15a4:	000016d5 	.word	0x000016d5
    15a8:	00001611 	.word	0x00001611
    15ac:	400e1400 	.word	0x400e1400
    15b0:	0000462c 	.word	0x0000462c
    15b4:	00000321 	.word	0x00000321
    15b8:	0000464c 	.word	0x0000464c
    15bc:	00004654 	.word	0x00004654

000015c0 <__libc_init_array>:
    15c0:	b570      	push	{r4, r5, r6, lr}
    15c2:	4e0f      	ldr	r6, [pc, #60]	; (1600 <__libc_init_array+0x40>)
    15c4:	4d0f      	ldr	r5, [pc, #60]	; (1604 <__libc_init_array+0x44>)
    15c6:	1b76      	subs	r6, r6, r5
    15c8:	10b6      	asrs	r6, r6, #2
    15ca:	bf18      	it	ne
    15cc:	2400      	movne	r4, #0
    15ce:	d005      	beq.n	15dc <__libc_init_array+0x1c>
    15d0:	3401      	adds	r4, #1
    15d2:	f855 3b04 	ldr.w	r3, [r5], #4
    15d6:	4798      	blx	r3
    15d8:	42a6      	cmp	r6, r4
    15da:	d1f9      	bne.n	15d0 <__libc_init_array+0x10>
    15dc:	4e0a      	ldr	r6, [pc, #40]	; (1608 <__libc_init_array+0x48>)
    15de:	4d0b      	ldr	r5, [pc, #44]	; (160c <__libc_init_array+0x4c>)
    15e0:	1b76      	subs	r6, r6, r5
    15e2:	f003 f86d 	bl	46c0 <_init>
    15e6:	10b6      	asrs	r6, r6, #2
    15e8:	bf18      	it	ne
    15ea:	2400      	movne	r4, #0
    15ec:	d006      	beq.n	15fc <__libc_init_array+0x3c>
    15ee:	3401      	adds	r4, #1
    15f0:	f855 3b04 	ldr.w	r3, [r5], #4
    15f4:	4798      	blx	r3
    15f6:	42a6      	cmp	r6, r4
    15f8:	d1f9      	bne.n	15ee <__libc_init_array+0x2e>
    15fa:	bd70      	pop	{r4, r5, r6, pc}
    15fc:	bd70      	pop	{r4, r5, r6, pc}
    15fe:	bf00      	nop
    1600:	000046cc 	.word	0x000046cc
    1604:	000046cc 	.word	0x000046cc
    1608:	000046d4 	.word	0x000046d4
    160c:	000046cc 	.word	0x000046cc

00001610 <iprintf>:
    1610:	b40f      	push	{r0, r1, r2, r3}
    1612:	b500      	push	{lr}
    1614:	4907      	ldr	r1, [pc, #28]	; (1634 <iprintf+0x24>)
    1616:	b083      	sub	sp, #12
    1618:	ab04      	add	r3, sp, #16
    161a:	6808      	ldr	r0, [r1, #0]
    161c:	f853 2b04 	ldr.w	r2, [r3], #4
    1620:	6881      	ldr	r1, [r0, #8]
    1622:	9301      	str	r3, [sp, #4]
    1624:	f000 f942 	bl	18ac <_vfiprintf_r>
    1628:	b003      	add	sp, #12
    162a:	f85d eb04 	ldr.w	lr, [sp], #4
    162e:	b004      	add	sp, #16
    1630:	4770      	bx	lr
    1632:	bf00      	nop
    1634:	20000458 	.word	0x20000458

00001638 <memset>:
    1638:	b470      	push	{r4, r5, r6}
    163a:	0784      	lsls	r4, r0, #30
    163c:	d046      	beq.n	16cc <memset+0x94>
    163e:	1e54      	subs	r4, r2, #1
    1640:	2a00      	cmp	r2, #0
    1642:	d041      	beq.n	16c8 <memset+0x90>
    1644:	b2cd      	uxtb	r5, r1
    1646:	4603      	mov	r3, r0
    1648:	e002      	b.n	1650 <memset+0x18>
    164a:	1e62      	subs	r2, r4, #1
    164c:	b3e4      	cbz	r4, 16c8 <memset+0x90>
    164e:	4614      	mov	r4, r2
    1650:	f803 5b01 	strb.w	r5, [r3], #1
    1654:	079a      	lsls	r2, r3, #30
    1656:	d1f8      	bne.n	164a <memset+0x12>
    1658:	2c03      	cmp	r4, #3
    165a:	d92e      	bls.n	16ba <memset+0x82>
    165c:	b2cd      	uxtb	r5, r1
    165e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    1662:	2c0f      	cmp	r4, #15
    1664:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    1668:	d919      	bls.n	169e <memset+0x66>
    166a:	f103 0210 	add.w	r2, r3, #16
    166e:	4626      	mov	r6, r4
    1670:	3e10      	subs	r6, #16
    1672:	2e0f      	cmp	r6, #15
    1674:	f842 5c10 	str.w	r5, [r2, #-16]
    1678:	f842 5c0c 	str.w	r5, [r2, #-12]
    167c:	f842 5c08 	str.w	r5, [r2, #-8]
    1680:	f842 5c04 	str.w	r5, [r2, #-4]
    1684:	f102 0210 	add.w	r2, r2, #16
    1688:	d8f2      	bhi.n	1670 <memset+0x38>
    168a:	f1a4 0210 	sub.w	r2, r4, #16
    168e:	f022 020f 	bic.w	r2, r2, #15
    1692:	f004 040f 	and.w	r4, r4, #15
    1696:	3210      	adds	r2, #16
    1698:	2c03      	cmp	r4, #3
    169a:	4413      	add	r3, r2
    169c:	d90d      	bls.n	16ba <memset+0x82>
    169e:	461e      	mov	r6, r3
    16a0:	4622      	mov	r2, r4
    16a2:	3a04      	subs	r2, #4
    16a4:	2a03      	cmp	r2, #3
    16a6:	f846 5b04 	str.w	r5, [r6], #4
    16aa:	d8fa      	bhi.n	16a2 <memset+0x6a>
    16ac:	1f22      	subs	r2, r4, #4
    16ae:	f022 0203 	bic.w	r2, r2, #3
    16b2:	3204      	adds	r2, #4
    16b4:	4413      	add	r3, r2
    16b6:	f004 0403 	and.w	r4, r4, #3
    16ba:	b12c      	cbz	r4, 16c8 <memset+0x90>
    16bc:	b2c9      	uxtb	r1, r1
    16be:	441c      	add	r4, r3
    16c0:	f803 1b01 	strb.w	r1, [r3], #1
    16c4:	42a3      	cmp	r3, r4
    16c6:	d1fb      	bne.n	16c0 <memset+0x88>
    16c8:	bc70      	pop	{r4, r5, r6}
    16ca:	4770      	bx	lr
    16cc:	4614      	mov	r4, r2
    16ce:	4603      	mov	r3, r0
    16d0:	e7c2      	b.n	1658 <memset+0x20>
    16d2:	bf00      	nop

000016d4 <setbuf>:
    16d4:	2900      	cmp	r1, #0
    16d6:	bf0c      	ite	eq
    16d8:	2202      	moveq	r2, #2
    16da:	2200      	movne	r2, #0
    16dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    16e0:	f000 b800 	b.w	16e4 <setvbuf>

000016e4 <setvbuf>:
    16e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    16e8:	4c51      	ldr	r4, [pc, #324]	; (1830 <setvbuf+0x14c>)
    16ea:	6825      	ldr	r5, [r4, #0]
    16ec:	b083      	sub	sp, #12
    16ee:	4604      	mov	r4, r0
    16f0:	460f      	mov	r7, r1
    16f2:	4690      	mov	r8, r2
    16f4:	461e      	mov	r6, r3
    16f6:	b115      	cbz	r5, 16fe <setvbuf+0x1a>
    16f8:	6bab      	ldr	r3, [r5, #56]	; 0x38
    16fa:	2b00      	cmp	r3, #0
    16fc:	d079      	beq.n	17f2 <setvbuf+0x10e>
    16fe:	f1b8 0f02 	cmp.w	r8, #2
    1702:	d004      	beq.n	170e <setvbuf+0x2a>
    1704:	f1b8 0f01 	cmp.w	r8, #1
    1708:	d87f      	bhi.n	180a <setvbuf+0x126>
    170a:	2e00      	cmp	r6, #0
    170c:	db7d      	blt.n	180a <setvbuf+0x126>
    170e:	4621      	mov	r1, r4
    1710:	4628      	mov	r0, r5
    1712:	f001 f917 	bl	2944 <_fflush_r>
    1716:	6b21      	ldr	r1, [r4, #48]	; 0x30
    1718:	b141      	cbz	r1, 172c <setvbuf+0x48>
    171a:	f104 0340 	add.w	r3, r4, #64	; 0x40
    171e:	4299      	cmp	r1, r3
    1720:	d002      	beq.n	1728 <setvbuf+0x44>
    1722:	4628      	mov	r0, r5
    1724:	f001 fa6c 	bl	2c00 <_free_r>
    1728:	2300      	movs	r3, #0
    172a:	6323      	str	r3, [r4, #48]	; 0x30
    172c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1730:	2200      	movs	r2, #0
    1732:	61a2      	str	r2, [r4, #24]
    1734:	6062      	str	r2, [r4, #4]
    1736:	061a      	lsls	r2, r3, #24
    1738:	d454      	bmi.n	17e4 <setvbuf+0x100>
    173a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    173e:	f023 0303 	bic.w	r3, r3, #3
    1742:	f1b8 0f02 	cmp.w	r8, #2
    1746:	81a3      	strh	r3, [r4, #12]
    1748:	d039      	beq.n	17be <setvbuf+0xda>
    174a:	ab01      	add	r3, sp, #4
    174c:	466a      	mov	r2, sp
    174e:	4621      	mov	r1, r4
    1750:	4628      	mov	r0, r5
    1752:	f001 fcf3 	bl	313c <__swhatbuf_r>
    1756:	89a3      	ldrh	r3, [r4, #12]
    1758:	4318      	orrs	r0, r3
    175a:	81a0      	strh	r0, [r4, #12]
    175c:	b326      	cbz	r6, 17a8 <setvbuf+0xc4>
    175e:	b327      	cbz	r7, 17aa <setvbuf+0xc6>
    1760:	6bab      	ldr	r3, [r5, #56]	; 0x38
    1762:	2b00      	cmp	r3, #0
    1764:	d04d      	beq.n	1802 <setvbuf+0x11e>
    1766:	9b00      	ldr	r3, [sp, #0]
    1768:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    176c:	6027      	str	r7, [r4, #0]
    176e:	429e      	cmp	r6, r3
    1770:	bf1c      	itt	ne
    1772:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
    1776:	81a0      	strhne	r0, [r4, #12]
    1778:	f1b8 0f01 	cmp.w	r8, #1
    177c:	bf08      	it	eq
    177e:	f040 0001 	orreq.w	r0, r0, #1
    1782:	b283      	uxth	r3, r0
    1784:	bf08      	it	eq
    1786:	81a0      	strheq	r0, [r4, #12]
    1788:	f003 0008 	and.w	r0, r3, #8
    178c:	b280      	uxth	r0, r0
    178e:	6127      	str	r7, [r4, #16]
    1790:	6166      	str	r6, [r4, #20]
    1792:	b318      	cbz	r0, 17dc <setvbuf+0xf8>
    1794:	f013 0001 	ands.w	r0, r3, #1
    1798:	d02f      	beq.n	17fa <setvbuf+0x116>
    179a:	2000      	movs	r0, #0
    179c:	4276      	negs	r6, r6
    179e:	61a6      	str	r6, [r4, #24]
    17a0:	60a0      	str	r0, [r4, #8]
    17a2:	b003      	add	sp, #12
    17a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    17a8:	9e00      	ldr	r6, [sp, #0]
    17aa:	4630      	mov	r0, r6
    17ac:	f001 fd3a 	bl	3224 <malloc>
    17b0:	4607      	mov	r7, r0
    17b2:	b368      	cbz	r0, 1810 <setvbuf+0x12c>
    17b4:	89a3      	ldrh	r3, [r4, #12]
    17b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    17ba:	81a3      	strh	r3, [r4, #12]
    17bc:	e7d0      	b.n	1760 <setvbuf+0x7c>
    17be:	2000      	movs	r0, #0
    17c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
    17c4:	f043 0302 	orr.w	r3, r3, #2
    17c8:	2500      	movs	r5, #0
    17ca:	2101      	movs	r1, #1
    17cc:	81a3      	strh	r3, [r4, #12]
    17ce:	60a5      	str	r5, [r4, #8]
    17d0:	6022      	str	r2, [r4, #0]
    17d2:	6122      	str	r2, [r4, #16]
    17d4:	6161      	str	r1, [r4, #20]
    17d6:	b003      	add	sp, #12
    17d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    17dc:	60a0      	str	r0, [r4, #8]
    17de:	b003      	add	sp, #12
    17e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    17e4:	6921      	ldr	r1, [r4, #16]
    17e6:	4628      	mov	r0, r5
    17e8:	f001 fa0a 	bl	2c00 <_free_r>
    17ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    17f0:	e7a3      	b.n	173a <setvbuf+0x56>
    17f2:	4628      	mov	r0, r5
    17f4:	f001 f93a 	bl	2a6c <__sinit>
    17f8:	e781      	b.n	16fe <setvbuf+0x1a>
    17fa:	60a6      	str	r6, [r4, #8]
    17fc:	b003      	add	sp, #12
    17fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1802:	4628      	mov	r0, r5
    1804:	f001 f932 	bl	2a6c <__sinit>
    1808:	e7ad      	b.n	1766 <setvbuf+0x82>
    180a:	f04f 30ff 	mov.w	r0, #4294967295
    180e:	e7e2      	b.n	17d6 <setvbuf+0xf2>
    1810:	f8dd 9000 	ldr.w	r9, [sp]
    1814:	45b1      	cmp	r9, r6
    1816:	d006      	beq.n	1826 <setvbuf+0x142>
    1818:	4648      	mov	r0, r9
    181a:	f001 fd03 	bl	3224 <malloc>
    181e:	4607      	mov	r7, r0
    1820:	b108      	cbz	r0, 1826 <setvbuf+0x142>
    1822:	464e      	mov	r6, r9
    1824:	e7c6      	b.n	17b4 <setvbuf+0xd0>
    1826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    182a:	f04f 30ff 	mov.w	r0, #4294967295
    182e:	e7c7      	b.n	17c0 <setvbuf+0xdc>
    1830:	20000458 	.word	0x20000458

00001834 <__sprint_r.part.0>:
    1834:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    1836:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    183a:	049c      	lsls	r4, r3, #18
    183c:	4692      	mov	sl, r2
    183e:	d52c      	bpl.n	189a <__sprint_r.part.0+0x66>
    1840:	6893      	ldr	r3, [r2, #8]
    1842:	6812      	ldr	r2, [r2, #0]
    1844:	b33b      	cbz	r3, 1896 <__sprint_r.part.0+0x62>
    1846:	460f      	mov	r7, r1
    1848:	4680      	mov	r8, r0
    184a:	f102 0908 	add.w	r9, r2, #8
    184e:	e919 0060 	ldmdb	r9, {r5, r6}
    1852:	08b6      	lsrs	r6, r6, #2
    1854:	d017      	beq.n	1886 <__sprint_r.part.0+0x52>
    1856:	3d04      	subs	r5, #4
    1858:	2400      	movs	r4, #0
    185a:	e001      	b.n	1860 <__sprint_r.part.0+0x2c>
    185c:	42a6      	cmp	r6, r4
    185e:	d010      	beq.n	1882 <__sprint_r.part.0+0x4e>
    1860:	463a      	mov	r2, r7
    1862:	f855 1f04 	ldr.w	r1, [r5, #4]!
    1866:	4640      	mov	r0, r8
    1868:	f001 f96a 	bl	2b40 <_fputwc_r>
    186c:	1c43      	adds	r3, r0, #1
    186e:	f104 0401 	add.w	r4, r4, #1
    1872:	d1f3      	bne.n	185c <__sprint_r.part.0+0x28>
    1874:	2300      	movs	r3, #0
    1876:	f8ca 3008 	str.w	r3, [sl, #8]
    187a:	f8ca 3004 	str.w	r3, [sl, #4]
    187e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1882:	f8da 3008 	ldr.w	r3, [sl, #8]
    1886:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
    188a:	f8ca 3008 	str.w	r3, [sl, #8]
    188e:	f109 0908 	add.w	r9, r9, #8
    1892:	2b00      	cmp	r3, #0
    1894:	d1db      	bne.n	184e <__sprint_r.part.0+0x1a>
    1896:	2000      	movs	r0, #0
    1898:	e7ec      	b.n	1874 <__sprint_r.part.0+0x40>
    189a:	f001 fa99 	bl	2dd0 <__sfvwrite_r>
    189e:	2300      	movs	r3, #0
    18a0:	f8ca 3008 	str.w	r3, [sl, #8]
    18a4:	f8ca 3004 	str.w	r3, [sl, #4]
    18a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000018ac <_vfiprintf_r>:
    18ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18b0:	b0ab      	sub	sp, #172	; 0xac
    18b2:	461c      	mov	r4, r3
    18b4:	9100      	str	r1, [sp, #0]
    18b6:	4690      	mov	r8, r2
    18b8:	9304      	str	r3, [sp, #16]
    18ba:	9005      	str	r0, [sp, #20]
    18bc:	b118      	cbz	r0, 18c6 <_vfiprintf_r+0x1a>
    18be:	6b83      	ldr	r3, [r0, #56]	; 0x38
    18c0:	2b00      	cmp	r3, #0
    18c2:	f000 80de 	beq.w	1a82 <_vfiprintf_r+0x1d6>
    18c6:	9800      	ldr	r0, [sp, #0]
    18c8:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
    18cc:	b28a      	uxth	r2, r1
    18ce:	0495      	lsls	r5, r2, #18
    18d0:	d407      	bmi.n	18e2 <_vfiprintf_r+0x36>
    18d2:	6e43      	ldr	r3, [r0, #100]	; 0x64
    18d4:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
    18d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    18dc:	8182      	strh	r2, [r0, #12]
    18de:	6643      	str	r3, [r0, #100]	; 0x64
    18e0:	b292      	uxth	r2, r2
    18e2:	0711      	lsls	r1, r2, #28
    18e4:	f140 80b1 	bpl.w	1a4a <_vfiprintf_r+0x19e>
    18e8:	9b00      	ldr	r3, [sp, #0]
    18ea:	691b      	ldr	r3, [r3, #16]
    18ec:	2b00      	cmp	r3, #0
    18ee:	f000 80ac 	beq.w	1a4a <_vfiprintf_r+0x19e>
    18f2:	f002 021a 	and.w	r2, r2, #26
    18f6:	2a0a      	cmp	r2, #10
    18f8:	f000 80b5 	beq.w	1a66 <_vfiprintf_r+0x1ba>
    18fc:	2300      	movs	r3, #0
    18fe:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
    1902:	9302      	str	r3, [sp, #8]
    1904:	930f      	str	r3, [sp, #60]	; 0x3c
    1906:	930e      	str	r3, [sp, #56]	; 0x38
    1908:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
    190c:	46da      	mov	sl, fp
    190e:	f898 3000 	ldrb.w	r3, [r8]
    1912:	4644      	mov	r4, r8
    1914:	b1fb      	cbz	r3, 1956 <_vfiprintf_r+0xaa>
    1916:	2b25      	cmp	r3, #37	; 0x25
    1918:	d102      	bne.n	1920 <_vfiprintf_r+0x74>
    191a:	e01c      	b.n	1956 <_vfiprintf_r+0xaa>
    191c:	2b25      	cmp	r3, #37	; 0x25
    191e:	d003      	beq.n	1928 <_vfiprintf_r+0x7c>
    1920:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    1924:	2b00      	cmp	r3, #0
    1926:	d1f9      	bne.n	191c <_vfiprintf_r+0x70>
    1928:	ebc8 0504 	rsb	r5, r8, r4
    192c:	b19d      	cbz	r5, 1956 <_vfiprintf_r+0xaa>
    192e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1930:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    1932:	f8ca 8000 	str.w	r8, [sl]
    1936:	3301      	adds	r3, #1
    1938:	442a      	add	r2, r5
    193a:	2b07      	cmp	r3, #7
    193c:	f8ca 5004 	str.w	r5, [sl, #4]
    1940:	920f      	str	r2, [sp, #60]	; 0x3c
    1942:	930e      	str	r3, [sp, #56]	; 0x38
    1944:	dd7b      	ble.n	1a3e <_vfiprintf_r+0x192>
    1946:	2a00      	cmp	r2, #0
    1948:	f040 8528 	bne.w	239c <_vfiprintf_r+0xaf0>
    194c:	9b02      	ldr	r3, [sp, #8]
    194e:	920e      	str	r2, [sp, #56]	; 0x38
    1950:	442b      	add	r3, r5
    1952:	46da      	mov	sl, fp
    1954:	9302      	str	r3, [sp, #8]
    1956:	7823      	ldrb	r3, [r4, #0]
    1958:	2b00      	cmp	r3, #0
    195a:	f000 843e 	beq.w	21da <_vfiprintf_r+0x92e>
    195e:	2100      	movs	r1, #0
    1960:	f04f 0300 	mov.w	r3, #0
    1964:	f04f 32ff 	mov.w	r2, #4294967295
    1968:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    196c:	f104 0801 	add.w	r8, r4, #1
    1970:	7863      	ldrb	r3, [r4, #1]
    1972:	9201      	str	r2, [sp, #4]
    1974:	4608      	mov	r0, r1
    1976:	460e      	mov	r6, r1
    1978:	460c      	mov	r4, r1
    197a:	f108 0801 	add.w	r8, r8, #1
    197e:	f1a3 0220 	sub.w	r2, r3, #32
    1982:	2a58      	cmp	r2, #88	; 0x58
    1984:	f200 8393 	bhi.w	20ae <_vfiprintf_r+0x802>
    1988:	e8df f012 	tbh	[pc, r2, lsl #1]
    198c:	03910346 	.word	0x03910346
    1990:	034e0391 	.word	0x034e0391
    1994:	03910391 	.word	0x03910391
    1998:	03910391 	.word	0x03910391
    199c:	03910391 	.word	0x03910391
    19a0:	02670289 	.word	0x02670289
    19a4:	00800391 	.word	0x00800391
    19a8:	0391026c 	.word	0x0391026c
    19ac:	025901c6 	.word	0x025901c6
    19b0:	02590259 	.word	0x02590259
    19b4:	02590259 	.word	0x02590259
    19b8:	02590259 	.word	0x02590259
    19bc:	02590259 	.word	0x02590259
    19c0:	03910391 	.word	0x03910391
    19c4:	03910391 	.word	0x03910391
    19c8:	03910391 	.word	0x03910391
    19cc:	03910391 	.word	0x03910391
    19d0:	03910391 	.word	0x03910391
    19d4:	039101cb 	.word	0x039101cb
    19d8:	03910391 	.word	0x03910391
    19dc:	03910391 	.word	0x03910391
    19e0:	03910391 	.word	0x03910391
    19e4:	03910391 	.word	0x03910391
    19e8:	02140391 	.word	0x02140391
    19ec:	03910391 	.word	0x03910391
    19f0:	03910391 	.word	0x03910391
    19f4:	02ee0391 	.word	0x02ee0391
    19f8:	03910391 	.word	0x03910391
    19fc:	03910311 	.word	0x03910311
    1a00:	03910391 	.word	0x03910391
    1a04:	03910391 	.word	0x03910391
    1a08:	03910391 	.word	0x03910391
    1a0c:	03910391 	.word	0x03910391
    1a10:	03340391 	.word	0x03340391
    1a14:	0391038a 	.word	0x0391038a
    1a18:	03910391 	.word	0x03910391
    1a1c:	038a0367 	.word	0x038a0367
    1a20:	03910391 	.word	0x03910391
    1a24:	0391036c 	.word	0x0391036c
    1a28:	02950379 	.word	0x02950379
    1a2c:	02e90085 	.word	0x02e90085
    1a30:	029b0391 	.word	0x029b0391
    1a34:	02ba0391 	.word	0x02ba0391
    1a38:	03910391 	.word	0x03910391
    1a3c:	0353      	.short	0x0353
    1a3e:	f10a 0a08 	add.w	sl, sl, #8
    1a42:	9b02      	ldr	r3, [sp, #8]
    1a44:	442b      	add	r3, r5
    1a46:	9302      	str	r3, [sp, #8]
    1a48:	e785      	b.n	1956 <_vfiprintf_r+0xaa>
    1a4a:	9900      	ldr	r1, [sp, #0]
    1a4c:	9805      	ldr	r0, [sp, #20]
    1a4e:	f000 fe61 	bl	2714 <__swsetup_r>
    1a52:	2800      	cmp	r0, #0
    1a54:	f040 8558 	bne.w	2508 <_vfiprintf_r+0xc5c>
    1a58:	9b00      	ldr	r3, [sp, #0]
    1a5a:	899a      	ldrh	r2, [r3, #12]
    1a5c:	f002 021a 	and.w	r2, r2, #26
    1a60:	2a0a      	cmp	r2, #10
    1a62:	f47f af4b 	bne.w	18fc <_vfiprintf_r+0x50>
    1a66:	9900      	ldr	r1, [sp, #0]
    1a68:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    1a6c:	2b00      	cmp	r3, #0
    1a6e:	f6ff af45 	blt.w	18fc <_vfiprintf_r+0x50>
    1a72:	4623      	mov	r3, r4
    1a74:	4642      	mov	r2, r8
    1a76:	9805      	ldr	r0, [sp, #20]
    1a78:	f000 fe16 	bl	26a8 <__sbprintf>
    1a7c:	b02b      	add	sp, #172	; 0xac
    1a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a82:	f000 fff3 	bl	2a6c <__sinit>
    1a86:	e71e      	b.n	18c6 <_vfiprintf_r+0x1a>
    1a88:	4264      	negs	r4, r4
    1a8a:	9304      	str	r3, [sp, #16]
    1a8c:	f046 0604 	orr.w	r6, r6, #4
    1a90:	f898 3000 	ldrb.w	r3, [r8]
    1a94:	e771      	b.n	197a <_vfiprintf_r+0xce>
    1a96:	2130      	movs	r1, #48	; 0x30
    1a98:	9804      	ldr	r0, [sp, #16]
    1a9a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    1a9e:	9901      	ldr	r1, [sp, #4]
    1aa0:	9406      	str	r4, [sp, #24]
    1aa2:	f04f 0300 	mov.w	r3, #0
    1aa6:	2278      	movs	r2, #120	; 0x78
    1aa8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    1aac:	2900      	cmp	r1, #0
    1aae:	4603      	mov	r3, r0
    1ab0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
    1ab4:	6804      	ldr	r4, [r0, #0]
    1ab6:	f103 0304 	add.w	r3, r3, #4
    1aba:	f04f 0500 	mov.w	r5, #0
    1abe:	f046 0202 	orr.w	r2, r6, #2
    1ac2:	f2c0 8525 	blt.w	2510 <_vfiprintf_r+0xc64>
    1ac6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    1aca:	ea54 0205 	orrs.w	r2, r4, r5
    1ace:	f046 0602 	orr.w	r6, r6, #2
    1ad2:	9304      	str	r3, [sp, #16]
    1ad4:	f040 84bf 	bne.w	2456 <_vfiprintf_r+0xbaa>
    1ad8:	48b3      	ldr	r0, [pc, #716]	; (1da8 <_vfiprintf_r+0x4fc>)
    1ada:	9b01      	ldr	r3, [sp, #4]
    1adc:	2b00      	cmp	r3, #0
    1ade:	f040 841c 	bne.w	231a <_vfiprintf_r+0xa6e>
    1ae2:	4699      	mov	r9, r3
    1ae4:	2300      	movs	r3, #0
    1ae6:	9301      	str	r3, [sp, #4]
    1ae8:	9303      	str	r3, [sp, #12]
    1aea:	465f      	mov	r7, fp
    1aec:	9b01      	ldr	r3, [sp, #4]
    1aee:	9a03      	ldr	r2, [sp, #12]
    1af0:	4293      	cmp	r3, r2
    1af2:	bfb8      	it	lt
    1af4:	4613      	movlt	r3, r2
    1af6:	461d      	mov	r5, r3
    1af8:	f1b9 0f00 	cmp.w	r9, #0
    1afc:	d000      	beq.n	1b00 <_vfiprintf_r+0x254>
    1afe:	3501      	adds	r5, #1
    1b00:	f016 0302 	ands.w	r3, r6, #2
    1b04:	9307      	str	r3, [sp, #28]
    1b06:	bf18      	it	ne
    1b08:	3502      	addne	r5, #2
    1b0a:	f016 0384 	ands.w	r3, r6, #132	; 0x84
    1b0e:	9308      	str	r3, [sp, #32]
    1b10:	f040 82f1 	bne.w	20f6 <_vfiprintf_r+0x84a>
    1b14:	9b06      	ldr	r3, [sp, #24]
    1b16:	1b5c      	subs	r4, r3, r5
    1b18:	2c00      	cmp	r4, #0
    1b1a:	f340 82ec 	ble.w	20f6 <_vfiprintf_r+0x84a>
    1b1e:	2c10      	cmp	r4, #16
    1b20:	f340 8556 	ble.w	25d0 <_vfiprintf_r+0xd24>
    1b24:	f8df 9284 	ldr.w	r9, [pc, #644]	; 1dac <_vfiprintf_r+0x500>
    1b28:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
    1b2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    1b2e:	46d4      	mov	ip, sl
    1b30:	2310      	movs	r3, #16
    1b32:	46c2      	mov	sl, r8
    1b34:	4670      	mov	r0, lr
    1b36:	46a8      	mov	r8, r5
    1b38:	464d      	mov	r5, r9
    1b3a:	f8dd 9014 	ldr.w	r9, [sp, #20]
    1b3e:	e007      	b.n	1b50 <_vfiprintf_r+0x2a4>
    1b40:	f100 0e02 	add.w	lr, r0, #2
    1b44:	f10c 0c08 	add.w	ip, ip, #8
    1b48:	4608      	mov	r0, r1
    1b4a:	3c10      	subs	r4, #16
    1b4c:	2c10      	cmp	r4, #16
    1b4e:	dd13      	ble.n	1b78 <_vfiprintf_r+0x2cc>
    1b50:	1c41      	adds	r1, r0, #1
    1b52:	3210      	adds	r2, #16
    1b54:	2907      	cmp	r1, #7
    1b56:	920f      	str	r2, [sp, #60]	; 0x3c
    1b58:	f8cc 5000 	str.w	r5, [ip]
    1b5c:	f8cc 3004 	str.w	r3, [ip, #4]
    1b60:	910e      	str	r1, [sp, #56]	; 0x38
    1b62:	dded      	ble.n	1b40 <_vfiprintf_r+0x294>
    1b64:	2a00      	cmp	r2, #0
    1b66:	f040 82b7 	bne.w	20d8 <_vfiprintf_r+0x82c>
    1b6a:	3c10      	subs	r4, #16
    1b6c:	2c10      	cmp	r4, #16
    1b6e:	4610      	mov	r0, r2
    1b70:	f04f 0e01 	mov.w	lr, #1
    1b74:	46dc      	mov	ip, fp
    1b76:	dceb      	bgt.n	1b50 <_vfiprintf_r+0x2a4>
    1b78:	46a9      	mov	r9, r5
    1b7a:	4670      	mov	r0, lr
    1b7c:	4645      	mov	r5, r8
    1b7e:	46d0      	mov	r8, sl
    1b80:	46e2      	mov	sl, ip
    1b82:	4422      	add	r2, r4
    1b84:	2807      	cmp	r0, #7
    1b86:	920f      	str	r2, [sp, #60]	; 0x3c
    1b88:	f8ca 9000 	str.w	r9, [sl]
    1b8c:	f8ca 4004 	str.w	r4, [sl, #4]
    1b90:	900e      	str	r0, [sp, #56]	; 0x38
    1b92:	f300 8375 	bgt.w	2280 <_vfiprintf_r+0x9d4>
    1b96:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    1b9a:	f10a 0a08 	add.w	sl, sl, #8
    1b9e:	f100 0e01 	add.w	lr, r0, #1
    1ba2:	2b00      	cmp	r3, #0
    1ba4:	f040 82b0 	bne.w	2108 <_vfiprintf_r+0x85c>
    1ba8:	9b07      	ldr	r3, [sp, #28]
    1baa:	2b00      	cmp	r3, #0
    1bac:	f000 82c3 	beq.w	2136 <_vfiprintf_r+0x88a>
    1bb0:	3202      	adds	r2, #2
    1bb2:	a90c      	add	r1, sp, #48	; 0x30
    1bb4:	2302      	movs	r3, #2
    1bb6:	f1be 0f07 	cmp.w	lr, #7
    1bba:	920f      	str	r2, [sp, #60]	; 0x3c
    1bbc:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
    1bc0:	e88a 000a 	stmia.w	sl, {r1, r3}
    1bc4:	f340 8378 	ble.w	22b8 <_vfiprintf_r+0xa0c>
    1bc8:	2a00      	cmp	r2, #0
    1bca:	f040 840a 	bne.w	23e2 <_vfiprintf_r+0xb36>
    1bce:	9b08      	ldr	r3, [sp, #32]
    1bd0:	2b80      	cmp	r3, #128	; 0x80
    1bd2:	f04f 0e01 	mov.w	lr, #1
    1bd6:	4610      	mov	r0, r2
    1bd8:	46da      	mov	sl, fp
    1bda:	f040 82b0 	bne.w	213e <_vfiprintf_r+0x892>
    1bde:	9b06      	ldr	r3, [sp, #24]
    1be0:	1b5c      	subs	r4, r3, r5
    1be2:	2c00      	cmp	r4, #0
    1be4:	f340 82ab 	ble.w	213e <_vfiprintf_r+0x892>
    1be8:	2c10      	cmp	r4, #16
    1bea:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 1db0 <_vfiprintf_r+0x504>
    1bee:	f340 850b 	ble.w	2608 <_vfiprintf_r+0xd5c>
    1bf2:	46d6      	mov	lr, sl
    1bf4:	2310      	movs	r3, #16
    1bf6:	46c2      	mov	sl, r8
    1bf8:	46a8      	mov	r8, r5
    1bfa:	464d      	mov	r5, r9
    1bfc:	f8dd 9014 	ldr.w	r9, [sp, #20]
    1c00:	e007      	b.n	1c12 <_vfiprintf_r+0x366>
    1c02:	f100 0c02 	add.w	ip, r0, #2
    1c06:	f10e 0e08 	add.w	lr, lr, #8
    1c0a:	4608      	mov	r0, r1
    1c0c:	3c10      	subs	r4, #16
    1c0e:	2c10      	cmp	r4, #16
    1c10:	dd13      	ble.n	1c3a <_vfiprintf_r+0x38e>
    1c12:	1c41      	adds	r1, r0, #1
    1c14:	3210      	adds	r2, #16
    1c16:	2907      	cmp	r1, #7
    1c18:	920f      	str	r2, [sp, #60]	; 0x3c
    1c1a:	f8ce 5000 	str.w	r5, [lr]
    1c1e:	f8ce 3004 	str.w	r3, [lr, #4]
    1c22:	910e      	str	r1, [sp, #56]	; 0x38
    1c24:	dded      	ble.n	1c02 <_vfiprintf_r+0x356>
    1c26:	2a00      	cmp	r2, #0
    1c28:	f040 8315 	bne.w	2256 <_vfiprintf_r+0x9aa>
    1c2c:	3c10      	subs	r4, #16
    1c2e:	2c10      	cmp	r4, #16
    1c30:	f04f 0c01 	mov.w	ip, #1
    1c34:	4610      	mov	r0, r2
    1c36:	46de      	mov	lr, fp
    1c38:	dceb      	bgt.n	1c12 <_vfiprintf_r+0x366>
    1c3a:	46a9      	mov	r9, r5
    1c3c:	4645      	mov	r5, r8
    1c3e:	46d0      	mov	r8, sl
    1c40:	46f2      	mov	sl, lr
    1c42:	4422      	add	r2, r4
    1c44:	f1bc 0f07 	cmp.w	ip, #7
    1c48:	920f      	str	r2, [sp, #60]	; 0x3c
    1c4a:	f8ca 9000 	str.w	r9, [sl]
    1c4e:	f8ca 4004 	str.w	r4, [sl, #4]
    1c52:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    1c56:	f300 83d2 	bgt.w	23fe <_vfiprintf_r+0xb52>
    1c5a:	9b01      	ldr	r3, [sp, #4]
    1c5c:	9903      	ldr	r1, [sp, #12]
    1c5e:	1a5c      	subs	r4, r3, r1
    1c60:	2c00      	cmp	r4, #0
    1c62:	f10a 0a08 	add.w	sl, sl, #8
    1c66:	f10c 0e01 	add.w	lr, ip, #1
    1c6a:	4660      	mov	r0, ip
    1c6c:	f300 826d 	bgt.w	214a <_vfiprintf_r+0x89e>
    1c70:	9903      	ldr	r1, [sp, #12]
    1c72:	f8ca 7000 	str.w	r7, [sl]
    1c76:	440a      	add	r2, r1
    1c78:	f1be 0f07 	cmp.w	lr, #7
    1c7c:	920f      	str	r2, [sp, #60]	; 0x3c
    1c7e:	f8ca 1004 	str.w	r1, [sl, #4]
    1c82:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
    1c86:	f340 82ce 	ble.w	2226 <_vfiprintf_r+0x97a>
    1c8a:	2a00      	cmp	r2, #0
    1c8c:	f040 833a 	bne.w	2304 <_vfiprintf_r+0xa58>
    1c90:	0770      	lsls	r0, r6, #29
    1c92:	920e      	str	r2, [sp, #56]	; 0x38
    1c94:	d538      	bpl.n	1d08 <_vfiprintf_r+0x45c>
    1c96:	9b06      	ldr	r3, [sp, #24]
    1c98:	1b5c      	subs	r4, r3, r5
    1c9a:	2c00      	cmp	r4, #0
    1c9c:	dd34      	ble.n	1d08 <_vfiprintf_r+0x45c>
    1c9e:	46da      	mov	sl, fp
    1ca0:	2c10      	cmp	r4, #16
    1ca2:	f340 84ab 	ble.w	25fc <_vfiprintf_r+0xd50>
    1ca6:	f8df 9104 	ldr.w	r9, [pc, #260]	; 1dac <_vfiprintf_r+0x500>
    1caa:	990e      	ldr	r1, [sp, #56]	; 0x38
    1cac:	464f      	mov	r7, r9
    1cae:	2610      	movs	r6, #16
    1cb0:	f8dd 9014 	ldr.w	r9, [sp, #20]
    1cb4:	e006      	b.n	1cc4 <_vfiprintf_r+0x418>
    1cb6:	1c88      	adds	r0, r1, #2
    1cb8:	f10a 0a08 	add.w	sl, sl, #8
    1cbc:	4619      	mov	r1, r3
    1cbe:	3c10      	subs	r4, #16
    1cc0:	2c10      	cmp	r4, #16
    1cc2:	dd13      	ble.n	1cec <_vfiprintf_r+0x440>
    1cc4:	1c4b      	adds	r3, r1, #1
    1cc6:	3210      	adds	r2, #16
    1cc8:	2b07      	cmp	r3, #7
    1cca:	920f      	str	r2, [sp, #60]	; 0x3c
    1ccc:	f8ca 7000 	str.w	r7, [sl]
    1cd0:	f8ca 6004 	str.w	r6, [sl, #4]
    1cd4:	930e      	str	r3, [sp, #56]	; 0x38
    1cd6:	ddee      	ble.n	1cb6 <_vfiprintf_r+0x40a>
    1cd8:	2a00      	cmp	r2, #0
    1cda:	f040 828e 	bne.w	21fa <_vfiprintf_r+0x94e>
    1cde:	3c10      	subs	r4, #16
    1ce0:	2c10      	cmp	r4, #16
    1ce2:	f04f 0001 	mov.w	r0, #1
    1ce6:	4611      	mov	r1, r2
    1ce8:	46da      	mov	sl, fp
    1cea:	dceb      	bgt.n	1cc4 <_vfiprintf_r+0x418>
    1cec:	46b9      	mov	r9, r7
    1cee:	4422      	add	r2, r4
    1cf0:	2807      	cmp	r0, #7
    1cf2:	920f      	str	r2, [sp, #60]	; 0x3c
    1cf4:	f8ca 9000 	str.w	r9, [sl]
    1cf8:	f8ca 4004 	str.w	r4, [sl, #4]
    1cfc:	900e      	str	r0, [sp, #56]	; 0x38
    1cfe:	f340 829b 	ble.w	2238 <_vfiprintf_r+0x98c>
    1d02:	2a00      	cmp	r2, #0
    1d04:	f040 8425 	bne.w	2552 <_vfiprintf_r+0xca6>
    1d08:	9b02      	ldr	r3, [sp, #8]
    1d0a:	9a06      	ldr	r2, [sp, #24]
    1d0c:	42aa      	cmp	r2, r5
    1d0e:	bfac      	ite	ge
    1d10:	189b      	addge	r3, r3, r2
    1d12:	195b      	addlt	r3, r3, r5
    1d14:	9302      	str	r3, [sp, #8]
    1d16:	e299      	b.n	224c <_vfiprintf_r+0x9a0>
    1d18:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    1d1c:	f898 3000 	ldrb.w	r3, [r8]
    1d20:	e62b      	b.n	197a <_vfiprintf_r+0xce>
    1d22:	9406      	str	r4, [sp, #24]
    1d24:	2900      	cmp	r1, #0
    1d26:	f040 84af 	bne.w	2688 <_vfiprintf_r+0xddc>
    1d2a:	f046 0610 	orr.w	r6, r6, #16
    1d2e:	06b3      	lsls	r3, r6, #26
    1d30:	f140 8312 	bpl.w	2358 <_vfiprintf_r+0xaac>
    1d34:	9904      	ldr	r1, [sp, #16]
    1d36:	3107      	adds	r1, #7
    1d38:	f021 0107 	bic.w	r1, r1, #7
    1d3c:	e9d1 2300 	ldrd	r2, r3, [r1]
    1d40:	3108      	adds	r1, #8
    1d42:	9104      	str	r1, [sp, #16]
    1d44:	4614      	mov	r4, r2
    1d46:	461d      	mov	r5, r3
    1d48:	2a00      	cmp	r2, #0
    1d4a:	f173 0300 	sbcs.w	r3, r3, #0
    1d4e:	f2c0 8386 	blt.w	245e <_vfiprintf_r+0xbb2>
    1d52:	9b01      	ldr	r3, [sp, #4]
    1d54:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
    1d58:	2b00      	cmp	r3, #0
    1d5a:	f2c0 831a 	blt.w	2392 <_vfiprintf_r+0xae6>
    1d5e:	ea54 0305 	orrs.w	r3, r4, r5
    1d62:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    1d66:	f000 80ed 	beq.w	1f44 <_vfiprintf_r+0x698>
    1d6a:	2d00      	cmp	r5, #0
    1d6c:	bf08      	it	eq
    1d6e:	2c0a      	cmpeq	r4, #10
    1d70:	f0c0 80ed 	bcc.w	1f4e <_vfiprintf_r+0x6a2>
    1d74:	465f      	mov	r7, fp
    1d76:	4620      	mov	r0, r4
    1d78:	4629      	mov	r1, r5
    1d7a:	220a      	movs	r2, #10
    1d7c:	2300      	movs	r3, #0
    1d7e:	f002 fac9 	bl	4314 <__aeabi_uldivmod>
    1d82:	3230      	adds	r2, #48	; 0x30
    1d84:	f807 2d01 	strb.w	r2, [r7, #-1]!
    1d88:	4620      	mov	r0, r4
    1d8a:	4629      	mov	r1, r5
    1d8c:	2300      	movs	r3, #0
    1d8e:	220a      	movs	r2, #10
    1d90:	f002 fac0 	bl	4314 <__aeabi_uldivmod>
    1d94:	4604      	mov	r4, r0
    1d96:	460d      	mov	r5, r1
    1d98:	ea54 0305 	orrs.w	r3, r4, r5
    1d9c:	d1eb      	bne.n	1d76 <_vfiprintf_r+0x4ca>
    1d9e:	ebc7 030b 	rsb	r3, r7, fp
    1da2:	9303      	str	r3, [sp, #12]
    1da4:	e6a2      	b.n	1aec <_vfiprintf_r+0x240>
    1da6:	bf00      	nop
    1da8:	00004694 	.word	0x00004694
    1dac:	000046b0 	.word	0x000046b0
    1db0:	00004670 	.word	0x00004670
    1db4:	9406      	str	r4, [sp, #24]
    1db6:	2900      	cmp	r1, #0
    1db8:	f040 8462 	bne.w	2680 <_vfiprintf_r+0xdd4>
    1dbc:	f046 0610 	orr.w	r6, r6, #16
    1dc0:	f016 0320 	ands.w	r3, r6, #32
    1dc4:	f000 82ae 	beq.w	2324 <_vfiprintf_r+0xa78>
    1dc8:	9b04      	ldr	r3, [sp, #16]
    1dca:	3307      	adds	r3, #7
    1dcc:	f023 0307 	bic.w	r3, r3, #7
    1dd0:	f04f 0200 	mov.w	r2, #0
    1dd4:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
    1dd8:	e9d3 4500 	ldrd	r4, r5, [r3]
    1ddc:	f103 0208 	add.w	r2, r3, #8
    1de0:	9b01      	ldr	r3, [sp, #4]
    1de2:	9204      	str	r2, [sp, #16]
    1de4:	2b00      	cmp	r3, #0
    1de6:	f2c0 8174 	blt.w	20d2 <_vfiprintf_r+0x826>
    1dea:	ea54 0305 	orrs.w	r3, r4, r5
    1dee:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    1df2:	f040 816e 	bne.w	20d2 <_vfiprintf_r+0x826>
    1df6:	9b01      	ldr	r3, [sp, #4]
    1df8:	2b00      	cmp	r3, #0
    1dfa:	f000 8430 	beq.w	265e <_vfiprintf_r+0xdb2>
    1dfe:	f04f 0900 	mov.w	r9, #0
    1e02:	2400      	movs	r4, #0
    1e04:	2500      	movs	r5, #0
    1e06:	465f      	mov	r7, fp
    1e08:	08e2      	lsrs	r2, r4, #3
    1e0a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
    1e0e:	08e9      	lsrs	r1, r5, #3
    1e10:	f004 0307 	and.w	r3, r4, #7
    1e14:	460d      	mov	r5, r1
    1e16:	4614      	mov	r4, r2
    1e18:	3330      	adds	r3, #48	; 0x30
    1e1a:	ea54 0205 	orrs.w	r2, r4, r5
    1e1e:	f807 3d01 	strb.w	r3, [r7, #-1]!
    1e22:	d1f1      	bne.n	1e08 <_vfiprintf_r+0x55c>
    1e24:	07f4      	lsls	r4, r6, #31
    1e26:	d5ba      	bpl.n	1d9e <_vfiprintf_r+0x4f2>
    1e28:	2b30      	cmp	r3, #48	; 0x30
    1e2a:	d0b8      	beq.n	1d9e <_vfiprintf_r+0x4f2>
    1e2c:	2230      	movs	r2, #48	; 0x30
    1e2e:	1e7b      	subs	r3, r7, #1
    1e30:	f807 2c01 	strb.w	r2, [r7, #-1]
    1e34:	ebc3 020b 	rsb	r2, r3, fp
    1e38:	9203      	str	r2, [sp, #12]
    1e3a:	461f      	mov	r7, r3
    1e3c:	e656      	b.n	1aec <_vfiprintf_r+0x240>
    1e3e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    1e42:	2400      	movs	r4, #0
    1e44:	f818 3b01 	ldrb.w	r3, [r8], #1
    1e48:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    1e4c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
    1e50:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    1e54:	2a09      	cmp	r2, #9
    1e56:	d9f5      	bls.n	1e44 <_vfiprintf_r+0x598>
    1e58:	e591      	b.n	197e <_vfiprintf_r+0xd2>
    1e5a:	f898 3000 	ldrb.w	r3, [r8]
    1e5e:	2101      	movs	r1, #1
    1e60:	202b      	movs	r0, #43	; 0x2b
    1e62:	e58a      	b.n	197a <_vfiprintf_r+0xce>
    1e64:	f898 3000 	ldrb.w	r3, [r8]
    1e68:	2b2a      	cmp	r3, #42	; 0x2a
    1e6a:	f108 0501 	add.w	r5, r8, #1
    1e6e:	f000 83dd 	beq.w	262c <_vfiprintf_r+0xd80>
    1e72:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    1e76:	2a09      	cmp	r2, #9
    1e78:	46a8      	mov	r8, r5
    1e7a:	bf98      	it	ls
    1e7c:	2500      	movls	r5, #0
    1e7e:	f200 83ce 	bhi.w	261e <_vfiprintf_r+0xd72>
    1e82:	f818 3b01 	ldrb.w	r3, [r8], #1
    1e86:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    1e8a:	eb02 0545 	add.w	r5, r2, r5, lsl #1
    1e8e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    1e92:	2a09      	cmp	r2, #9
    1e94:	d9f5      	bls.n	1e82 <_vfiprintf_r+0x5d6>
    1e96:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
    1e9a:	9201      	str	r2, [sp, #4]
    1e9c:	e56f      	b.n	197e <_vfiprintf_r+0xd2>
    1e9e:	9a04      	ldr	r2, [sp, #16]
    1ea0:	6814      	ldr	r4, [r2, #0]
    1ea2:	4613      	mov	r3, r2
    1ea4:	2c00      	cmp	r4, #0
    1ea6:	f103 0304 	add.w	r3, r3, #4
    1eaa:	f6ff aded 	blt.w	1a88 <_vfiprintf_r+0x1dc>
    1eae:	9304      	str	r3, [sp, #16]
    1eb0:	f898 3000 	ldrb.w	r3, [r8]
    1eb4:	e561      	b.n	197a <_vfiprintf_r+0xce>
    1eb6:	9406      	str	r4, [sp, #24]
    1eb8:	2900      	cmp	r1, #0
    1eba:	d081      	beq.n	1dc0 <_vfiprintf_r+0x514>
    1ebc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    1ec0:	e77e      	b.n	1dc0 <_vfiprintf_r+0x514>
    1ec2:	9a04      	ldr	r2, [sp, #16]
    1ec4:	9406      	str	r4, [sp, #24]
    1ec6:	6817      	ldr	r7, [r2, #0]
    1ec8:	f04f 0300 	mov.w	r3, #0
    1ecc:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    1ed0:	1d14      	adds	r4, r2, #4
    1ed2:	9b01      	ldr	r3, [sp, #4]
    1ed4:	2f00      	cmp	r7, #0
    1ed6:	f000 8386 	beq.w	25e6 <_vfiprintf_r+0xd3a>
    1eda:	2b00      	cmp	r3, #0
    1edc:	f2c0 835f 	blt.w	259e <_vfiprintf_r+0xcf2>
    1ee0:	461a      	mov	r2, r3
    1ee2:	2100      	movs	r1, #0
    1ee4:	4638      	mov	r0, r7
    1ee6:	f001 fc63 	bl	37b0 <memchr>
    1eea:	2800      	cmp	r0, #0
    1eec:	f000 838f 	beq.w	260e <_vfiprintf_r+0xd62>
    1ef0:	1bc3      	subs	r3, r0, r7
    1ef2:	9303      	str	r3, [sp, #12]
    1ef4:	2300      	movs	r3, #0
    1ef6:	9404      	str	r4, [sp, #16]
    1ef8:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
    1efc:	9301      	str	r3, [sp, #4]
    1efe:	e5f5      	b.n	1aec <_vfiprintf_r+0x240>
    1f00:	9406      	str	r4, [sp, #24]
    1f02:	2900      	cmp	r1, #0
    1f04:	f040 83b9 	bne.w	267a <_vfiprintf_r+0xdce>
    1f08:	f016 0920 	ands.w	r9, r6, #32
    1f0c:	d135      	bne.n	1f7a <_vfiprintf_r+0x6ce>
    1f0e:	f016 0310 	ands.w	r3, r6, #16
    1f12:	d103      	bne.n	1f1c <_vfiprintf_r+0x670>
    1f14:	f016 0940 	ands.w	r9, r6, #64	; 0x40
    1f18:	f040 832a 	bne.w	2570 <_vfiprintf_r+0xcc4>
    1f1c:	9a04      	ldr	r2, [sp, #16]
    1f1e:	4613      	mov	r3, r2
    1f20:	6814      	ldr	r4, [r2, #0]
    1f22:	9a01      	ldr	r2, [sp, #4]
    1f24:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
    1f28:	2a00      	cmp	r2, #0
    1f2a:	f103 0304 	add.w	r3, r3, #4
    1f2e:	f04f 0500 	mov.w	r5, #0
    1f32:	f2c0 8332 	blt.w	259a <_vfiprintf_r+0xcee>
    1f36:	ea54 0205 	orrs.w	r2, r4, r5
    1f3a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    1f3e:	9304      	str	r3, [sp, #16]
    1f40:	f47f af13 	bne.w	1d6a <_vfiprintf_r+0x4be>
    1f44:	9b01      	ldr	r3, [sp, #4]
    1f46:	2b00      	cmp	r3, #0
    1f48:	f43f adcc 	beq.w	1ae4 <_vfiprintf_r+0x238>
    1f4c:	2400      	movs	r4, #0
    1f4e:	af2a      	add	r7, sp, #168	; 0xa8
    1f50:	3430      	adds	r4, #48	; 0x30
    1f52:	f807 4d41 	strb.w	r4, [r7, #-65]!
    1f56:	ebc7 030b 	rsb	r3, r7, fp
    1f5a:	9303      	str	r3, [sp, #12]
    1f5c:	e5c6      	b.n	1aec <_vfiprintf_r+0x240>
    1f5e:	f046 0620 	orr.w	r6, r6, #32
    1f62:	f898 3000 	ldrb.w	r3, [r8]
    1f66:	e508      	b.n	197a <_vfiprintf_r+0xce>
    1f68:	9406      	str	r4, [sp, #24]
    1f6a:	2900      	cmp	r1, #0
    1f6c:	f040 836e 	bne.w	264c <_vfiprintf_r+0xda0>
    1f70:	f046 0610 	orr.w	r6, r6, #16
    1f74:	f016 0920 	ands.w	r9, r6, #32
    1f78:	d0c9      	beq.n	1f0e <_vfiprintf_r+0x662>
    1f7a:	9b04      	ldr	r3, [sp, #16]
    1f7c:	3307      	adds	r3, #7
    1f7e:	f023 0307 	bic.w	r3, r3, #7
    1f82:	f04f 0200 	mov.w	r2, #0
    1f86:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
    1f8a:	e9d3 4500 	ldrd	r4, r5, [r3]
    1f8e:	f103 0208 	add.w	r2, r3, #8
    1f92:	9b01      	ldr	r3, [sp, #4]
    1f94:	9204      	str	r2, [sp, #16]
    1f96:	2b00      	cmp	r3, #0
    1f98:	f2c0 81f9 	blt.w	238e <_vfiprintf_r+0xae2>
    1f9c:	ea54 0305 	orrs.w	r3, r4, r5
    1fa0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    1fa4:	f04f 0900 	mov.w	r9, #0
    1fa8:	f47f aedf 	bne.w	1d6a <_vfiprintf_r+0x4be>
    1fac:	e7ca      	b.n	1f44 <_vfiprintf_r+0x698>
    1fae:	9406      	str	r4, [sp, #24]
    1fb0:	2900      	cmp	r1, #0
    1fb2:	f040 8351 	bne.w	2658 <_vfiprintf_r+0xdac>
    1fb6:	06b2      	lsls	r2, r6, #26
    1fb8:	48ae      	ldr	r0, [pc, #696]	; (2274 <_vfiprintf_r+0x9c8>)
    1fba:	d541      	bpl.n	2040 <_vfiprintf_r+0x794>
    1fbc:	9a04      	ldr	r2, [sp, #16]
    1fbe:	3207      	adds	r2, #7
    1fc0:	f022 0207 	bic.w	r2, r2, #7
    1fc4:	e9d2 4500 	ldrd	r4, r5, [r2]
    1fc8:	f102 0108 	add.w	r1, r2, #8
    1fcc:	9104      	str	r1, [sp, #16]
    1fce:	f016 0901 	ands.w	r9, r6, #1
    1fd2:	f000 8177 	beq.w	22c4 <_vfiprintf_r+0xa18>
    1fd6:	ea54 0205 	orrs.w	r2, r4, r5
    1fda:	f040 8226 	bne.w	242a <_vfiprintf_r+0xb7e>
    1fde:	f04f 0300 	mov.w	r3, #0
    1fe2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    1fe6:	9b01      	ldr	r3, [sp, #4]
    1fe8:	2b00      	cmp	r3, #0
    1fea:	f2c0 8196 	blt.w	231a <_vfiprintf_r+0xa6e>
    1fee:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    1ff2:	e572      	b.n	1ada <_vfiprintf_r+0x22e>
    1ff4:	9a04      	ldr	r2, [sp, #16]
    1ff6:	9406      	str	r4, [sp, #24]
    1ff8:	6813      	ldr	r3, [r2, #0]
    1ffa:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1ffe:	4613      	mov	r3, r2
    2000:	f04f 0100 	mov.w	r1, #0
    2004:	2501      	movs	r5, #1
    2006:	3304      	adds	r3, #4
    2008:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
    200c:	9304      	str	r3, [sp, #16]
    200e:	9503      	str	r5, [sp, #12]
    2010:	af10      	add	r7, sp, #64	; 0x40
    2012:	2300      	movs	r3, #0
    2014:	9301      	str	r3, [sp, #4]
    2016:	e573      	b.n	1b00 <_vfiprintf_r+0x254>
    2018:	f898 3000 	ldrb.w	r3, [r8]
    201c:	2800      	cmp	r0, #0
    201e:	f47f acac 	bne.w	197a <_vfiprintf_r+0xce>
    2022:	2101      	movs	r1, #1
    2024:	2020      	movs	r0, #32
    2026:	e4a8      	b.n	197a <_vfiprintf_r+0xce>
    2028:	f046 0601 	orr.w	r6, r6, #1
    202c:	f898 3000 	ldrb.w	r3, [r8]
    2030:	e4a3      	b.n	197a <_vfiprintf_r+0xce>
    2032:	9406      	str	r4, [sp, #24]
    2034:	2900      	cmp	r1, #0
    2036:	f040 830c 	bne.w	2652 <_vfiprintf_r+0xda6>
    203a:	06b2      	lsls	r2, r6, #26
    203c:	488e      	ldr	r0, [pc, #568]	; (2278 <_vfiprintf_r+0x9cc>)
    203e:	d4bd      	bmi.n	1fbc <_vfiprintf_r+0x710>
    2040:	9904      	ldr	r1, [sp, #16]
    2042:	06f7      	lsls	r7, r6, #27
    2044:	460a      	mov	r2, r1
    2046:	f100 819d 	bmi.w	2384 <_vfiprintf_r+0xad8>
    204a:	0675      	lsls	r5, r6, #25
    204c:	f140 819a 	bpl.w	2384 <_vfiprintf_r+0xad8>
    2050:	3204      	adds	r2, #4
    2052:	880c      	ldrh	r4, [r1, #0]
    2054:	9204      	str	r2, [sp, #16]
    2056:	2500      	movs	r5, #0
    2058:	e7b9      	b.n	1fce <_vfiprintf_r+0x722>
    205a:	f046 0640 	orr.w	r6, r6, #64	; 0x40
    205e:	f898 3000 	ldrb.w	r3, [r8]
    2062:	e48a      	b.n	197a <_vfiprintf_r+0xce>
    2064:	f898 3000 	ldrb.w	r3, [r8]
    2068:	2b6c      	cmp	r3, #108	; 0x6c
    206a:	bf03      	ittte	eq
    206c:	f898 3001 	ldrbeq.w	r3, [r8, #1]
    2070:	f046 0620 	orreq.w	r6, r6, #32
    2074:	f108 0801 	addeq.w	r8, r8, #1
    2078:	f046 0610 	orrne.w	r6, r6, #16
    207c:	e47d      	b.n	197a <_vfiprintf_r+0xce>
    207e:	2900      	cmp	r1, #0
    2080:	f040 8309 	bne.w	2696 <_vfiprintf_r+0xdea>
    2084:	06b4      	lsls	r4, r6, #26
    2086:	f140 821c 	bpl.w	24c2 <_vfiprintf_r+0xc16>
    208a:	9a04      	ldr	r2, [sp, #16]
    208c:	9902      	ldr	r1, [sp, #8]
    208e:	6813      	ldr	r3, [r2, #0]
    2090:	17cd      	asrs	r5, r1, #31
    2092:	4608      	mov	r0, r1
    2094:	3204      	adds	r2, #4
    2096:	4629      	mov	r1, r5
    2098:	9204      	str	r2, [sp, #16]
    209a:	e9c3 0100 	strd	r0, r1, [r3]
    209e:	e436      	b.n	190e <_vfiprintf_r+0x62>
    20a0:	9406      	str	r4, [sp, #24]
    20a2:	2900      	cmp	r1, #0
    20a4:	f43f ae43 	beq.w	1d2e <_vfiprintf_r+0x482>
    20a8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    20ac:	e63f      	b.n	1d2e <_vfiprintf_r+0x482>
    20ae:	9406      	str	r4, [sp, #24]
    20b0:	2900      	cmp	r1, #0
    20b2:	f040 82ed 	bne.w	2690 <_vfiprintf_r+0xde4>
    20b6:	2b00      	cmp	r3, #0
    20b8:	f000 808f 	beq.w	21da <_vfiprintf_r+0x92e>
    20bc:	2501      	movs	r5, #1
    20be:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    20c2:	f04f 0300 	mov.w	r3, #0
    20c6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    20ca:	9503      	str	r5, [sp, #12]
    20cc:	af10      	add	r7, sp, #64	; 0x40
    20ce:	e7a0      	b.n	2012 <_vfiprintf_r+0x766>
    20d0:	9304      	str	r3, [sp, #16]
    20d2:	f04f 0900 	mov.w	r9, #0
    20d6:	e696      	b.n	1e06 <_vfiprintf_r+0x55a>
    20d8:	aa0d      	add	r2, sp, #52	; 0x34
    20da:	9900      	ldr	r1, [sp, #0]
    20dc:	9309      	str	r3, [sp, #36]	; 0x24
    20de:	4648      	mov	r0, r9
    20e0:	f7ff fba8 	bl	1834 <__sprint_r.part.0>
    20e4:	2800      	cmp	r0, #0
    20e6:	d17f      	bne.n	21e8 <_vfiprintf_r+0x93c>
    20e8:	980e      	ldr	r0, [sp, #56]	; 0x38
    20ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    20ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
    20ee:	f100 0e01 	add.w	lr, r0, #1
    20f2:	46dc      	mov	ip, fp
    20f4:	e529      	b.n	1b4a <_vfiprintf_r+0x29e>
    20f6:	980e      	ldr	r0, [sp, #56]	; 0x38
    20f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    20fa:	f100 0e01 	add.w	lr, r0, #1
    20fe:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    2102:	2b00      	cmp	r3, #0
    2104:	f43f ad50 	beq.w	1ba8 <_vfiprintf_r+0x2fc>
    2108:	3201      	adds	r2, #1
    210a:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
    210e:	2301      	movs	r3, #1
    2110:	f1be 0f07 	cmp.w	lr, #7
    2114:	920f      	str	r2, [sp, #60]	; 0x3c
    2116:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
    211a:	e88a 000a 	stmia.w	sl, {r1, r3}
    211e:	f340 80bf 	ble.w	22a0 <_vfiprintf_r+0x9f4>
    2122:	2a00      	cmp	r2, #0
    2124:	f040 814e 	bne.w	23c4 <_vfiprintf_r+0xb18>
    2128:	9907      	ldr	r1, [sp, #28]
    212a:	2900      	cmp	r1, #0
    212c:	f040 80be 	bne.w	22ac <_vfiprintf_r+0xa00>
    2130:	469e      	mov	lr, r3
    2132:	4610      	mov	r0, r2
    2134:	46da      	mov	sl, fp
    2136:	9b08      	ldr	r3, [sp, #32]
    2138:	2b80      	cmp	r3, #128	; 0x80
    213a:	f43f ad50 	beq.w	1bde <_vfiprintf_r+0x332>
    213e:	9b01      	ldr	r3, [sp, #4]
    2140:	9903      	ldr	r1, [sp, #12]
    2142:	1a5c      	subs	r4, r3, r1
    2144:	2c00      	cmp	r4, #0
    2146:	f77f ad93 	ble.w	1c70 <_vfiprintf_r+0x3c4>
    214a:	2c10      	cmp	r4, #16
    214c:	f8df 912c 	ldr.w	r9, [pc, #300]	; 227c <_vfiprintf_r+0x9d0>
    2150:	dd25      	ble.n	219e <_vfiprintf_r+0x8f2>
    2152:	46d4      	mov	ip, sl
    2154:	2310      	movs	r3, #16
    2156:	46c2      	mov	sl, r8
    2158:	46a8      	mov	r8, r5
    215a:	464d      	mov	r5, r9
    215c:	f8dd 9014 	ldr.w	r9, [sp, #20]
    2160:	e007      	b.n	2172 <_vfiprintf_r+0x8c6>
    2162:	f100 0e02 	add.w	lr, r0, #2
    2166:	f10c 0c08 	add.w	ip, ip, #8
    216a:	4608      	mov	r0, r1
    216c:	3c10      	subs	r4, #16
    216e:	2c10      	cmp	r4, #16
    2170:	dd11      	ble.n	2196 <_vfiprintf_r+0x8ea>
    2172:	1c41      	adds	r1, r0, #1
    2174:	3210      	adds	r2, #16
    2176:	2907      	cmp	r1, #7
    2178:	920f      	str	r2, [sp, #60]	; 0x3c
    217a:	f8cc 5000 	str.w	r5, [ip]
    217e:	f8cc 3004 	str.w	r3, [ip, #4]
    2182:	910e      	str	r1, [sp, #56]	; 0x38
    2184:	dded      	ble.n	2162 <_vfiprintf_r+0x8b6>
    2186:	b9d2      	cbnz	r2, 21be <_vfiprintf_r+0x912>
    2188:	3c10      	subs	r4, #16
    218a:	2c10      	cmp	r4, #16
    218c:	f04f 0e01 	mov.w	lr, #1
    2190:	4610      	mov	r0, r2
    2192:	46dc      	mov	ip, fp
    2194:	dced      	bgt.n	2172 <_vfiprintf_r+0x8c6>
    2196:	46a9      	mov	r9, r5
    2198:	4645      	mov	r5, r8
    219a:	46d0      	mov	r8, sl
    219c:	46e2      	mov	sl, ip
    219e:	4422      	add	r2, r4
    21a0:	f1be 0f07 	cmp.w	lr, #7
    21a4:	920f      	str	r2, [sp, #60]	; 0x3c
    21a6:	f8ca 9000 	str.w	r9, [sl]
    21aa:	f8ca 4004 	str.w	r4, [sl, #4]
    21ae:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
    21b2:	dc2e      	bgt.n	2212 <_vfiprintf_r+0x966>
    21b4:	f10a 0a08 	add.w	sl, sl, #8
    21b8:	f10e 0e01 	add.w	lr, lr, #1
    21bc:	e558      	b.n	1c70 <_vfiprintf_r+0x3c4>
    21be:	aa0d      	add	r2, sp, #52	; 0x34
    21c0:	9900      	ldr	r1, [sp, #0]
    21c2:	9301      	str	r3, [sp, #4]
    21c4:	4648      	mov	r0, r9
    21c6:	f7ff fb35 	bl	1834 <__sprint_r.part.0>
    21ca:	b968      	cbnz	r0, 21e8 <_vfiprintf_r+0x93c>
    21cc:	980e      	ldr	r0, [sp, #56]	; 0x38
    21ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    21d0:	9b01      	ldr	r3, [sp, #4]
    21d2:	f100 0e01 	add.w	lr, r0, #1
    21d6:	46dc      	mov	ip, fp
    21d8:	e7c8      	b.n	216c <_vfiprintf_r+0x8c0>
    21da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    21dc:	b123      	cbz	r3, 21e8 <_vfiprintf_r+0x93c>
    21de:	9805      	ldr	r0, [sp, #20]
    21e0:	9900      	ldr	r1, [sp, #0]
    21e2:	aa0d      	add	r2, sp, #52	; 0x34
    21e4:	f7ff fb26 	bl	1834 <__sprint_r.part.0>
    21e8:	9b00      	ldr	r3, [sp, #0]
    21ea:	899b      	ldrh	r3, [r3, #12]
    21ec:	065a      	lsls	r2, r3, #25
    21ee:	f100 818b 	bmi.w	2508 <_vfiprintf_r+0xc5c>
    21f2:	9802      	ldr	r0, [sp, #8]
    21f4:	b02b      	add	sp, #172	; 0xac
    21f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21fa:	aa0d      	add	r2, sp, #52	; 0x34
    21fc:	9900      	ldr	r1, [sp, #0]
    21fe:	4648      	mov	r0, r9
    2200:	f7ff fb18 	bl	1834 <__sprint_r.part.0>
    2204:	2800      	cmp	r0, #0
    2206:	d1ef      	bne.n	21e8 <_vfiprintf_r+0x93c>
    2208:	990e      	ldr	r1, [sp, #56]	; 0x38
    220a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    220c:	1c48      	adds	r0, r1, #1
    220e:	46da      	mov	sl, fp
    2210:	e555      	b.n	1cbe <_vfiprintf_r+0x412>
    2212:	2a00      	cmp	r2, #0
    2214:	f040 80fb 	bne.w	240e <_vfiprintf_r+0xb62>
    2218:	9a03      	ldr	r2, [sp, #12]
    221a:	921b      	str	r2, [sp, #108]	; 0x6c
    221c:	2301      	movs	r3, #1
    221e:	920f      	str	r2, [sp, #60]	; 0x3c
    2220:	971a      	str	r7, [sp, #104]	; 0x68
    2222:	930e      	str	r3, [sp, #56]	; 0x38
    2224:	46da      	mov	sl, fp
    2226:	f10a 0a08 	add.w	sl, sl, #8
    222a:	0771      	lsls	r1, r6, #29
    222c:	d504      	bpl.n	2238 <_vfiprintf_r+0x98c>
    222e:	9b06      	ldr	r3, [sp, #24]
    2230:	1b5c      	subs	r4, r3, r5
    2232:	2c00      	cmp	r4, #0
    2234:	f73f ad34 	bgt.w	1ca0 <_vfiprintf_r+0x3f4>
    2238:	9b02      	ldr	r3, [sp, #8]
    223a:	9906      	ldr	r1, [sp, #24]
    223c:	42a9      	cmp	r1, r5
    223e:	bfac      	ite	ge
    2240:	185b      	addge	r3, r3, r1
    2242:	195b      	addlt	r3, r3, r5
    2244:	9302      	str	r3, [sp, #8]
    2246:	2a00      	cmp	r2, #0
    2248:	f040 80b3 	bne.w	23b2 <_vfiprintf_r+0xb06>
    224c:	2300      	movs	r3, #0
    224e:	930e      	str	r3, [sp, #56]	; 0x38
    2250:	46da      	mov	sl, fp
    2252:	f7ff bb5c 	b.w	190e <_vfiprintf_r+0x62>
    2256:	aa0d      	add	r2, sp, #52	; 0x34
    2258:	9900      	ldr	r1, [sp, #0]
    225a:	9307      	str	r3, [sp, #28]
    225c:	4648      	mov	r0, r9
    225e:	f7ff fae9 	bl	1834 <__sprint_r.part.0>
    2262:	2800      	cmp	r0, #0
    2264:	d1c0      	bne.n	21e8 <_vfiprintf_r+0x93c>
    2266:	980e      	ldr	r0, [sp, #56]	; 0x38
    2268:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    226a:	9b07      	ldr	r3, [sp, #28]
    226c:	f100 0c01 	add.w	ip, r0, #1
    2270:	46de      	mov	lr, fp
    2272:	e4cb      	b.n	1c0c <_vfiprintf_r+0x360>
    2274:	00004680 	.word	0x00004680
    2278:	00004694 	.word	0x00004694
    227c:	00004670 	.word	0x00004670
    2280:	2a00      	cmp	r2, #0
    2282:	f040 8133 	bne.w	24ec <_vfiprintf_r+0xc40>
    2286:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    228a:	2b00      	cmp	r3, #0
    228c:	f000 80f5 	beq.w	247a <_vfiprintf_r+0xbce>
    2290:	2301      	movs	r3, #1
    2292:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
    2296:	461a      	mov	r2, r3
    2298:	931b      	str	r3, [sp, #108]	; 0x6c
    229a:	469e      	mov	lr, r3
    229c:	911a      	str	r1, [sp, #104]	; 0x68
    229e:	46da      	mov	sl, fp
    22a0:	4670      	mov	r0, lr
    22a2:	f10a 0a08 	add.w	sl, sl, #8
    22a6:	f10e 0e01 	add.w	lr, lr, #1
    22aa:	e47d      	b.n	1ba8 <_vfiprintf_r+0x2fc>
    22ac:	a90c      	add	r1, sp, #48	; 0x30
    22ae:	2202      	movs	r2, #2
    22b0:	469e      	mov	lr, r3
    22b2:	911a      	str	r1, [sp, #104]	; 0x68
    22b4:	921b      	str	r2, [sp, #108]	; 0x6c
    22b6:	46da      	mov	sl, fp
    22b8:	4670      	mov	r0, lr
    22ba:	f10a 0a08 	add.w	sl, sl, #8
    22be:	f10e 0e01 	add.w	lr, lr, #1
    22c2:	e738      	b.n	2136 <_vfiprintf_r+0x88a>
    22c4:	9b01      	ldr	r3, [sp, #4]
    22c6:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
    22ca:	2b00      	cmp	r3, #0
    22cc:	f2c0 812a 	blt.w	2524 <_vfiprintf_r+0xc78>
    22d0:	ea54 0305 	orrs.w	r3, r4, r5
    22d4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    22d8:	f43f abff 	beq.w	1ada <_vfiprintf_r+0x22e>
    22dc:	465f      	mov	r7, fp
    22de:	0923      	lsrs	r3, r4, #4
    22e0:	f004 010f 	and.w	r1, r4, #15
    22e4:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
    22e8:	092a      	lsrs	r2, r5, #4
    22ea:	461c      	mov	r4, r3
    22ec:	4615      	mov	r5, r2
    22ee:	5c43      	ldrb	r3, [r0, r1]
    22f0:	f807 3d01 	strb.w	r3, [r7, #-1]!
    22f4:	ea54 0305 	orrs.w	r3, r4, r5
    22f8:	d1f1      	bne.n	22de <_vfiprintf_r+0xa32>
    22fa:	ebc7 030b 	rsb	r3, r7, fp
    22fe:	9303      	str	r3, [sp, #12]
    2300:	f7ff bbf4 	b.w	1aec <_vfiprintf_r+0x240>
    2304:	aa0d      	add	r2, sp, #52	; 0x34
    2306:	9900      	ldr	r1, [sp, #0]
    2308:	9805      	ldr	r0, [sp, #20]
    230a:	f7ff fa93 	bl	1834 <__sprint_r.part.0>
    230e:	2800      	cmp	r0, #0
    2310:	f47f af6a 	bne.w	21e8 <_vfiprintf_r+0x93c>
    2314:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    2316:	46da      	mov	sl, fp
    2318:	e787      	b.n	222a <_vfiprintf_r+0x97e>
    231a:	f04f 0900 	mov.w	r9, #0
    231e:	2400      	movs	r4, #0
    2320:	2500      	movs	r5, #0
    2322:	e7db      	b.n	22dc <_vfiprintf_r+0xa30>
    2324:	f016 0210 	ands.w	r2, r6, #16
    2328:	f000 80b2 	beq.w	2490 <_vfiprintf_r+0xbe4>
    232c:	9904      	ldr	r1, [sp, #16]
    232e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    2332:	460a      	mov	r2, r1
    2334:	680c      	ldr	r4, [r1, #0]
    2336:	9901      	ldr	r1, [sp, #4]
    2338:	2900      	cmp	r1, #0
    233a:	f102 0204 	add.w	r2, r2, #4
    233e:	f04f 0500 	mov.w	r5, #0
    2342:	f2c0 8159 	blt.w	25f8 <_vfiprintf_r+0xd4c>
    2346:	ea54 0105 	orrs.w	r1, r4, r5
    234a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    234e:	9204      	str	r2, [sp, #16]
    2350:	f43f ad51 	beq.w	1df6 <_vfiprintf_r+0x54a>
    2354:	4699      	mov	r9, r3
    2356:	e556      	b.n	1e06 <_vfiprintf_r+0x55a>
    2358:	06f7      	lsls	r7, r6, #27
    235a:	d40a      	bmi.n	2372 <_vfiprintf_r+0xac6>
    235c:	0675      	lsls	r5, r6, #25
    235e:	d508      	bpl.n	2372 <_vfiprintf_r+0xac6>
    2360:	9904      	ldr	r1, [sp, #16]
    2362:	f9b1 4000 	ldrsh.w	r4, [r1]
    2366:	3104      	adds	r1, #4
    2368:	17e5      	asrs	r5, r4, #31
    236a:	4622      	mov	r2, r4
    236c:	462b      	mov	r3, r5
    236e:	9104      	str	r1, [sp, #16]
    2370:	e4ea      	b.n	1d48 <_vfiprintf_r+0x49c>
    2372:	9a04      	ldr	r2, [sp, #16]
    2374:	6814      	ldr	r4, [r2, #0]
    2376:	4613      	mov	r3, r2
    2378:	3304      	adds	r3, #4
    237a:	17e5      	asrs	r5, r4, #31
    237c:	9304      	str	r3, [sp, #16]
    237e:	4622      	mov	r2, r4
    2380:	462b      	mov	r3, r5
    2382:	e4e1      	b.n	1d48 <_vfiprintf_r+0x49c>
    2384:	6814      	ldr	r4, [r2, #0]
    2386:	3204      	adds	r2, #4
    2388:	9204      	str	r2, [sp, #16]
    238a:	2500      	movs	r5, #0
    238c:	e61f      	b.n	1fce <_vfiprintf_r+0x722>
    238e:	f04f 0900 	mov.w	r9, #0
    2392:	ea54 0305 	orrs.w	r3, r4, r5
    2396:	f47f ace8 	bne.w	1d6a <_vfiprintf_r+0x4be>
    239a:	e5d8      	b.n	1f4e <_vfiprintf_r+0x6a2>
    239c:	aa0d      	add	r2, sp, #52	; 0x34
    239e:	9900      	ldr	r1, [sp, #0]
    23a0:	9805      	ldr	r0, [sp, #20]
    23a2:	f7ff fa47 	bl	1834 <__sprint_r.part.0>
    23a6:	2800      	cmp	r0, #0
    23a8:	f47f af1e 	bne.w	21e8 <_vfiprintf_r+0x93c>
    23ac:	46da      	mov	sl, fp
    23ae:	f7ff bb48 	b.w	1a42 <_vfiprintf_r+0x196>
    23b2:	aa0d      	add	r2, sp, #52	; 0x34
    23b4:	9900      	ldr	r1, [sp, #0]
    23b6:	9805      	ldr	r0, [sp, #20]
    23b8:	f7ff fa3c 	bl	1834 <__sprint_r.part.0>
    23bc:	2800      	cmp	r0, #0
    23be:	f43f af45 	beq.w	224c <_vfiprintf_r+0x9a0>
    23c2:	e711      	b.n	21e8 <_vfiprintf_r+0x93c>
    23c4:	aa0d      	add	r2, sp, #52	; 0x34
    23c6:	9900      	ldr	r1, [sp, #0]
    23c8:	9805      	ldr	r0, [sp, #20]
    23ca:	f7ff fa33 	bl	1834 <__sprint_r.part.0>
    23ce:	2800      	cmp	r0, #0
    23d0:	f47f af0a 	bne.w	21e8 <_vfiprintf_r+0x93c>
    23d4:	980e      	ldr	r0, [sp, #56]	; 0x38
    23d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    23d8:	f100 0e01 	add.w	lr, r0, #1
    23dc:	46da      	mov	sl, fp
    23de:	f7ff bbe3 	b.w	1ba8 <_vfiprintf_r+0x2fc>
    23e2:	aa0d      	add	r2, sp, #52	; 0x34
    23e4:	9900      	ldr	r1, [sp, #0]
    23e6:	9805      	ldr	r0, [sp, #20]
    23e8:	f7ff fa24 	bl	1834 <__sprint_r.part.0>
    23ec:	2800      	cmp	r0, #0
    23ee:	f47f aefb 	bne.w	21e8 <_vfiprintf_r+0x93c>
    23f2:	980e      	ldr	r0, [sp, #56]	; 0x38
    23f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    23f6:	f100 0e01 	add.w	lr, r0, #1
    23fa:	46da      	mov	sl, fp
    23fc:	e69b      	b.n	2136 <_vfiprintf_r+0x88a>
    23fe:	2a00      	cmp	r2, #0
    2400:	f040 80d8 	bne.w	25b4 <_vfiprintf_r+0xd08>
    2404:	f04f 0e01 	mov.w	lr, #1
    2408:	4610      	mov	r0, r2
    240a:	46da      	mov	sl, fp
    240c:	e697      	b.n	213e <_vfiprintf_r+0x892>
    240e:	aa0d      	add	r2, sp, #52	; 0x34
    2410:	9900      	ldr	r1, [sp, #0]
    2412:	9805      	ldr	r0, [sp, #20]
    2414:	f7ff fa0e 	bl	1834 <__sprint_r.part.0>
    2418:	2800      	cmp	r0, #0
    241a:	f47f aee5 	bne.w	21e8 <_vfiprintf_r+0x93c>
    241e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2420:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    2422:	f103 0e01 	add.w	lr, r3, #1
    2426:	46da      	mov	sl, fp
    2428:	e422      	b.n	1c70 <_vfiprintf_r+0x3c4>
    242a:	2230      	movs	r2, #48	; 0x30
    242c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
    2430:	9a01      	ldr	r2, [sp, #4]
    2432:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    2436:	2a00      	cmp	r2, #0
    2438:	f04f 0300 	mov.w	r3, #0
    243c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    2440:	f046 0302 	orr.w	r3, r6, #2
    2444:	f2c0 80cb 	blt.w	25de <_vfiprintf_r+0xd32>
    2448:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    244c:	f046 0602 	orr.w	r6, r6, #2
    2450:	f04f 0900 	mov.w	r9, #0
    2454:	e742      	b.n	22dc <_vfiprintf_r+0xa30>
    2456:	f04f 0900 	mov.w	r9, #0
    245a:	4890      	ldr	r0, [pc, #576]	; (269c <_vfiprintf_r+0xdf0>)
    245c:	e73e      	b.n	22dc <_vfiprintf_r+0xa30>
    245e:	9b01      	ldr	r3, [sp, #4]
    2460:	4264      	negs	r4, r4
    2462:	f04f 092d 	mov.w	r9, #45	; 0x2d
    2466:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    246a:	2b00      	cmp	r3, #0
    246c:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
    2470:	f6ff ac7b 	blt.w	1d6a <_vfiprintf_r+0x4be>
    2474:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    2478:	e477      	b.n	1d6a <_vfiprintf_r+0x4be>
    247a:	9b07      	ldr	r3, [sp, #28]
    247c:	2b00      	cmp	r3, #0
    247e:	d072      	beq.n	2566 <_vfiprintf_r+0xcba>
    2480:	ab0c      	add	r3, sp, #48	; 0x30
    2482:	2202      	movs	r2, #2
    2484:	931a      	str	r3, [sp, #104]	; 0x68
    2486:	921b      	str	r2, [sp, #108]	; 0x6c
    2488:	f04f 0e01 	mov.w	lr, #1
    248c:	46da      	mov	sl, fp
    248e:	e713      	b.n	22b8 <_vfiprintf_r+0xa0c>
    2490:	f016 0940 	ands.w	r9, r6, #64	; 0x40
    2494:	d048      	beq.n	2528 <_vfiprintf_r+0xc7c>
    2496:	9904      	ldr	r1, [sp, #16]
    2498:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
    249c:	460b      	mov	r3, r1
    249e:	880c      	ldrh	r4, [r1, #0]
    24a0:	9901      	ldr	r1, [sp, #4]
    24a2:	2900      	cmp	r1, #0
    24a4:	f103 0304 	add.w	r3, r3, #4
    24a8:	f04f 0500 	mov.w	r5, #0
    24ac:	f6ff ae10 	blt.w	20d0 <_vfiprintf_r+0x824>
    24b0:	ea54 0105 	orrs.w	r1, r4, r5
    24b4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    24b8:	9304      	str	r3, [sp, #16]
    24ba:	f43f ac9c 	beq.w	1df6 <_vfiprintf_r+0x54a>
    24be:	4691      	mov	r9, r2
    24c0:	e4a1      	b.n	1e06 <_vfiprintf_r+0x55a>
    24c2:	06f0      	lsls	r0, r6, #27
    24c4:	d40a      	bmi.n	24dc <_vfiprintf_r+0xc30>
    24c6:	0671      	lsls	r1, r6, #25
    24c8:	d508      	bpl.n	24dc <_vfiprintf_r+0xc30>
    24ca:	9a04      	ldr	r2, [sp, #16]
    24cc:	6813      	ldr	r3, [r2, #0]
    24ce:	3204      	adds	r2, #4
    24d0:	9204      	str	r2, [sp, #16]
    24d2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    24d6:	801a      	strh	r2, [r3, #0]
    24d8:	f7ff ba19 	b.w	190e <_vfiprintf_r+0x62>
    24dc:	9a04      	ldr	r2, [sp, #16]
    24de:	6813      	ldr	r3, [r2, #0]
    24e0:	3204      	adds	r2, #4
    24e2:	9204      	str	r2, [sp, #16]
    24e4:	9a02      	ldr	r2, [sp, #8]
    24e6:	601a      	str	r2, [r3, #0]
    24e8:	f7ff ba11 	b.w	190e <_vfiprintf_r+0x62>
    24ec:	aa0d      	add	r2, sp, #52	; 0x34
    24ee:	9900      	ldr	r1, [sp, #0]
    24f0:	9805      	ldr	r0, [sp, #20]
    24f2:	f7ff f99f 	bl	1834 <__sprint_r.part.0>
    24f6:	2800      	cmp	r0, #0
    24f8:	f47f ae76 	bne.w	21e8 <_vfiprintf_r+0x93c>
    24fc:	980e      	ldr	r0, [sp, #56]	; 0x38
    24fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    2500:	f100 0e01 	add.w	lr, r0, #1
    2504:	46da      	mov	sl, fp
    2506:	e5fa      	b.n	20fe <_vfiprintf_r+0x852>
    2508:	f04f 30ff 	mov.w	r0, #4294967295
    250c:	f7ff bab6 	b.w	1a7c <_vfiprintf_r+0x1d0>
    2510:	4862      	ldr	r0, [pc, #392]	; (269c <_vfiprintf_r+0xdf0>)
    2512:	4616      	mov	r6, r2
    2514:	ea54 0205 	orrs.w	r2, r4, r5
    2518:	9304      	str	r3, [sp, #16]
    251a:	f04f 0900 	mov.w	r9, #0
    251e:	f47f aedd 	bne.w	22dc <_vfiprintf_r+0xa30>
    2522:	e6fc      	b.n	231e <_vfiprintf_r+0xa72>
    2524:	9b04      	ldr	r3, [sp, #16]
    2526:	e7f5      	b.n	2514 <_vfiprintf_r+0xc68>
    2528:	9a04      	ldr	r2, [sp, #16]
    252a:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
    252e:	4613      	mov	r3, r2
    2530:	6814      	ldr	r4, [r2, #0]
    2532:	9a01      	ldr	r2, [sp, #4]
    2534:	2a00      	cmp	r2, #0
    2536:	f103 0304 	add.w	r3, r3, #4
    253a:	f04f 0500 	mov.w	r5, #0
    253e:	f6ff adc7 	blt.w	20d0 <_vfiprintf_r+0x824>
    2542:	ea54 0205 	orrs.w	r2, r4, r5
    2546:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    254a:	9304      	str	r3, [sp, #16]
    254c:	f47f ac5b 	bne.w	1e06 <_vfiprintf_r+0x55a>
    2550:	e451      	b.n	1df6 <_vfiprintf_r+0x54a>
    2552:	aa0d      	add	r2, sp, #52	; 0x34
    2554:	9900      	ldr	r1, [sp, #0]
    2556:	9805      	ldr	r0, [sp, #20]
    2558:	f7ff f96c 	bl	1834 <__sprint_r.part.0>
    255c:	2800      	cmp	r0, #0
    255e:	f47f ae43 	bne.w	21e8 <_vfiprintf_r+0x93c>
    2562:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    2564:	e668      	b.n	2238 <_vfiprintf_r+0x98c>
    2566:	4610      	mov	r0, r2
    2568:	f04f 0e01 	mov.w	lr, #1
    256c:	46da      	mov	sl, fp
    256e:	e5e6      	b.n	213e <_vfiprintf_r+0x892>
    2570:	9904      	ldr	r1, [sp, #16]
    2572:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    2576:	460a      	mov	r2, r1
    2578:	880c      	ldrh	r4, [r1, #0]
    257a:	9901      	ldr	r1, [sp, #4]
    257c:	2900      	cmp	r1, #0
    257e:	f102 0204 	add.w	r2, r2, #4
    2582:	f04f 0500 	mov.w	r5, #0
    2586:	db4e      	blt.n	2626 <_vfiprintf_r+0xd7a>
    2588:	ea54 0105 	orrs.w	r1, r4, r5
    258c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    2590:	9204      	str	r2, [sp, #16]
    2592:	4699      	mov	r9, r3
    2594:	f47f abe9 	bne.w	1d6a <_vfiprintf_r+0x4be>
    2598:	e4d4      	b.n	1f44 <_vfiprintf_r+0x698>
    259a:	9304      	str	r3, [sp, #16]
    259c:	e6f9      	b.n	2392 <_vfiprintf_r+0xae6>
    259e:	4638      	mov	r0, r7
    25a0:	9404      	str	r4, [sp, #16]
    25a2:	f001 fcad 	bl	3f00 <strlen>
    25a6:	2300      	movs	r3, #0
    25a8:	9003      	str	r0, [sp, #12]
    25aa:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
    25ae:	9301      	str	r3, [sp, #4]
    25b0:	f7ff ba9c 	b.w	1aec <_vfiprintf_r+0x240>
    25b4:	aa0d      	add	r2, sp, #52	; 0x34
    25b6:	9900      	ldr	r1, [sp, #0]
    25b8:	9805      	ldr	r0, [sp, #20]
    25ba:	f7ff f93b 	bl	1834 <__sprint_r.part.0>
    25be:	2800      	cmp	r0, #0
    25c0:	f47f ae12 	bne.w	21e8 <_vfiprintf_r+0x93c>
    25c4:	980e      	ldr	r0, [sp, #56]	; 0x38
    25c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    25c8:	f100 0e01 	add.w	lr, r0, #1
    25cc:	46da      	mov	sl, fp
    25ce:	e5b6      	b.n	213e <_vfiprintf_r+0x892>
    25d0:	980e      	ldr	r0, [sp, #56]	; 0x38
    25d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    25d4:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 26a4 <_vfiprintf_r+0xdf8>
    25d8:	3001      	adds	r0, #1
    25da:	f7ff bad2 	b.w	1b82 <_vfiprintf_r+0x2d6>
    25de:	461e      	mov	r6, r3
    25e0:	f04f 0900 	mov.w	r9, #0
    25e4:	e67a      	b.n	22dc <_vfiprintf_r+0xa30>
    25e6:	2b06      	cmp	r3, #6
    25e8:	bf28      	it	cs
    25ea:	2306      	movcs	r3, #6
    25ec:	9303      	str	r3, [sp, #12]
    25ee:	9404      	str	r4, [sp, #16]
    25f0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
    25f4:	4f2a      	ldr	r7, [pc, #168]	; (26a0 <_vfiprintf_r+0xdf4>)
    25f6:	e50c      	b.n	2012 <_vfiprintf_r+0x766>
    25f8:	9204      	str	r2, [sp, #16]
    25fa:	e56a      	b.n	20d2 <_vfiprintf_r+0x826>
    25fc:	980e      	ldr	r0, [sp, #56]	; 0x38
    25fe:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 26a4 <_vfiprintf_r+0xdf8>
    2602:	3001      	adds	r0, #1
    2604:	f7ff bb73 	b.w	1cee <_vfiprintf_r+0x442>
    2608:	46f4      	mov	ip, lr
    260a:	f7ff bb1a 	b.w	1c42 <_vfiprintf_r+0x396>
    260e:	9b01      	ldr	r3, [sp, #4]
    2610:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
    2614:	9303      	str	r3, [sp, #12]
    2616:	9404      	str	r4, [sp, #16]
    2618:	9001      	str	r0, [sp, #4]
    261a:	f7ff ba67 	b.w	1aec <_vfiprintf_r+0x240>
    261e:	2200      	movs	r2, #0
    2620:	9201      	str	r2, [sp, #4]
    2622:	f7ff b9ac 	b.w	197e <_vfiprintf_r+0xd2>
    2626:	9204      	str	r2, [sp, #16]
    2628:	4699      	mov	r9, r3
    262a:	e6b2      	b.n	2392 <_vfiprintf_r+0xae6>
    262c:	9a04      	ldr	r2, [sp, #16]
    262e:	6813      	ldr	r3, [r2, #0]
    2630:	9301      	str	r3, [sp, #4]
    2632:	3204      	adds	r2, #4
    2634:	2b00      	cmp	r3, #0
    2636:	9204      	str	r2, [sp, #16]
    2638:	f898 3001 	ldrb.w	r3, [r8, #1]
    263c:	46a8      	mov	r8, r5
    263e:	f6bf a99c 	bge.w	197a <_vfiprintf_r+0xce>
    2642:	f04f 32ff 	mov.w	r2, #4294967295
    2646:	9201      	str	r2, [sp, #4]
    2648:	f7ff b997 	b.w	197a <_vfiprintf_r+0xce>
    264c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    2650:	e48e      	b.n	1f70 <_vfiprintf_r+0x6c4>
    2652:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    2656:	e4f0      	b.n	203a <_vfiprintf_r+0x78e>
    2658:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    265c:	e4ab      	b.n	1fb6 <_vfiprintf_r+0x70a>
    265e:	4699      	mov	r9, r3
    2660:	07f3      	lsls	r3, r6, #31
    2662:	d505      	bpl.n	2670 <_vfiprintf_r+0xdc4>
    2664:	af2a      	add	r7, sp, #168	; 0xa8
    2666:	2330      	movs	r3, #48	; 0x30
    2668:	f807 3d41 	strb.w	r3, [r7, #-65]!
    266c:	f7ff bb97 	b.w	1d9e <_vfiprintf_r+0x4f2>
    2670:	9b01      	ldr	r3, [sp, #4]
    2672:	9303      	str	r3, [sp, #12]
    2674:	465f      	mov	r7, fp
    2676:	f7ff ba39 	b.w	1aec <_vfiprintf_r+0x240>
    267a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    267e:	e443      	b.n	1f08 <_vfiprintf_r+0x65c>
    2680:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    2684:	f7ff bb9a 	b.w	1dbc <_vfiprintf_r+0x510>
    2688:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    268c:	f7ff bb4d 	b.w	1d2a <_vfiprintf_r+0x47e>
    2690:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    2694:	e50f      	b.n	20b6 <_vfiprintf_r+0x80a>
    2696:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    269a:	e4f3      	b.n	2084 <_vfiprintf_r+0x7d8>
    269c:	00004694 	.word	0x00004694
    26a0:	000046a8 	.word	0x000046a8
    26a4:	000046b0 	.word	0x000046b0

000026a8 <__sbprintf>:
    26a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    26aa:	460c      	mov	r4, r1
    26ac:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
    26b0:	8989      	ldrh	r1, [r1, #12]
    26b2:	6e66      	ldr	r6, [r4, #100]	; 0x64
    26b4:	89e5      	ldrh	r5, [r4, #14]
    26b6:	9619      	str	r6, [sp, #100]	; 0x64
    26b8:	f021 0102 	bic.w	r1, r1, #2
    26bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
    26be:	f8ad 500e 	strh.w	r5, [sp, #14]
    26c2:	2500      	movs	r5, #0
    26c4:	69e7      	ldr	r7, [r4, #28]
    26c6:	f8ad 100c 	strh.w	r1, [sp, #12]
    26ca:	9609      	str	r6, [sp, #36]	; 0x24
    26cc:	9506      	str	r5, [sp, #24]
    26ce:	ae1a      	add	r6, sp, #104	; 0x68
    26d0:	f44f 6580 	mov.w	r5, #1024	; 0x400
    26d4:	4669      	mov	r1, sp
    26d6:	9600      	str	r6, [sp, #0]
    26d8:	9604      	str	r6, [sp, #16]
    26da:	9502      	str	r5, [sp, #8]
    26dc:	9505      	str	r5, [sp, #20]
    26de:	9707      	str	r7, [sp, #28]
    26e0:	4606      	mov	r6, r0
    26e2:	f7ff f8e3 	bl	18ac <_vfiprintf_r>
    26e6:	1e05      	subs	r5, r0, #0
    26e8:	db07      	blt.n	26fa <__sbprintf+0x52>
    26ea:	4630      	mov	r0, r6
    26ec:	4669      	mov	r1, sp
    26ee:	f000 f929 	bl	2944 <_fflush_r>
    26f2:	2800      	cmp	r0, #0
    26f4:	bf18      	it	ne
    26f6:	f04f 35ff 	movne.w	r5, #4294967295
    26fa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    26fe:	065b      	lsls	r3, r3, #25
    2700:	d503      	bpl.n	270a <__sbprintf+0x62>
    2702:	89a3      	ldrh	r3, [r4, #12]
    2704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2708:	81a3      	strh	r3, [r4, #12]
    270a:	4628      	mov	r0, r5
    270c:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
    2710:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2712:	bf00      	nop

00002714 <__swsetup_r>:
    2714:	b538      	push	{r3, r4, r5, lr}
    2716:	4b30      	ldr	r3, [pc, #192]	; (27d8 <__swsetup_r+0xc4>)
    2718:	681b      	ldr	r3, [r3, #0]
    271a:	4605      	mov	r5, r0
    271c:	460c      	mov	r4, r1
    271e:	b113      	cbz	r3, 2726 <__swsetup_r+0x12>
    2720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2722:	2a00      	cmp	r2, #0
    2724:	d038      	beq.n	2798 <__swsetup_r+0x84>
    2726:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    272a:	b293      	uxth	r3, r2
    272c:	0718      	lsls	r0, r3, #28
    272e:	d50c      	bpl.n	274a <__swsetup_r+0x36>
    2730:	6920      	ldr	r0, [r4, #16]
    2732:	b1a8      	cbz	r0, 2760 <__swsetup_r+0x4c>
    2734:	f013 0201 	ands.w	r2, r3, #1
    2738:	d01e      	beq.n	2778 <__swsetup_r+0x64>
    273a:	6963      	ldr	r3, [r4, #20]
    273c:	2200      	movs	r2, #0
    273e:	425b      	negs	r3, r3
    2740:	61a3      	str	r3, [r4, #24]
    2742:	60a2      	str	r2, [r4, #8]
    2744:	b1f0      	cbz	r0, 2784 <__swsetup_r+0x70>
    2746:	2000      	movs	r0, #0
    2748:	bd38      	pop	{r3, r4, r5, pc}
    274a:	06d9      	lsls	r1, r3, #27
    274c:	d53c      	bpl.n	27c8 <__swsetup_r+0xb4>
    274e:	0758      	lsls	r0, r3, #29
    2750:	d426      	bmi.n	27a0 <__swsetup_r+0x8c>
    2752:	6920      	ldr	r0, [r4, #16]
    2754:	f042 0308 	orr.w	r3, r2, #8
    2758:	81a3      	strh	r3, [r4, #12]
    275a:	b29b      	uxth	r3, r3
    275c:	2800      	cmp	r0, #0
    275e:	d1e9      	bne.n	2734 <__swsetup_r+0x20>
    2760:	f403 7220 	and.w	r2, r3, #640	; 0x280
    2764:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    2768:	d0e4      	beq.n	2734 <__swsetup_r+0x20>
    276a:	4628      	mov	r0, r5
    276c:	4621      	mov	r1, r4
    276e:	f000 fd15 	bl	319c <__smakebuf_r>
    2772:	89a3      	ldrh	r3, [r4, #12]
    2774:	6920      	ldr	r0, [r4, #16]
    2776:	e7dd      	b.n	2734 <__swsetup_r+0x20>
    2778:	0799      	lsls	r1, r3, #30
    277a:	bf58      	it	pl
    277c:	6962      	ldrpl	r2, [r4, #20]
    277e:	60a2      	str	r2, [r4, #8]
    2780:	2800      	cmp	r0, #0
    2782:	d1e0      	bne.n	2746 <__swsetup_r+0x32>
    2784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    2788:	061a      	lsls	r2, r3, #24
    278a:	d5dd      	bpl.n	2748 <__swsetup_r+0x34>
    278c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2790:	81a3      	strh	r3, [r4, #12]
    2792:	f04f 30ff 	mov.w	r0, #4294967295
    2796:	bd38      	pop	{r3, r4, r5, pc}
    2798:	4618      	mov	r0, r3
    279a:	f000 f967 	bl	2a6c <__sinit>
    279e:	e7c2      	b.n	2726 <__swsetup_r+0x12>
    27a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
    27a2:	b151      	cbz	r1, 27ba <__swsetup_r+0xa6>
    27a4:	f104 0340 	add.w	r3, r4, #64	; 0x40
    27a8:	4299      	cmp	r1, r3
    27aa:	d004      	beq.n	27b6 <__swsetup_r+0xa2>
    27ac:	4628      	mov	r0, r5
    27ae:	f000 fa27 	bl	2c00 <_free_r>
    27b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    27b6:	2300      	movs	r3, #0
    27b8:	6323      	str	r3, [r4, #48]	; 0x30
    27ba:	2300      	movs	r3, #0
    27bc:	6920      	ldr	r0, [r4, #16]
    27be:	6063      	str	r3, [r4, #4]
    27c0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
    27c4:	6020      	str	r0, [r4, #0]
    27c6:	e7c5      	b.n	2754 <__swsetup_r+0x40>
    27c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    27cc:	2309      	movs	r3, #9
    27ce:	602b      	str	r3, [r5, #0]
    27d0:	f04f 30ff 	mov.w	r0, #4294967295
    27d4:	81a2      	strh	r2, [r4, #12]
    27d6:	bd38      	pop	{r3, r4, r5, pc}
    27d8:	20000458 	.word	0x20000458

000027dc <register_fini>:
    27dc:	4b02      	ldr	r3, [pc, #8]	; (27e8 <register_fini+0xc>)
    27de:	b113      	cbz	r3, 27e6 <register_fini+0xa>
    27e0:	4802      	ldr	r0, [pc, #8]	; (27ec <register_fini+0x10>)
    27e2:	f000 b805 	b.w	27f0 <atexit>
    27e6:	4770      	bx	lr
    27e8:	00000000 	.word	0x00000000
    27ec:	00002a81 	.word	0x00002a81

000027f0 <atexit>:
    27f0:	2300      	movs	r3, #0
    27f2:	4601      	mov	r1, r0
    27f4:	461a      	mov	r2, r3
    27f6:	4618      	mov	r0, r3
    27f8:	f001 bc94 	b.w	4124 <__register_exitproc>

000027fc <__sflush_r>:
    27fc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    2800:	b29a      	uxth	r2, r3
    2802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2806:	460d      	mov	r5, r1
    2808:	0711      	lsls	r1, r2, #28
    280a:	4680      	mov	r8, r0
    280c:	d43c      	bmi.n	2888 <__sflush_r+0x8c>
    280e:	686a      	ldr	r2, [r5, #4]
    2810:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    2814:	2a00      	cmp	r2, #0
    2816:	81ab      	strh	r3, [r5, #12]
    2818:	dd73      	ble.n	2902 <__sflush_r+0x106>
    281a:	6aac      	ldr	r4, [r5, #40]	; 0x28
    281c:	2c00      	cmp	r4, #0
    281e:	d04b      	beq.n	28b8 <__sflush_r+0xbc>
    2820:	b29b      	uxth	r3, r3
    2822:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
    2826:	2100      	movs	r1, #0
    2828:	b292      	uxth	r2, r2
    282a:	f8d8 6000 	ldr.w	r6, [r8]
    282e:	f8c8 1000 	str.w	r1, [r8]
    2832:	2a00      	cmp	r2, #0
    2834:	d069      	beq.n	290a <__sflush_r+0x10e>
    2836:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    2838:	075f      	lsls	r7, r3, #29
    283a:	d505      	bpl.n	2848 <__sflush_r+0x4c>
    283c:	6869      	ldr	r1, [r5, #4]
    283e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    2840:	1a52      	subs	r2, r2, r1
    2842:	b10b      	cbz	r3, 2848 <__sflush_r+0x4c>
    2844:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    2846:	1ad2      	subs	r2, r2, r3
    2848:	2300      	movs	r3, #0
    284a:	69e9      	ldr	r1, [r5, #28]
    284c:	4640      	mov	r0, r8
    284e:	47a0      	blx	r4
    2850:	1c44      	adds	r4, r0, #1
    2852:	d03c      	beq.n	28ce <__sflush_r+0xd2>
    2854:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
    2858:	692a      	ldr	r2, [r5, #16]
    285a:	602a      	str	r2, [r5, #0]
    285c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2860:	2200      	movs	r2, #0
    2862:	81ab      	strh	r3, [r5, #12]
    2864:	04db      	lsls	r3, r3, #19
    2866:	606a      	str	r2, [r5, #4]
    2868:	d449      	bmi.n	28fe <__sflush_r+0x102>
    286a:	6b29      	ldr	r1, [r5, #48]	; 0x30
    286c:	f8c8 6000 	str.w	r6, [r8]
    2870:	b311      	cbz	r1, 28b8 <__sflush_r+0xbc>
    2872:	f105 0340 	add.w	r3, r5, #64	; 0x40
    2876:	4299      	cmp	r1, r3
    2878:	d002      	beq.n	2880 <__sflush_r+0x84>
    287a:	4640      	mov	r0, r8
    287c:	f000 f9c0 	bl	2c00 <_free_r>
    2880:	2000      	movs	r0, #0
    2882:	6328      	str	r0, [r5, #48]	; 0x30
    2884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2888:	692e      	ldr	r6, [r5, #16]
    288a:	b1ae      	cbz	r6, 28b8 <__sflush_r+0xbc>
    288c:	682c      	ldr	r4, [r5, #0]
    288e:	602e      	str	r6, [r5, #0]
    2890:	0790      	lsls	r0, r2, #30
    2892:	bf0c      	ite	eq
    2894:	696b      	ldreq	r3, [r5, #20]
    2896:	2300      	movne	r3, #0
    2898:	1ba4      	subs	r4, r4, r6
    289a:	60ab      	str	r3, [r5, #8]
    289c:	e00a      	b.n	28b4 <__sflush_r+0xb8>
    289e:	4623      	mov	r3, r4
    28a0:	4632      	mov	r2, r6
    28a2:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    28a4:	69e9      	ldr	r1, [r5, #28]
    28a6:	4640      	mov	r0, r8
    28a8:	47b8      	blx	r7
    28aa:	2800      	cmp	r0, #0
    28ac:	eba4 0400 	sub.w	r4, r4, r0
    28b0:	4406      	add	r6, r0
    28b2:	dd04      	ble.n	28be <__sflush_r+0xc2>
    28b4:	2c00      	cmp	r4, #0
    28b6:	dcf2      	bgt.n	289e <__sflush_r+0xa2>
    28b8:	2000      	movs	r0, #0
    28ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    28be:	89ab      	ldrh	r3, [r5, #12]
    28c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    28c4:	81ab      	strh	r3, [r5, #12]
    28c6:	f04f 30ff 	mov.w	r0, #4294967295
    28ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    28ce:	f8d8 2000 	ldr.w	r2, [r8]
    28d2:	2a1d      	cmp	r2, #29
    28d4:	d8f3      	bhi.n	28be <__sflush_r+0xc2>
    28d6:	4b1a      	ldr	r3, [pc, #104]	; (2940 <__sflush_r+0x144>)
    28d8:	40d3      	lsrs	r3, r2
    28da:	f003 0301 	and.w	r3, r3, #1
    28de:	f083 0401 	eor.w	r4, r3, #1
    28e2:	2b00      	cmp	r3, #0
    28e4:	d0eb      	beq.n	28be <__sflush_r+0xc2>
    28e6:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
    28ea:	6929      	ldr	r1, [r5, #16]
    28ec:	6029      	str	r1, [r5, #0]
    28ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    28f2:	04d9      	lsls	r1, r3, #19
    28f4:	606c      	str	r4, [r5, #4]
    28f6:	81ab      	strh	r3, [r5, #12]
    28f8:	d5b7      	bpl.n	286a <__sflush_r+0x6e>
    28fa:	2a00      	cmp	r2, #0
    28fc:	d1b5      	bne.n	286a <__sflush_r+0x6e>
    28fe:	6528      	str	r0, [r5, #80]	; 0x50
    2900:	e7b3      	b.n	286a <__sflush_r+0x6e>
    2902:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    2904:	2a00      	cmp	r2, #0
    2906:	dc88      	bgt.n	281a <__sflush_r+0x1e>
    2908:	e7d6      	b.n	28b8 <__sflush_r+0xbc>
    290a:	2301      	movs	r3, #1
    290c:	69e9      	ldr	r1, [r5, #28]
    290e:	4640      	mov	r0, r8
    2910:	47a0      	blx	r4
    2912:	1c43      	adds	r3, r0, #1
    2914:	4602      	mov	r2, r0
    2916:	d002      	beq.n	291e <__sflush_r+0x122>
    2918:	89ab      	ldrh	r3, [r5, #12]
    291a:	6aac      	ldr	r4, [r5, #40]	; 0x28
    291c:	e78c      	b.n	2838 <__sflush_r+0x3c>
    291e:	f8d8 3000 	ldr.w	r3, [r8]
    2922:	2b00      	cmp	r3, #0
    2924:	d0f8      	beq.n	2918 <__sflush_r+0x11c>
    2926:	2b1d      	cmp	r3, #29
    2928:	d001      	beq.n	292e <__sflush_r+0x132>
    292a:	2b16      	cmp	r3, #22
    292c:	d102      	bne.n	2934 <__sflush_r+0x138>
    292e:	f8c8 6000 	str.w	r6, [r8]
    2932:	e7c1      	b.n	28b8 <__sflush_r+0xbc>
    2934:	89ab      	ldrh	r3, [r5, #12]
    2936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    293a:	81ab      	strh	r3, [r5, #12]
    293c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2940:	20400001 	.word	0x20400001

00002944 <_fflush_r>:
    2944:	b510      	push	{r4, lr}
    2946:	4604      	mov	r4, r0
    2948:	b082      	sub	sp, #8
    294a:	b108      	cbz	r0, 2950 <_fflush_r+0xc>
    294c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    294e:	b153      	cbz	r3, 2966 <_fflush_r+0x22>
    2950:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
    2954:	b908      	cbnz	r0, 295a <_fflush_r+0x16>
    2956:	b002      	add	sp, #8
    2958:	bd10      	pop	{r4, pc}
    295a:	4620      	mov	r0, r4
    295c:	b002      	add	sp, #8
    295e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2962:	f7ff bf4b 	b.w	27fc <__sflush_r>
    2966:	9101      	str	r1, [sp, #4]
    2968:	f000 f880 	bl	2a6c <__sinit>
    296c:	9901      	ldr	r1, [sp, #4]
    296e:	e7ef      	b.n	2950 <_fflush_r+0xc>

00002970 <_cleanup_r>:
    2970:	4901      	ldr	r1, [pc, #4]	; (2978 <_cleanup_r+0x8>)
    2972:	f000 bbaf 	b.w	30d4 <_fwalk_reent>
    2976:	bf00      	nop
    2978:	000041ed 	.word	0x000041ed

0000297c <__sinit.part.1>:
    297c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2980:	4b35      	ldr	r3, [pc, #212]	; (2a58 <__sinit.part.1+0xdc>)
    2982:	6845      	ldr	r5, [r0, #4]
    2984:	63c3      	str	r3, [r0, #60]	; 0x3c
    2986:	2400      	movs	r4, #0
    2988:	4607      	mov	r7, r0
    298a:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
    298e:	2304      	movs	r3, #4
    2990:	2103      	movs	r1, #3
    2992:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
    2996:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
    299a:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
    299e:	b083      	sub	sp, #12
    29a0:	602c      	str	r4, [r5, #0]
    29a2:	606c      	str	r4, [r5, #4]
    29a4:	60ac      	str	r4, [r5, #8]
    29a6:	666c      	str	r4, [r5, #100]	; 0x64
    29a8:	81ec      	strh	r4, [r5, #14]
    29aa:	612c      	str	r4, [r5, #16]
    29ac:	616c      	str	r4, [r5, #20]
    29ae:	61ac      	str	r4, [r5, #24]
    29b0:	81ab      	strh	r3, [r5, #12]
    29b2:	4621      	mov	r1, r4
    29b4:	f105 005c 	add.w	r0, r5, #92	; 0x5c
    29b8:	2208      	movs	r2, #8
    29ba:	f7fe fe3d 	bl	1638 <memset>
    29be:	68be      	ldr	r6, [r7, #8]
    29c0:	f8df b098 	ldr.w	fp, [pc, #152]	; 2a5c <__sinit.part.1+0xe0>
    29c4:	f8df a098 	ldr.w	sl, [pc, #152]	; 2a60 <__sinit.part.1+0xe4>
    29c8:	f8df 9098 	ldr.w	r9, [pc, #152]	; 2a64 <__sinit.part.1+0xe8>
    29cc:	f8df 8098 	ldr.w	r8, [pc, #152]	; 2a68 <__sinit.part.1+0xec>
    29d0:	f8c5 b020 	str.w	fp, [r5, #32]
    29d4:	2301      	movs	r3, #1
    29d6:	2209      	movs	r2, #9
    29d8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
    29dc:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
    29e0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
    29e4:	61ed      	str	r5, [r5, #28]
    29e6:	4621      	mov	r1, r4
    29e8:	81f3      	strh	r3, [r6, #14]
    29ea:	81b2      	strh	r2, [r6, #12]
    29ec:	f106 005c 	add.w	r0, r6, #92	; 0x5c
    29f0:	6034      	str	r4, [r6, #0]
    29f2:	6074      	str	r4, [r6, #4]
    29f4:	60b4      	str	r4, [r6, #8]
    29f6:	6674      	str	r4, [r6, #100]	; 0x64
    29f8:	6134      	str	r4, [r6, #16]
    29fa:	6174      	str	r4, [r6, #20]
    29fc:	61b4      	str	r4, [r6, #24]
    29fe:	2208      	movs	r2, #8
    2a00:	9301      	str	r3, [sp, #4]
    2a02:	f7fe fe19 	bl	1638 <memset>
    2a06:	68fd      	ldr	r5, [r7, #12]
    2a08:	61f6      	str	r6, [r6, #28]
    2a0a:	2012      	movs	r0, #18
    2a0c:	2202      	movs	r2, #2
    2a0e:	f8c6 b020 	str.w	fp, [r6, #32]
    2a12:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
    2a16:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
    2a1a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
    2a1e:	4621      	mov	r1, r4
    2a20:	81a8      	strh	r0, [r5, #12]
    2a22:	81ea      	strh	r2, [r5, #14]
    2a24:	602c      	str	r4, [r5, #0]
    2a26:	606c      	str	r4, [r5, #4]
    2a28:	60ac      	str	r4, [r5, #8]
    2a2a:	666c      	str	r4, [r5, #100]	; 0x64
    2a2c:	612c      	str	r4, [r5, #16]
    2a2e:	616c      	str	r4, [r5, #20]
    2a30:	61ac      	str	r4, [r5, #24]
    2a32:	f105 005c 	add.w	r0, r5, #92	; 0x5c
    2a36:	2208      	movs	r2, #8
    2a38:	f7fe fdfe 	bl	1638 <memset>
    2a3c:	9b01      	ldr	r3, [sp, #4]
    2a3e:	61ed      	str	r5, [r5, #28]
    2a40:	f8c5 b020 	str.w	fp, [r5, #32]
    2a44:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
    2a48:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
    2a4c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
    2a50:	63bb      	str	r3, [r7, #56]	; 0x38
    2a52:	b003      	add	sp, #12
    2a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a58:	00002971 	.word	0x00002971
    2a5c:	00003e59 	.word	0x00003e59
    2a60:	00003e7d 	.word	0x00003e7d
    2a64:	00003eb9 	.word	0x00003eb9
    2a68:	00003ed9 	.word	0x00003ed9

00002a6c <__sinit>:
    2a6c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    2a6e:	b103      	cbz	r3, 2a72 <__sinit+0x6>
    2a70:	4770      	bx	lr
    2a72:	f7ff bf83 	b.w	297c <__sinit.part.1>
    2a76:	bf00      	nop

00002a78 <__sfp_lock_acquire>:
    2a78:	4770      	bx	lr
    2a7a:	bf00      	nop

00002a7c <__sfp_lock_release>:
    2a7c:	4770      	bx	lr
    2a7e:	bf00      	nop

00002a80 <__libc_fini_array>:
    2a80:	b538      	push	{r3, r4, r5, lr}
    2a82:	4d07      	ldr	r5, [pc, #28]	; (2aa0 <__libc_fini_array+0x20>)
    2a84:	4c07      	ldr	r4, [pc, #28]	; (2aa4 <__libc_fini_array+0x24>)
    2a86:	1b2c      	subs	r4, r5, r4
    2a88:	10a4      	asrs	r4, r4, #2
    2a8a:	d005      	beq.n	2a98 <__libc_fini_array+0x18>
    2a8c:	3c01      	subs	r4, #1
    2a8e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    2a92:	4798      	blx	r3
    2a94:	2c00      	cmp	r4, #0
    2a96:	d1f9      	bne.n	2a8c <__libc_fini_array+0xc>
    2a98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2a9c:	f001 be1a 	b.w	46d4 <_fini>
    2aa0:	000046e4 	.word	0x000046e4
    2aa4:	000046e0 	.word	0x000046e0

00002aa8 <__fputwc>:
    2aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2aac:	b082      	sub	sp, #8
    2aae:	4680      	mov	r8, r0
    2ab0:	4689      	mov	r9, r1
    2ab2:	4614      	mov	r4, r2
    2ab4:	f000 fb3c 	bl	3130 <__locale_mb_cur_max>
    2ab8:	2801      	cmp	r0, #1
    2aba:	d033      	beq.n	2b24 <__fputwc+0x7c>
    2abc:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    2ac0:	464a      	mov	r2, r9
    2ac2:	a901      	add	r1, sp, #4
    2ac4:	4640      	mov	r0, r8
    2ac6:	f001 fadf 	bl	4088 <_wcrtomb_r>
    2aca:	f1b0 3fff 	cmp.w	r0, #4294967295
    2ace:	4682      	mov	sl, r0
    2ad0:	d021      	beq.n	2b16 <__fputwc+0x6e>
    2ad2:	b388      	cbz	r0, 2b38 <__fputwc+0x90>
    2ad4:	f89d 6004 	ldrb.w	r6, [sp, #4]
    2ad8:	2500      	movs	r5, #0
    2ada:	e008      	b.n	2aee <__fputwc+0x46>
    2adc:	6823      	ldr	r3, [r4, #0]
    2ade:	1c5a      	adds	r2, r3, #1
    2ae0:	6022      	str	r2, [r4, #0]
    2ae2:	701e      	strb	r6, [r3, #0]
    2ae4:	3501      	adds	r5, #1
    2ae6:	4555      	cmp	r5, sl
    2ae8:	d226      	bcs.n	2b38 <__fputwc+0x90>
    2aea:	ab01      	add	r3, sp, #4
    2aec:	5d5e      	ldrb	r6, [r3, r5]
    2aee:	68a3      	ldr	r3, [r4, #8]
    2af0:	3b01      	subs	r3, #1
    2af2:	2b00      	cmp	r3, #0
    2af4:	60a3      	str	r3, [r4, #8]
    2af6:	daf1      	bge.n	2adc <__fputwc+0x34>
    2af8:	69a7      	ldr	r7, [r4, #24]
    2afa:	42bb      	cmp	r3, r7
    2afc:	4631      	mov	r1, r6
    2afe:	4622      	mov	r2, r4
    2b00:	4640      	mov	r0, r8
    2b02:	db01      	blt.n	2b08 <__fputwc+0x60>
    2b04:	2e0a      	cmp	r6, #10
    2b06:	d1e9      	bne.n	2adc <__fputwc+0x34>
    2b08:	f001 fa68 	bl	3fdc <__swbuf_r>
    2b0c:	1c43      	adds	r3, r0, #1
    2b0e:	d1e9      	bne.n	2ae4 <__fputwc+0x3c>
    2b10:	b002      	add	sp, #8
    2b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2b16:	89a3      	ldrh	r3, [r4, #12]
    2b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2b1c:	81a3      	strh	r3, [r4, #12]
    2b1e:	b002      	add	sp, #8
    2b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2b24:	f109 33ff 	add.w	r3, r9, #4294967295
    2b28:	2bfe      	cmp	r3, #254	; 0xfe
    2b2a:	d8c7      	bhi.n	2abc <__fputwc+0x14>
    2b2c:	fa5f f689 	uxtb.w	r6, r9
    2b30:	4682      	mov	sl, r0
    2b32:	f88d 6004 	strb.w	r6, [sp, #4]
    2b36:	e7cf      	b.n	2ad8 <__fputwc+0x30>
    2b38:	4648      	mov	r0, r9
    2b3a:	b002      	add	sp, #8
    2b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00002b40 <_fputwc_r>:
    2b40:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    2b44:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    2b48:	d10a      	bne.n	2b60 <_fputwc_r+0x20>
    2b4a:	b410      	push	{r4}
    2b4c:	6e54      	ldr	r4, [r2, #100]	; 0x64
    2b4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    2b52:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
    2b56:	6654      	str	r4, [r2, #100]	; 0x64
    2b58:	8193      	strh	r3, [r2, #12]
    2b5a:	bc10      	pop	{r4}
    2b5c:	f7ff bfa4 	b.w	2aa8 <__fputwc>
    2b60:	f7ff bfa2 	b.w	2aa8 <__fputwc>

00002b64 <_malloc_trim_r>:
    2b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b66:	4f23      	ldr	r7, [pc, #140]	; (2bf4 <_malloc_trim_r+0x90>)
    2b68:	460c      	mov	r4, r1
    2b6a:	4606      	mov	r6, r0
    2b6c:	f000 ff6e 	bl	3a4c <__malloc_lock>
    2b70:	68bb      	ldr	r3, [r7, #8]
    2b72:	685d      	ldr	r5, [r3, #4]
    2b74:	f025 0503 	bic.w	r5, r5, #3
    2b78:	1b29      	subs	r1, r5, r4
    2b7a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    2b7e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    2b82:	f021 010f 	bic.w	r1, r1, #15
    2b86:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    2b8a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    2b8e:	db07      	blt.n	2ba0 <_malloc_trim_r+0x3c>
    2b90:	2100      	movs	r1, #0
    2b92:	4630      	mov	r0, r6
    2b94:	f001 f94e 	bl	3e34 <_sbrk_r>
    2b98:	68bb      	ldr	r3, [r7, #8]
    2b9a:	442b      	add	r3, r5
    2b9c:	4298      	cmp	r0, r3
    2b9e:	d004      	beq.n	2baa <_malloc_trim_r+0x46>
    2ba0:	4630      	mov	r0, r6
    2ba2:	f000 ff55 	bl	3a50 <__malloc_unlock>
    2ba6:	2000      	movs	r0, #0
    2ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2baa:	4261      	negs	r1, r4
    2bac:	4630      	mov	r0, r6
    2bae:	f001 f941 	bl	3e34 <_sbrk_r>
    2bb2:	3001      	adds	r0, #1
    2bb4:	d00d      	beq.n	2bd2 <_malloc_trim_r+0x6e>
    2bb6:	4b10      	ldr	r3, [pc, #64]	; (2bf8 <_malloc_trim_r+0x94>)
    2bb8:	68ba      	ldr	r2, [r7, #8]
    2bba:	6819      	ldr	r1, [r3, #0]
    2bbc:	1b2d      	subs	r5, r5, r4
    2bbe:	f045 0501 	orr.w	r5, r5, #1
    2bc2:	4630      	mov	r0, r6
    2bc4:	1b09      	subs	r1, r1, r4
    2bc6:	6055      	str	r5, [r2, #4]
    2bc8:	6019      	str	r1, [r3, #0]
    2bca:	f000 ff41 	bl	3a50 <__malloc_unlock>
    2bce:	2001      	movs	r0, #1
    2bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2bd2:	2100      	movs	r1, #0
    2bd4:	4630      	mov	r0, r6
    2bd6:	f001 f92d 	bl	3e34 <_sbrk_r>
    2bda:	68ba      	ldr	r2, [r7, #8]
    2bdc:	1a83      	subs	r3, r0, r2
    2bde:	2b0f      	cmp	r3, #15
    2be0:	ddde      	ble.n	2ba0 <_malloc_trim_r+0x3c>
    2be2:	4c06      	ldr	r4, [pc, #24]	; (2bfc <_malloc_trim_r+0x98>)
    2be4:	4904      	ldr	r1, [pc, #16]	; (2bf8 <_malloc_trim_r+0x94>)
    2be6:	6824      	ldr	r4, [r4, #0]
    2be8:	f043 0301 	orr.w	r3, r3, #1
    2bec:	1b00      	subs	r0, r0, r4
    2bee:	6053      	str	r3, [r2, #4]
    2bf0:	6008      	str	r0, [r1, #0]
    2bf2:	e7d5      	b.n	2ba0 <_malloc_trim_r+0x3c>
    2bf4:	20000480 	.word	0x20000480
    2bf8:	200008f8 	.word	0x200008f8
    2bfc:	2000088c 	.word	0x2000088c

00002c00 <_free_r>:
    2c00:	2900      	cmp	r1, #0
    2c02:	d045      	beq.n	2c90 <_free_r+0x90>
    2c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c08:	460d      	mov	r5, r1
    2c0a:	4680      	mov	r8, r0
    2c0c:	f000 ff1e 	bl	3a4c <__malloc_lock>
    2c10:	f855 7c04 	ldr.w	r7, [r5, #-4]
    2c14:	496a      	ldr	r1, [pc, #424]	; (2dc0 <_free_r+0x1c0>)
    2c16:	f027 0301 	bic.w	r3, r7, #1
    2c1a:	f1a5 0408 	sub.w	r4, r5, #8
    2c1e:	18e2      	adds	r2, r4, r3
    2c20:	688e      	ldr	r6, [r1, #8]
    2c22:	6850      	ldr	r0, [r2, #4]
    2c24:	42b2      	cmp	r2, r6
    2c26:	f020 0003 	bic.w	r0, r0, #3
    2c2a:	d062      	beq.n	2cf2 <_free_r+0xf2>
    2c2c:	07fe      	lsls	r6, r7, #31
    2c2e:	6050      	str	r0, [r2, #4]
    2c30:	d40b      	bmi.n	2c4a <_free_r+0x4a>
    2c32:	f855 7c08 	ldr.w	r7, [r5, #-8]
    2c36:	1be4      	subs	r4, r4, r7
    2c38:	f101 0e08 	add.w	lr, r1, #8
    2c3c:	68a5      	ldr	r5, [r4, #8]
    2c3e:	4575      	cmp	r5, lr
    2c40:	443b      	add	r3, r7
    2c42:	d06f      	beq.n	2d24 <_free_r+0x124>
    2c44:	68e7      	ldr	r7, [r4, #12]
    2c46:	60ef      	str	r7, [r5, #12]
    2c48:	60bd      	str	r5, [r7, #8]
    2c4a:	1815      	adds	r5, r2, r0
    2c4c:	686d      	ldr	r5, [r5, #4]
    2c4e:	07ed      	lsls	r5, r5, #31
    2c50:	d542      	bpl.n	2cd8 <_free_r+0xd8>
    2c52:	f043 0201 	orr.w	r2, r3, #1
    2c56:	6062      	str	r2, [r4, #4]
    2c58:	50e3      	str	r3, [r4, r3]
    2c5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2c5e:	d218      	bcs.n	2c92 <_free_r+0x92>
    2c60:	08db      	lsrs	r3, r3, #3
    2c62:	1c5a      	adds	r2, r3, #1
    2c64:	684d      	ldr	r5, [r1, #4]
    2c66:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    2c6a:	60a7      	str	r7, [r4, #8]
    2c6c:	2001      	movs	r0, #1
    2c6e:	109b      	asrs	r3, r3, #2
    2c70:	fa00 f303 	lsl.w	r3, r0, r3
    2c74:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    2c78:	431d      	orrs	r5, r3
    2c7a:	3808      	subs	r0, #8
    2c7c:	60e0      	str	r0, [r4, #12]
    2c7e:	604d      	str	r5, [r1, #4]
    2c80:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    2c84:	60fc      	str	r4, [r7, #12]
    2c86:	4640      	mov	r0, r8
    2c88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2c8c:	f000 bee0 	b.w	3a50 <__malloc_unlock>
    2c90:	4770      	bx	lr
    2c92:	0a5a      	lsrs	r2, r3, #9
    2c94:	2a04      	cmp	r2, #4
    2c96:	d853      	bhi.n	2d40 <_free_r+0x140>
    2c98:	099a      	lsrs	r2, r3, #6
    2c9a:	f102 0739 	add.w	r7, r2, #57	; 0x39
    2c9e:	007f      	lsls	r7, r7, #1
    2ca0:	f102 0538 	add.w	r5, r2, #56	; 0x38
    2ca4:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    2ca8:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    2cac:	4944      	ldr	r1, [pc, #272]	; (2dc0 <_free_r+0x1c0>)
    2cae:	3808      	subs	r0, #8
    2cb0:	4290      	cmp	r0, r2
    2cb2:	d04d      	beq.n	2d50 <_free_r+0x150>
    2cb4:	6851      	ldr	r1, [r2, #4]
    2cb6:	f021 0103 	bic.w	r1, r1, #3
    2cba:	428b      	cmp	r3, r1
    2cbc:	d202      	bcs.n	2cc4 <_free_r+0xc4>
    2cbe:	6892      	ldr	r2, [r2, #8]
    2cc0:	4290      	cmp	r0, r2
    2cc2:	d1f7      	bne.n	2cb4 <_free_r+0xb4>
    2cc4:	68d0      	ldr	r0, [r2, #12]
    2cc6:	60e0      	str	r0, [r4, #12]
    2cc8:	60a2      	str	r2, [r4, #8]
    2cca:	6084      	str	r4, [r0, #8]
    2ccc:	60d4      	str	r4, [r2, #12]
    2cce:	4640      	mov	r0, r8
    2cd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2cd4:	f000 bebc 	b.w	3a50 <__malloc_unlock>
    2cd8:	6895      	ldr	r5, [r2, #8]
    2cda:	4f3a      	ldr	r7, [pc, #232]	; (2dc4 <_free_r+0x1c4>)
    2cdc:	42bd      	cmp	r5, r7
    2cde:	4403      	add	r3, r0
    2ce0:	d03f      	beq.n	2d62 <_free_r+0x162>
    2ce2:	68d0      	ldr	r0, [r2, #12]
    2ce4:	60e8      	str	r0, [r5, #12]
    2ce6:	f043 0201 	orr.w	r2, r3, #1
    2cea:	6085      	str	r5, [r0, #8]
    2cec:	6062      	str	r2, [r4, #4]
    2cee:	50e3      	str	r3, [r4, r3]
    2cf0:	e7b3      	b.n	2c5a <_free_r+0x5a>
    2cf2:	07ff      	lsls	r7, r7, #31
    2cf4:	4403      	add	r3, r0
    2cf6:	d407      	bmi.n	2d08 <_free_r+0x108>
    2cf8:	f855 2c08 	ldr.w	r2, [r5, #-8]
    2cfc:	1aa4      	subs	r4, r4, r2
    2cfe:	4413      	add	r3, r2
    2d00:	68a0      	ldr	r0, [r4, #8]
    2d02:	68e2      	ldr	r2, [r4, #12]
    2d04:	60c2      	str	r2, [r0, #12]
    2d06:	6090      	str	r0, [r2, #8]
    2d08:	4a2f      	ldr	r2, [pc, #188]	; (2dc8 <_free_r+0x1c8>)
    2d0a:	6812      	ldr	r2, [r2, #0]
    2d0c:	f043 0001 	orr.w	r0, r3, #1
    2d10:	4293      	cmp	r3, r2
    2d12:	6060      	str	r0, [r4, #4]
    2d14:	608c      	str	r4, [r1, #8]
    2d16:	d3b6      	bcc.n	2c86 <_free_r+0x86>
    2d18:	4b2c      	ldr	r3, [pc, #176]	; (2dcc <_free_r+0x1cc>)
    2d1a:	4640      	mov	r0, r8
    2d1c:	6819      	ldr	r1, [r3, #0]
    2d1e:	f7ff ff21 	bl	2b64 <_malloc_trim_r>
    2d22:	e7b0      	b.n	2c86 <_free_r+0x86>
    2d24:	1811      	adds	r1, r2, r0
    2d26:	6849      	ldr	r1, [r1, #4]
    2d28:	07c9      	lsls	r1, r1, #31
    2d2a:	d444      	bmi.n	2db6 <_free_r+0x1b6>
    2d2c:	6891      	ldr	r1, [r2, #8]
    2d2e:	68d2      	ldr	r2, [r2, #12]
    2d30:	60ca      	str	r2, [r1, #12]
    2d32:	4403      	add	r3, r0
    2d34:	f043 0001 	orr.w	r0, r3, #1
    2d38:	6091      	str	r1, [r2, #8]
    2d3a:	6060      	str	r0, [r4, #4]
    2d3c:	50e3      	str	r3, [r4, r3]
    2d3e:	e7a2      	b.n	2c86 <_free_r+0x86>
    2d40:	2a14      	cmp	r2, #20
    2d42:	d817      	bhi.n	2d74 <_free_r+0x174>
    2d44:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    2d48:	007f      	lsls	r7, r7, #1
    2d4a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    2d4e:	e7a9      	b.n	2ca4 <_free_r+0xa4>
    2d50:	10aa      	asrs	r2, r5, #2
    2d52:	684b      	ldr	r3, [r1, #4]
    2d54:	2501      	movs	r5, #1
    2d56:	fa05 f202 	lsl.w	r2, r5, r2
    2d5a:	4313      	orrs	r3, r2
    2d5c:	604b      	str	r3, [r1, #4]
    2d5e:	4602      	mov	r2, r0
    2d60:	e7b1      	b.n	2cc6 <_free_r+0xc6>
    2d62:	f043 0201 	orr.w	r2, r3, #1
    2d66:	614c      	str	r4, [r1, #20]
    2d68:	610c      	str	r4, [r1, #16]
    2d6a:	60e5      	str	r5, [r4, #12]
    2d6c:	60a5      	str	r5, [r4, #8]
    2d6e:	6062      	str	r2, [r4, #4]
    2d70:	50e3      	str	r3, [r4, r3]
    2d72:	e788      	b.n	2c86 <_free_r+0x86>
    2d74:	2a54      	cmp	r2, #84	; 0x54
    2d76:	d806      	bhi.n	2d86 <_free_r+0x186>
    2d78:	0b1a      	lsrs	r2, r3, #12
    2d7a:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    2d7e:	007f      	lsls	r7, r7, #1
    2d80:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    2d84:	e78e      	b.n	2ca4 <_free_r+0xa4>
    2d86:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    2d8a:	d806      	bhi.n	2d9a <_free_r+0x19a>
    2d8c:	0bda      	lsrs	r2, r3, #15
    2d8e:	f102 0778 	add.w	r7, r2, #120	; 0x78
    2d92:	007f      	lsls	r7, r7, #1
    2d94:	f102 0577 	add.w	r5, r2, #119	; 0x77
    2d98:	e784      	b.n	2ca4 <_free_r+0xa4>
    2d9a:	f240 5054 	movw	r0, #1364	; 0x554
    2d9e:	4282      	cmp	r2, r0
    2da0:	d806      	bhi.n	2db0 <_free_r+0x1b0>
    2da2:	0c9a      	lsrs	r2, r3, #18
    2da4:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    2da8:	007f      	lsls	r7, r7, #1
    2daa:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    2dae:	e779      	b.n	2ca4 <_free_r+0xa4>
    2db0:	27fe      	movs	r7, #254	; 0xfe
    2db2:	257e      	movs	r5, #126	; 0x7e
    2db4:	e776      	b.n	2ca4 <_free_r+0xa4>
    2db6:	f043 0201 	orr.w	r2, r3, #1
    2dba:	6062      	str	r2, [r4, #4]
    2dbc:	50e3      	str	r3, [r4, r3]
    2dbe:	e762      	b.n	2c86 <_free_r+0x86>
    2dc0:	20000480 	.word	0x20000480
    2dc4:	20000488 	.word	0x20000488
    2dc8:	20000888 	.word	0x20000888
    2dcc:	200008f4 	.word	0x200008f4

00002dd0 <__sfvwrite_r>:
    2dd0:	6893      	ldr	r3, [r2, #8]
    2dd2:	2b00      	cmp	r3, #0
    2dd4:	d076      	beq.n	2ec4 <__sfvwrite_r+0xf4>
    2dd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2dda:	898b      	ldrh	r3, [r1, #12]
    2ddc:	b085      	sub	sp, #20
    2dde:	460c      	mov	r4, r1
    2de0:	0719      	lsls	r1, r3, #28
    2de2:	9001      	str	r0, [sp, #4]
    2de4:	4616      	mov	r6, r2
    2de6:	d529      	bpl.n	2e3c <__sfvwrite_r+0x6c>
    2de8:	6922      	ldr	r2, [r4, #16]
    2dea:	b33a      	cbz	r2, 2e3c <__sfvwrite_r+0x6c>
    2dec:	f003 0802 	and.w	r8, r3, #2
    2df0:	fa1f f088 	uxth.w	r0, r8
    2df4:	6835      	ldr	r5, [r6, #0]
    2df6:	2800      	cmp	r0, #0
    2df8:	d02f      	beq.n	2e5a <__sfvwrite_r+0x8a>
    2dfa:	f04f 0900 	mov.w	r9, #0
    2dfe:	4fb4      	ldr	r7, [pc, #720]	; (30d0 <__sfvwrite_r+0x300>)
    2e00:	46c8      	mov	r8, r9
    2e02:	46b2      	mov	sl, r6
    2e04:	45b8      	cmp	r8, r7
    2e06:	4643      	mov	r3, r8
    2e08:	464a      	mov	r2, r9
    2e0a:	bf28      	it	cs
    2e0c:	463b      	movcs	r3, r7
    2e0e:	9801      	ldr	r0, [sp, #4]
    2e10:	f1b8 0f00 	cmp.w	r8, #0
    2e14:	d050      	beq.n	2eb8 <__sfvwrite_r+0xe8>
    2e16:	69e1      	ldr	r1, [r4, #28]
    2e18:	6a66      	ldr	r6, [r4, #36]	; 0x24
    2e1a:	47b0      	blx	r6
    2e1c:	2800      	cmp	r0, #0
    2e1e:	dd71      	ble.n	2f04 <__sfvwrite_r+0x134>
    2e20:	f8da 3008 	ldr.w	r3, [sl, #8]
    2e24:	1a1b      	subs	r3, r3, r0
    2e26:	4481      	add	r9, r0
    2e28:	ebc0 0808 	rsb	r8, r0, r8
    2e2c:	f8ca 3008 	str.w	r3, [sl, #8]
    2e30:	2b00      	cmp	r3, #0
    2e32:	d1e7      	bne.n	2e04 <__sfvwrite_r+0x34>
    2e34:	2000      	movs	r0, #0
    2e36:	b005      	add	sp, #20
    2e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e3c:	4621      	mov	r1, r4
    2e3e:	9801      	ldr	r0, [sp, #4]
    2e40:	f7ff fc68 	bl	2714 <__swsetup_r>
    2e44:	2800      	cmp	r0, #0
    2e46:	f040 813a 	bne.w	30be <__sfvwrite_r+0x2ee>
    2e4a:	89a3      	ldrh	r3, [r4, #12]
    2e4c:	6835      	ldr	r5, [r6, #0]
    2e4e:	f003 0802 	and.w	r8, r3, #2
    2e52:	fa1f f088 	uxth.w	r0, r8
    2e56:	2800      	cmp	r0, #0
    2e58:	d1cf      	bne.n	2dfa <__sfvwrite_r+0x2a>
    2e5a:	f013 0901 	ands.w	r9, r3, #1
    2e5e:	d15b      	bne.n	2f18 <__sfvwrite_r+0x148>
    2e60:	464f      	mov	r7, r9
    2e62:	9602      	str	r6, [sp, #8]
    2e64:	b31f      	cbz	r7, 2eae <__sfvwrite_r+0xde>
    2e66:	059a      	lsls	r2, r3, #22
    2e68:	f8d4 8008 	ldr.w	r8, [r4, #8]
    2e6c:	d52c      	bpl.n	2ec8 <__sfvwrite_r+0xf8>
    2e6e:	4547      	cmp	r7, r8
    2e70:	46c2      	mov	sl, r8
    2e72:	f0c0 80a4 	bcc.w	2fbe <__sfvwrite_r+0x1ee>
    2e76:	f413 6f90 	tst.w	r3, #1152	; 0x480
    2e7a:	f040 80b1 	bne.w	2fe0 <__sfvwrite_r+0x210>
    2e7e:	6820      	ldr	r0, [r4, #0]
    2e80:	4652      	mov	r2, sl
    2e82:	4649      	mov	r1, r9
    2e84:	f000 fd7e 	bl	3984 <memmove>
    2e88:	68a0      	ldr	r0, [r4, #8]
    2e8a:	6823      	ldr	r3, [r4, #0]
    2e8c:	ebc8 0000 	rsb	r0, r8, r0
    2e90:	4453      	add	r3, sl
    2e92:	60a0      	str	r0, [r4, #8]
    2e94:	6023      	str	r3, [r4, #0]
    2e96:	4638      	mov	r0, r7
    2e98:	9a02      	ldr	r2, [sp, #8]
    2e9a:	6893      	ldr	r3, [r2, #8]
    2e9c:	1a1b      	subs	r3, r3, r0
    2e9e:	4481      	add	r9, r0
    2ea0:	1a3f      	subs	r7, r7, r0
    2ea2:	6093      	str	r3, [r2, #8]
    2ea4:	2b00      	cmp	r3, #0
    2ea6:	d0c5      	beq.n	2e34 <__sfvwrite_r+0x64>
    2ea8:	89a3      	ldrh	r3, [r4, #12]
    2eaa:	2f00      	cmp	r7, #0
    2eac:	d1db      	bne.n	2e66 <__sfvwrite_r+0x96>
    2eae:	f8d5 9000 	ldr.w	r9, [r5]
    2eb2:	686f      	ldr	r7, [r5, #4]
    2eb4:	3508      	adds	r5, #8
    2eb6:	e7d5      	b.n	2e64 <__sfvwrite_r+0x94>
    2eb8:	f8d5 9000 	ldr.w	r9, [r5]
    2ebc:	f8d5 8004 	ldr.w	r8, [r5, #4]
    2ec0:	3508      	adds	r5, #8
    2ec2:	e79f      	b.n	2e04 <__sfvwrite_r+0x34>
    2ec4:	2000      	movs	r0, #0
    2ec6:	4770      	bx	lr
    2ec8:	6820      	ldr	r0, [r4, #0]
    2eca:	6923      	ldr	r3, [r4, #16]
    2ecc:	4298      	cmp	r0, r3
    2ece:	d803      	bhi.n	2ed8 <__sfvwrite_r+0x108>
    2ed0:	6961      	ldr	r1, [r4, #20]
    2ed2:	428f      	cmp	r7, r1
    2ed4:	f080 80b7 	bcs.w	3046 <__sfvwrite_r+0x276>
    2ed8:	45b8      	cmp	r8, r7
    2eda:	bf28      	it	cs
    2edc:	46b8      	movcs	r8, r7
    2ede:	4642      	mov	r2, r8
    2ee0:	4649      	mov	r1, r9
    2ee2:	f000 fd4f 	bl	3984 <memmove>
    2ee6:	68a3      	ldr	r3, [r4, #8]
    2ee8:	6822      	ldr	r2, [r4, #0]
    2eea:	ebc8 0303 	rsb	r3, r8, r3
    2eee:	4442      	add	r2, r8
    2ef0:	60a3      	str	r3, [r4, #8]
    2ef2:	6022      	str	r2, [r4, #0]
    2ef4:	2b00      	cmp	r3, #0
    2ef6:	d149      	bne.n	2f8c <__sfvwrite_r+0x1bc>
    2ef8:	4621      	mov	r1, r4
    2efa:	9801      	ldr	r0, [sp, #4]
    2efc:	f7ff fd22 	bl	2944 <_fflush_r>
    2f00:	2800      	cmp	r0, #0
    2f02:	d043      	beq.n	2f8c <__sfvwrite_r+0x1bc>
    2f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    2f08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2f0c:	f04f 30ff 	mov.w	r0, #4294967295
    2f10:	81a3      	strh	r3, [r4, #12]
    2f12:	b005      	add	sp, #20
    2f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f18:	4680      	mov	r8, r0
    2f1a:	9002      	str	r0, [sp, #8]
    2f1c:	4682      	mov	sl, r0
    2f1e:	4681      	mov	r9, r0
    2f20:	f1b9 0f00 	cmp.w	r9, #0
    2f24:	d02a      	beq.n	2f7c <__sfvwrite_r+0x1ac>
    2f26:	9b02      	ldr	r3, [sp, #8]
    2f28:	2b00      	cmp	r3, #0
    2f2a:	d04c      	beq.n	2fc6 <__sfvwrite_r+0x1f6>
    2f2c:	6820      	ldr	r0, [r4, #0]
    2f2e:	6923      	ldr	r3, [r4, #16]
    2f30:	6962      	ldr	r2, [r4, #20]
    2f32:	45c8      	cmp	r8, r9
    2f34:	46c3      	mov	fp, r8
    2f36:	bf28      	it	cs
    2f38:	46cb      	movcs	fp, r9
    2f3a:	4298      	cmp	r0, r3
    2f3c:	465f      	mov	r7, fp
    2f3e:	d904      	bls.n	2f4a <__sfvwrite_r+0x17a>
    2f40:	68a3      	ldr	r3, [r4, #8]
    2f42:	4413      	add	r3, r2
    2f44:	459b      	cmp	fp, r3
    2f46:	f300 8090 	bgt.w	306a <__sfvwrite_r+0x29a>
    2f4a:	4593      	cmp	fp, r2
    2f4c:	db20      	blt.n	2f90 <__sfvwrite_r+0x1c0>
    2f4e:	4613      	mov	r3, r2
    2f50:	6a67      	ldr	r7, [r4, #36]	; 0x24
    2f52:	69e1      	ldr	r1, [r4, #28]
    2f54:	9801      	ldr	r0, [sp, #4]
    2f56:	4652      	mov	r2, sl
    2f58:	47b8      	blx	r7
    2f5a:	1e07      	subs	r7, r0, #0
    2f5c:	ddd2      	ble.n	2f04 <__sfvwrite_r+0x134>
    2f5e:	ebb8 0807 	subs.w	r8, r8, r7
    2f62:	d023      	beq.n	2fac <__sfvwrite_r+0x1dc>
    2f64:	68b3      	ldr	r3, [r6, #8]
    2f66:	1bdb      	subs	r3, r3, r7
    2f68:	44ba      	add	sl, r7
    2f6a:	ebc7 0909 	rsb	r9, r7, r9
    2f6e:	60b3      	str	r3, [r6, #8]
    2f70:	2b00      	cmp	r3, #0
    2f72:	f43f af5f 	beq.w	2e34 <__sfvwrite_r+0x64>
    2f76:	f1b9 0f00 	cmp.w	r9, #0
    2f7a:	d1d4      	bne.n	2f26 <__sfvwrite_r+0x156>
    2f7c:	2300      	movs	r3, #0
    2f7e:	f8d5 a000 	ldr.w	sl, [r5]
    2f82:	f8d5 9004 	ldr.w	r9, [r5, #4]
    2f86:	9302      	str	r3, [sp, #8]
    2f88:	3508      	adds	r5, #8
    2f8a:	e7c9      	b.n	2f20 <__sfvwrite_r+0x150>
    2f8c:	4640      	mov	r0, r8
    2f8e:	e783      	b.n	2e98 <__sfvwrite_r+0xc8>
    2f90:	465a      	mov	r2, fp
    2f92:	4651      	mov	r1, sl
    2f94:	f000 fcf6 	bl	3984 <memmove>
    2f98:	68a2      	ldr	r2, [r4, #8]
    2f9a:	6823      	ldr	r3, [r4, #0]
    2f9c:	ebcb 0202 	rsb	r2, fp, r2
    2fa0:	445b      	add	r3, fp
    2fa2:	ebb8 0807 	subs.w	r8, r8, r7
    2fa6:	60a2      	str	r2, [r4, #8]
    2fa8:	6023      	str	r3, [r4, #0]
    2faa:	d1db      	bne.n	2f64 <__sfvwrite_r+0x194>
    2fac:	4621      	mov	r1, r4
    2fae:	9801      	ldr	r0, [sp, #4]
    2fb0:	f7ff fcc8 	bl	2944 <_fflush_r>
    2fb4:	2800      	cmp	r0, #0
    2fb6:	d1a5      	bne.n	2f04 <__sfvwrite_r+0x134>
    2fb8:	f8cd 8008 	str.w	r8, [sp, #8]
    2fbc:	e7d2      	b.n	2f64 <__sfvwrite_r+0x194>
    2fbe:	6820      	ldr	r0, [r4, #0]
    2fc0:	46b8      	mov	r8, r7
    2fc2:	46ba      	mov	sl, r7
    2fc4:	e75c      	b.n	2e80 <__sfvwrite_r+0xb0>
    2fc6:	464a      	mov	r2, r9
    2fc8:	210a      	movs	r1, #10
    2fca:	4650      	mov	r0, sl
    2fcc:	f000 fbf0 	bl	37b0 <memchr>
    2fd0:	2800      	cmp	r0, #0
    2fd2:	d06f      	beq.n	30b4 <__sfvwrite_r+0x2e4>
    2fd4:	3001      	adds	r0, #1
    2fd6:	2301      	movs	r3, #1
    2fd8:	ebca 0800 	rsb	r8, sl, r0
    2fdc:	9302      	str	r3, [sp, #8]
    2fde:	e7a5      	b.n	2f2c <__sfvwrite_r+0x15c>
    2fe0:	6962      	ldr	r2, [r4, #20]
    2fe2:	6820      	ldr	r0, [r4, #0]
    2fe4:	6921      	ldr	r1, [r4, #16]
    2fe6:	eb02 0842 	add.w	r8, r2, r2, lsl #1
    2fea:	ebc1 0a00 	rsb	sl, r1, r0
    2fee:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
    2ff2:	f10a 0001 	add.w	r0, sl, #1
    2ff6:	ea4f 0868 	mov.w	r8, r8, asr #1
    2ffa:	4438      	add	r0, r7
    2ffc:	4540      	cmp	r0, r8
    2ffe:	4642      	mov	r2, r8
    3000:	bf84      	itt	hi
    3002:	4680      	movhi	r8, r0
    3004:	4642      	movhi	r2, r8
    3006:	055b      	lsls	r3, r3, #21
    3008:	d542      	bpl.n	3090 <__sfvwrite_r+0x2c0>
    300a:	4611      	mov	r1, r2
    300c:	9801      	ldr	r0, [sp, #4]
    300e:	f000 f911 	bl	3234 <_malloc_r>
    3012:	4683      	mov	fp, r0
    3014:	2800      	cmp	r0, #0
    3016:	d055      	beq.n	30c4 <__sfvwrite_r+0x2f4>
    3018:	4652      	mov	r2, sl
    301a:	6921      	ldr	r1, [r4, #16]
    301c:	f000 fc18 	bl	3850 <memcpy>
    3020:	89a3      	ldrh	r3, [r4, #12]
    3022:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    3026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    302a:	81a3      	strh	r3, [r4, #12]
    302c:	ebca 0308 	rsb	r3, sl, r8
    3030:	eb0b 000a 	add.w	r0, fp, sl
    3034:	f8c4 8014 	str.w	r8, [r4, #20]
    3038:	f8c4 b010 	str.w	fp, [r4, #16]
    303c:	6020      	str	r0, [r4, #0]
    303e:	60a3      	str	r3, [r4, #8]
    3040:	46b8      	mov	r8, r7
    3042:	46ba      	mov	sl, r7
    3044:	e71c      	b.n	2e80 <__sfvwrite_r+0xb0>
    3046:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    304a:	42bb      	cmp	r3, r7
    304c:	bf28      	it	cs
    304e:	463b      	movcs	r3, r7
    3050:	464a      	mov	r2, r9
    3052:	fb93 f3f1 	sdiv	r3, r3, r1
    3056:	9801      	ldr	r0, [sp, #4]
    3058:	6a66      	ldr	r6, [r4, #36]	; 0x24
    305a:	fb01 f303 	mul.w	r3, r1, r3
    305e:	69e1      	ldr	r1, [r4, #28]
    3060:	47b0      	blx	r6
    3062:	2800      	cmp	r0, #0
    3064:	f73f af18 	bgt.w	2e98 <__sfvwrite_r+0xc8>
    3068:	e74c      	b.n	2f04 <__sfvwrite_r+0x134>
    306a:	461a      	mov	r2, r3
    306c:	4651      	mov	r1, sl
    306e:	9303      	str	r3, [sp, #12]
    3070:	f000 fc88 	bl	3984 <memmove>
    3074:	6822      	ldr	r2, [r4, #0]
    3076:	9b03      	ldr	r3, [sp, #12]
    3078:	9801      	ldr	r0, [sp, #4]
    307a:	441a      	add	r2, r3
    307c:	6022      	str	r2, [r4, #0]
    307e:	4621      	mov	r1, r4
    3080:	f7ff fc60 	bl	2944 <_fflush_r>
    3084:	9b03      	ldr	r3, [sp, #12]
    3086:	2800      	cmp	r0, #0
    3088:	f47f af3c 	bne.w	2f04 <__sfvwrite_r+0x134>
    308c:	461f      	mov	r7, r3
    308e:	e766      	b.n	2f5e <__sfvwrite_r+0x18e>
    3090:	9801      	ldr	r0, [sp, #4]
    3092:	f000 fcdf 	bl	3a54 <_realloc_r>
    3096:	4683      	mov	fp, r0
    3098:	2800      	cmp	r0, #0
    309a:	d1c7      	bne.n	302c <__sfvwrite_r+0x25c>
    309c:	9d01      	ldr	r5, [sp, #4]
    309e:	6921      	ldr	r1, [r4, #16]
    30a0:	4628      	mov	r0, r5
    30a2:	f7ff fdad 	bl	2c00 <_free_r>
    30a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    30aa:	220c      	movs	r2, #12
    30ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    30b0:	602a      	str	r2, [r5, #0]
    30b2:	e729      	b.n	2f08 <__sfvwrite_r+0x138>
    30b4:	2301      	movs	r3, #1
    30b6:	f109 0801 	add.w	r8, r9, #1
    30ba:	9302      	str	r3, [sp, #8]
    30bc:	e736      	b.n	2f2c <__sfvwrite_r+0x15c>
    30be:	f04f 30ff 	mov.w	r0, #4294967295
    30c2:	e6b8      	b.n	2e36 <__sfvwrite_r+0x66>
    30c4:	9a01      	ldr	r2, [sp, #4]
    30c6:	230c      	movs	r3, #12
    30c8:	6013      	str	r3, [r2, #0]
    30ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    30ce:	e71b      	b.n	2f08 <__sfvwrite_r+0x138>
    30d0:	7ffffc00 	.word	0x7ffffc00

000030d4 <_fwalk_reent>:
    30d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    30d8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
    30dc:	d01f      	beq.n	311e <_fwalk_reent+0x4a>
    30de:	4688      	mov	r8, r1
    30e0:	4606      	mov	r6, r0
    30e2:	f04f 0900 	mov.w	r9, #0
    30e6:	687d      	ldr	r5, [r7, #4]
    30e8:	68bc      	ldr	r4, [r7, #8]
    30ea:	3d01      	subs	r5, #1
    30ec:	d411      	bmi.n	3112 <_fwalk_reent+0x3e>
    30ee:	89a3      	ldrh	r3, [r4, #12]
    30f0:	2b01      	cmp	r3, #1
    30f2:	f105 35ff 	add.w	r5, r5, #4294967295
    30f6:	d908      	bls.n	310a <_fwalk_reent+0x36>
    30f8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    30fc:	3301      	adds	r3, #1
    30fe:	4621      	mov	r1, r4
    3100:	4630      	mov	r0, r6
    3102:	d002      	beq.n	310a <_fwalk_reent+0x36>
    3104:	47c0      	blx	r8
    3106:	ea49 0900 	orr.w	r9, r9, r0
    310a:	1c6b      	adds	r3, r5, #1
    310c:	f104 0468 	add.w	r4, r4, #104	; 0x68
    3110:	d1ed      	bne.n	30ee <_fwalk_reent+0x1a>
    3112:	683f      	ldr	r7, [r7, #0]
    3114:	2f00      	cmp	r7, #0
    3116:	d1e6      	bne.n	30e6 <_fwalk_reent+0x12>
    3118:	4648      	mov	r0, r9
    311a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    311e:	46b9      	mov	r9, r7
    3120:	4648      	mov	r0, r9
    3122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3126:	bf00      	nop

00003128 <__locale_charset>:
    3128:	4800      	ldr	r0, [pc, #0]	; (312c <__locale_charset+0x4>)
    312a:	4770      	bx	lr
    312c:	2000045c 	.word	0x2000045c

00003130 <__locale_mb_cur_max>:
    3130:	4b01      	ldr	r3, [pc, #4]	; (3138 <__locale_mb_cur_max+0x8>)
    3132:	6818      	ldr	r0, [r3, #0]
    3134:	4770      	bx	lr
    3136:	bf00      	nop
    3138:	2000047c 	.word	0x2000047c

0000313c <__swhatbuf_r>:
    313c:	b570      	push	{r4, r5, r6, lr}
    313e:	460d      	mov	r5, r1
    3140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3144:	2900      	cmp	r1, #0
    3146:	b090      	sub	sp, #64	; 0x40
    3148:	4614      	mov	r4, r2
    314a:	461e      	mov	r6, r3
    314c:	db14      	blt.n	3178 <__swhatbuf_r+0x3c>
    314e:	aa01      	add	r2, sp, #4
    3150:	f001 f88e 	bl	4270 <_fstat_r>
    3154:	2800      	cmp	r0, #0
    3156:	db0f      	blt.n	3178 <__swhatbuf_r+0x3c>
    3158:	9a02      	ldr	r2, [sp, #8]
    315a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    315e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
    3162:	fab2 f282 	clz	r2, r2
    3166:	0952      	lsrs	r2, r2, #5
    3168:	f44f 6380 	mov.w	r3, #1024	; 0x400
    316c:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3170:	6032      	str	r2, [r6, #0]
    3172:	6023      	str	r3, [r4, #0]
    3174:	b010      	add	sp, #64	; 0x40
    3176:	bd70      	pop	{r4, r5, r6, pc}
    3178:	89a8      	ldrh	r0, [r5, #12]
    317a:	f000 0080 	and.w	r0, r0, #128	; 0x80
    317e:	b282      	uxth	r2, r0
    3180:	2000      	movs	r0, #0
    3182:	6030      	str	r0, [r6, #0]
    3184:	b11a      	cbz	r2, 318e <__swhatbuf_r+0x52>
    3186:	2340      	movs	r3, #64	; 0x40
    3188:	6023      	str	r3, [r4, #0]
    318a:	b010      	add	sp, #64	; 0x40
    318c:	bd70      	pop	{r4, r5, r6, pc}
    318e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3192:	4610      	mov	r0, r2
    3194:	6023      	str	r3, [r4, #0]
    3196:	b010      	add	sp, #64	; 0x40
    3198:	bd70      	pop	{r4, r5, r6, pc}
    319a:	bf00      	nop

0000319c <__smakebuf_r>:
    319c:	898a      	ldrh	r2, [r1, #12]
    319e:	0792      	lsls	r2, r2, #30
    31a0:	460b      	mov	r3, r1
    31a2:	d506      	bpl.n	31b2 <__smakebuf_r+0x16>
    31a4:	f101 0243 	add.w	r2, r1, #67	; 0x43
    31a8:	2101      	movs	r1, #1
    31aa:	601a      	str	r2, [r3, #0]
    31ac:	611a      	str	r2, [r3, #16]
    31ae:	6159      	str	r1, [r3, #20]
    31b0:	4770      	bx	lr
    31b2:	b5f0      	push	{r4, r5, r6, r7, lr}
    31b4:	b083      	sub	sp, #12
    31b6:	ab01      	add	r3, sp, #4
    31b8:	466a      	mov	r2, sp
    31ba:	460c      	mov	r4, r1
    31bc:	4605      	mov	r5, r0
    31be:	f7ff ffbd 	bl	313c <__swhatbuf_r>
    31c2:	9900      	ldr	r1, [sp, #0]
    31c4:	4606      	mov	r6, r0
    31c6:	4628      	mov	r0, r5
    31c8:	f000 f834 	bl	3234 <_malloc_r>
    31cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    31d0:	b1d0      	cbz	r0, 3208 <__smakebuf_r+0x6c>
    31d2:	9a01      	ldr	r2, [sp, #4]
    31d4:	4f12      	ldr	r7, [pc, #72]	; (3220 <__smakebuf_r+0x84>)
    31d6:	9900      	ldr	r1, [sp, #0]
    31d8:	63ef      	str	r7, [r5, #60]	; 0x3c
    31da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    31de:	81a3      	strh	r3, [r4, #12]
    31e0:	6020      	str	r0, [r4, #0]
    31e2:	6120      	str	r0, [r4, #16]
    31e4:	6161      	str	r1, [r4, #20]
    31e6:	b91a      	cbnz	r2, 31f0 <__smakebuf_r+0x54>
    31e8:	4333      	orrs	r3, r6
    31ea:	81a3      	strh	r3, [r4, #12]
    31ec:	b003      	add	sp, #12
    31ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31f0:	4628      	mov	r0, r5
    31f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    31f6:	f001 f84f 	bl	4298 <_isatty_r>
    31fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    31fe:	2800      	cmp	r0, #0
    3200:	d0f2      	beq.n	31e8 <__smakebuf_r+0x4c>
    3202:	f043 0301 	orr.w	r3, r3, #1
    3206:	e7ef      	b.n	31e8 <__smakebuf_r+0x4c>
    3208:	059a      	lsls	r2, r3, #22
    320a:	d4ef      	bmi.n	31ec <__smakebuf_r+0x50>
    320c:	f104 0243 	add.w	r2, r4, #67	; 0x43
    3210:	f043 0302 	orr.w	r3, r3, #2
    3214:	2101      	movs	r1, #1
    3216:	81a3      	strh	r3, [r4, #12]
    3218:	6022      	str	r2, [r4, #0]
    321a:	6122      	str	r2, [r4, #16]
    321c:	6161      	str	r1, [r4, #20]
    321e:	e7e5      	b.n	31ec <__smakebuf_r+0x50>
    3220:	00002971 	.word	0x00002971

00003224 <malloc>:
    3224:	4b02      	ldr	r3, [pc, #8]	; (3230 <malloc+0xc>)
    3226:	4601      	mov	r1, r0
    3228:	6818      	ldr	r0, [r3, #0]
    322a:	f000 b803 	b.w	3234 <_malloc_r>
    322e:	bf00      	nop
    3230:	20000458 	.word	0x20000458

00003234 <_malloc_r>:
    3234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3238:	f101 050b 	add.w	r5, r1, #11
    323c:	2d16      	cmp	r5, #22
    323e:	b083      	sub	sp, #12
    3240:	4606      	mov	r6, r0
    3242:	f240 809f 	bls.w	3384 <_malloc_r+0x150>
    3246:	f035 0507 	bics.w	r5, r5, #7
    324a:	f100 80bf 	bmi.w	33cc <_malloc_r+0x198>
    324e:	42a9      	cmp	r1, r5
    3250:	f200 80bc 	bhi.w	33cc <_malloc_r+0x198>
    3254:	f000 fbfa 	bl	3a4c <__malloc_lock>
    3258:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    325c:	f0c0 829c 	bcc.w	3798 <_malloc_r+0x564>
    3260:	0a6b      	lsrs	r3, r5, #9
    3262:	f000 80ba 	beq.w	33da <_malloc_r+0x1a6>
    3266:	2b04      	cmp	r3, #4
    3268:	f200 8183 	bhi.w	3572 <_malloc_r+0x33e>
    326c:	09a8      	lsrs	r0, r5, #6
    326e:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    3272:	ea4f 034e 	mov.w	r3, lr, lsl #1
    3276:	3038      	adds	r0, #56	; 0x38
    3278:	4fc4      	ldr	r7, [pc, #784]	; (358c <_malloc_r+0x358>)
    327a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    327e:	f1a3 0108 	sub.w	r1, r3, #8
    3282:	685c      	ldr	r4, [r3, #4]
    3284:	42a1      	cmp	r1, r4
    3286:	d107      	bne.n	3298 <_malloc_r+0x64>
    3288:	e0ac      	b.n	33e4 <_malloc_r+0x1b0>
    328a:	2a00      	cmp	r2, #0
    328c:	f280 80ac 	bge.w	33e8 <_malloc_r+0x1b4>
    3290:	68e4      	ldr	r4, [r4, #12]
    3292:	42a1      	cmp	r1, r4
    3294:	f000 80a6 	beq.w	33e4 <_malloc_r+0x1b0>
    3298:	6863      	ldr	r3, [r4, #4]
    329a:	f023 0303 	bic.w	r3, r3, #3
    329e:	1b5a      	subs	r2, r3, r5
    32a0:	2a0f      	cmp	r2, #15
    32a2:	ddf2      	ble.n	328a <_malloc_r+0x56>
    32a4:	49b9      	ldr	r1, [pc, #740]	; (358c <_malloc_r+0x358>)
    32a6:	693c      	ldr	r4, [r7, #16]
    32a8:	f101 0e08 	add.w	lr, r1, #8
    32ac:	4574      	cmp	r4, lr
    32ae:	f000 81b3 	beq.w	3618 <_malloc_r+0x3e4>
    32b2:	6863      	ldr	r3, [r4, #4]
    32b4:	f023 0303 	bic.w	r3, r3, #3
    32b8:	1b5a      	subs	r2, r3, r5
    32ba:	2a0f      	cmp	r2, #15
    32bc:	f300 8199 	bgt.w	35f2 <_malloc_r+0x3be>
    32c0:	2a00      	cmp	r2, #0
    32c2:	f8c1 e014 	str.w	lr, [r1, #20]
    32c6:	f8c1 e010 	str.w	lr, [r1, #16]
    32ca:	f280 809e 	bge.w	340a <_malloc_r+0x1d6>
    32ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    32d2:	f080 8167 	bcs.w	35a4 <_malloc_r+0x370>
    32d6:	08db      	lsrs	r3, r3, #3
    32d8:	f103 0c01 	add.w	ip, r3, #1
    32dc:	2201      	movs	r2, #1
    32de:	109b      	asrs	r3, r3, #2
    32e0:	fa02 f303 	lsl.w	r3, r2, r3
    32e4:	684a      	ldr	r2, [r1, #4]
    32e6:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    32ea:	f8c4 8008 	str.w	r8, [r4, #8]
    32ee:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    32f2:	431a      	orrs	r2, r3
    32f4:	f1a9 0308 	sub.w	r3, r9, #8
    32f8:	60e3      	str	r3, [r4, #12]
    32fa:	604a      	str	r2, [r1, #4]
    32fc:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    3300:	f8c8 400c 	str.w	r4, [r8, #12]
    3304:	1083      	asrs	r3, r0, #2
    3306:	2401      	movs	r4, #1
    3308:	409c      	lsls	r4, r3
    330a:	4294      	cmp	r4, r2
    330c:	f200 808a 	bhi.w	3424 <_malloc_r+0x1f0>
    3310:	4214      	tst	r4, r2
    3312:	d106      	bne.n	3322 <_malloc_r+0xee>
    3314:	f020 0003 	bic.w	r0, r0, #3
    3318:	0064      	lsls	r4, r4, #1
    331a:	4214      	tst	r4, r2
    331c:	f100 0004 	add.w	r0, r0, #4
    3320:	d0fa      	beq.n	3318 <_malloc_r+0xe4>
    3322:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    3326:	46cc      	mov	ip, r9
    3328:	4680      	mov	r8, r0
    332a:	f8dc 100c 	ldr.w	r1, [ip, #12]
    332e:	458c      	cmp	ip, r1
    3330:	d107      	bne.n	3342 <_malloc_r+0x10e>
    3332:	e173      	b.n	361c <_malloc_r+0x3e8>
    3334:	2a00      	cmp	r2, #0
    3336:	f280 8181 	bge.w	363c <_malloc_r+0x408>
    333a:	68c9      	ldr	r1, [r1, #12]
    333c:	458c      	cmp	ip, r1
    333e:	f000 816d 	beq.w	361c <_malloc_r+0x3e8>
    3342:	684b      	ldr	r3, [r1, #4]
    3344:	f023 0303 	bic.w	r3, r3, #3
    3348:	1b5a      	subs	r2, r3, r5
    334a:	2a0f      	cmp	r2, #15
    334c:	ddf2      	ble.n	3334 <_malloc_r+0x100>
    334e:	460c      	mov	r4, r1
    3350:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    3354:	f854 8f08 	ldr.w	r8, [r4, #8]!
    3358:	194b      	adds	r3, r1, r5
    335a:	f045 0501 	orr.w	r5, r5, #1
    335e:	604d      	str	r5, [r1, #4]
    3360:	f042 0101 	orr.w	r1, r2, #1
    3364:	f8c8 c00c 	str.w	ip, [r8, #12]
    3368:	4630      	mov	r0, r6
    336a:	f8cc 8008 	str.w	r8, [ip, #8]
    336e:	617b      	str	r3, [r7, #20]
    3370:	613b      	str	r3, [r7, #16]
    3372:	f8c3 e00c 	str.w	lr, [r3, #12]
    3376:	f8c3 e008 	str.w	lr, [r3, #8]
    337a:	6059      	str	r1, [r3, #4]
    337c:	509a      	str	r2, [r3, r2]
    337e:	f000 fb67 	bl	3a50 <__malloc_unlock>
    3382:	e01f      	b.n	33c4 <_malloc_r+0x190>
    3384:	2910      	cmp	r1, #16
    3386:	d821      	bhi.n	33cc <_malloc_r+0x198>
    3388:	f000 fb60 	bl	3a4c <__malloc_lock>
    338c:	2510      	movs	r5, #16
    338e:	2306      	movs	r3, #6
    3390:	2002      	movs	r0, #2
    3392:	4f7e      	ldr	r7, [pc, #504]	; (358c <_malloc_r+0x358>)
    3394:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    3398:	f1a3 0208 	sub.w	r2, r3, #8
    339c:	685c      	ldr	r4, [r3, #4]
    339e:	4294      	cmp	r4, r2
    33a0:	f000 8145 	beq.w	362e <_malloc_r+0x3fa>
    33a4:	6863      	ldr	r3, [r4, #4]
    33a6:	68e1      	ldr	r1, [r4, #12]
    33a8:	68a5      	ldr	r5, [r4, #8]
    33aa:	f023 0303 	bic.w	r3, r3, #3
    33ae:	4423      	add	r3, r4
    33b0:	4630      	mov	r0, r6
    33b2:	685a      	ldr	r2, [r3, #4]
    33b4:	60e9      	str	r1, [r5, #12]
    33b6:	f042 0201 	orr.w	r2, r2, #1
    33ba:	608d      	str	r5, [r1, #8]
    33bc:	605a      	str	r2, [r3, #4]
    33be:	f000 fb47 	bl	3a50 <__malloc_unlock>
    33c2:	3408      	adds	r4, #8
    33c4:	4620      	mov	r0, r4
    33c6:	b003      	add	sp, #12
    33c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    33cc:	2400      	movs	r4, #0
    33ce:	230c      	movs	r3, #12
    33d0:	4620      	mov	r0, r4
    33d2:	6033      	str	r3, [r6, #0]
    33d4:	b003      	add	sp, #12
    33d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    33da:	2380      	movs	r3, #128	; 0x80
    33dc:	f04f 0e40 	mov.w	lr, #64	; 0x40
    33e0:	203f      	movs	r0, #63	; 0x3f
    33e2:	e749      	b.n	3278 <_malloc_r+0x44>
    33e4:	4670      	mov	r0, lr
    33e6:	e75d      	b.n	32a4 <_malloc_r+0x70>
    33e8:	4423      	add	r3, r4
    33ea:	68e1      	ldr	r1, [r4, #12]
    33ec:	685a      	ldr	r2, [r3, #4]
    33ee:	68a5      	ldr	r5, [r4, #8]
    33f0:	f042 0201 	orr.w	r2, r2, #1
    33f4:	60e9      	str	r1, [r5, #12]
    33f6:	4630      	mov	r0, r6
    33f8:	608d      	str	r5, [r1, #8]
    33fa:	605a      	str	r2, [r3, #4]
    33fc:	f000 fb28 	bl	3a50 <__malloc_unlock>
    3400:	3408      	adds	r4, #8
    3402:	4620      	mov	r0, r4
    3404:	b003      	add	sp, #12
    3406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    340a:	4423      	add	r3, r4
    340c:	4630      	mov	r0, r6
    340e:	685a      	ldr	r2, [r3, #4]
    3410:	f042 0201 	orr.w	r2, r2, #1
    3414:	605a      	str	r2, [r3, #4]
    3416:	f000 fb1b 	bl	3a50 <__malloc_unlock>
    341a:	3408      	adds	r4, #8
    341c:	4620      	mov	r0, r4
    341e:	b003      	add	sp, #12
    3420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3424:	68bc      	ldr	r4, [r7, #8]
    3426:	6863      	ldr	r3, [r4, #4]
    3428:	f023 0803 	bic.w	r8, r3, #3
    342c:	45a8      	cmp	r8, r5
    342e:	d304      	bcc.n	343a <_malloc_r+0x206>
    3430:	ebc5 0308 	rsb	r3, r5, r8
    3434:	2b0f      	cmp	r3, #15
    3436:	f300 808c 	bgt.w	3552 <_malloc_r+0x31e>
    343a:	4b55      	ldr	r3, [pc, #340]	; (3590 <_malloc_r+0x35c>)
    343c:	f8df 9160 	ldr.w	r9, [pc, #352]	; 35a0 <_malloc_r+0x36c>
    3440:	681a      	ldr	r2, [r3, #0]
    3442:	f8d9 3000 	ldr.w	r3, [r9]
    3446:	3301      	adds	r3, #1
    3448:	442a      	add	r2, r5
    344a:	eb04 0a08 	add.w	sl, r4, r8
    344e:	f000 8160 	beq.w	3712 <_malloc_r+0x4de>
    3452:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    3456:	320f      	adds	r2, #15
    3458:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    345c:	f022 020f 	bic.w	r2, r2, #15
    3460:	4611      	mov	r1, r2
    3462:	4630      	mov	r0, r6
    3464:	9201      	str	r2, [sp, #4]
    3466:	f000 fce5 	bl	3e34 <_sbrk_r>
    346a:	f1b0 3fff 	cmp.w	r0, #4294967295
    346e:	4683      	mov	fp, r0
    3470:	9a01      	ldr	r2, [sp, #4]
    3472:	f000 8158 	beq.w	3726 <_malloc_r+0x4f2>
    3476:	4582      	cmp	sl, r0
    3478:	f200 80fc 	bhi.w	3674 <_malloc_r+0x440>
    347c:	4b45      	ldr	r3, [pc, #276]	; (3594 <_malloc_r+0x360>)
    347e:	6819      	ldr	r1, [r3, #0]
    3480:	45da      	cmp	sl, fp
    3482:	4411      	add	r1, r2
    3484:	6019      	str	r1, [r3, #0]
    3486:	f000 8153 	beq.w	3730 <_malloc_r+0x4fc>
    348a:	f8d9 0000 	ldr.w	r0, [r9]
    348e:	f8df e110 	ldr.w	lr, [pc, #272]	; 35a0 <_malloc_r+0x36c>
    3492:	3001      	adds	r0, #1
    3494:	bf1b      	ittet	ne
    3496:	ebca 0a0b 	rsbne	sl, sl, fp
    349a:	4451      	addne	r1, sl
    349c:	f8ce b000 	streq.w	fp, [lr]
    34a0:	6019      	strne	r1, [r3, #0]
    34a2:	f01b 0107 	ands.w	r1, fp, #7
    34a6:	f000 8117 	beq.w	36d8 <_malloc_r+0x4a4>
    34aa:	f1c1 0008 	rsb	r0, r1, #8
    34ae:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    34b2:	4483      	add	fp, r0
    34b4:	3108      	adds	r1, #8
    34b6:	445a      	add	r2, fp
    34b8:	f3c2 020b 	ubfx	r2, r2, #0, #12
    34bc:	ebc2 0901 	rsb	r9, r2, r1
    34c0:	4649      	mov	r1, r9
    34c2:	4630      	mov	r0, r6
    34c4:	9301      	str	r3, [sp, #4]
    34c6:	f000 fcb5 	bl	3e34 <_sbrk_r>
    34ca:	1c43      	adds	r3, r0, #1
    34cc:	9b01      	ldr	r3, [sp, #4]
    34ce:	f000 813f 	beq.w	3750 <_malloc_r+0x51c>
    34d2:	ebcb 0200 	rsb	r2, fp, r0
    34d6:	444a      	add	r2, r9
    34d8:	f042 0201 	orr.w	r2, r2, #1
    34dc:	6819      	ldr	r1, [r3, #0]
    34de:	f8c7 b008 	str.w	fp, [r7, #8]
    34e2:	4449      	add	r1, r9
    34e4:	42bc      	cmp	r4, r7
    34e6:	f8cb 2004 	str.w	r2, [fp, #4]
    34ea:	6019      	str	r1, [r3, #0]
    34ec:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 3594 <_malloc_r+0x360>
    34f0:	d016      	beq.n	3520 <_malloc_r+0x2ec>
    34f2:	f1b8 0f0f 	cmp.w	r8, #15
    34f6:	f240 80fd 	bls.w	36f4 <_malloc_r+0x4c0>
    34fa:	6862      	ldr	r2, [r4, #4]
    34fc:	f1a8 030c 	sub.w	r3, r8, #12
    3500:	f023 0307 	bic.w	r3, r3, #7
    3504:	18e0      	adds	r0, r4, r3
    3506:	f002 0201 	and.w	r2, r2, #1
    350a:	f04f 0e05 	mov.w	lr, #5
    350e:	431a      	orrs	r2, r3
    3510:	2b0f      	cmp	r3, #15
    3512:	6062      	str	r2, [r4, #4]
    3514:	f8c0 e004 	str.w	lr, [r0, #4]
    3518:	f8c0 e008 	str.w	lr, [r0, #8]
    351c:	f200 811c 	bhi.w	3758 <_malloc_r+0x524>
    3520:	4b1d      	ldr	r3, [pc, #116]	; (3598 <_malloc_r+0x364>)
    3522:	68bc      	ldr	r4, [r7, #8]
    3524:	681a      	ldr	r2, [r3, #0]
    3526:	4291      	cmp	r1, r2
    3528:	bf88      	it	hi
    352a:	6019      	strhi	r1, [r3, #0]
    352c:	4b1b      	ldr	r3, [pc, #108]	; (359c <_malloc_r+0x368>)
    352e:	681a      	ldr	r2, [r3, #0]
    3530:	4291      	cmp	r1, r2
    3532:	6862      	ldr	r2, [r4, #4]
    3534:	bf88      	it	hi
    3536:	6019      	strhi	r1, [r3, #0]
    3538:	f022 0203 	bic.w	r2, r2, #3
    353c:	4295      	cmp	r5, r2
    353e:	eba2 0305 	sub.w	r3, r2, r5
    3542:	d801      	bhi.n	3548 <_malloc_r+0x314>
    3544:	2b0f      	cmp	r3, #15
    3546:	dc04      	bgt.n	3552 <_malloc_r+0x31e>
    3548:	4630      	mov	r0, r6
    354a:	f000 fa81 	bl	3a50 <__malloc_unlock>
    354e:	2400      	movs	r4, #0
    3550:	e738      	b.n	33c4 <_malloc_r+0x190>
    3552:	1962      	adds	r2, r4, r5
    3554:	f043 0301 	orr.w	r3, r3, #1
    3558:	f045 0501 	orr.w	r5, r5, #1
    355c:	6065      	str	r5, [r4, #4]
    355e:	4630      	mov	r0, r6
    3560:	60ba      	str	r2, [r7, #8]
    3562:	6053      	str	r3, [r2, #4]
    3564:	f000 fa74 	bl	3a50 <__malloc_unlock>
    3568:	3408      	adds	r4, #8
    356a:	4620      	mov	r0, r4
    356c:	b003      	add	sp, #12
    356e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3572:	2b14      	cmp	r3, #20
    3574:	d971      	bls.n	365a <_malloc_r+0x426>
    3576:	2b54      	cmp	r3, #84	; 0x54
    3578:	f200 80a4 	bhi.w	36c4 <_malloc_r+0x490>
    357c:	0b28      	lsrs	r0, r5, #12
    357e:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    3582:	ea4f 034e 	mov.w	r3, lr, lsl #1
    3586:	306e      	adds	r0, #110	; 0x6e
    3588:	e676      	b.n	3278 <_malloc_r+0x44>
    358a:	bf00      	nop
    358c:	20000480 	.word	0x20000480
    3590:	200008f4 	.word	0x200008f4
    3594:	200008f8 	.word	0x200008f8
    3598:	200008f0 	.word	0x200008f0
    359c:	200008ec 	.word	0x200008ec
    35a0:	2000088c 	.word	0x2000088c
    35a4:	0a5a      	lsrs	r2, r3, #9
    35a6:	2a04      	cmp	r2, #4
    35a8:	d95e      	bls.n	3668 <_malloc_r+0x434>
    35aa:	2a14      	cmp	r2, #20
    35ac:	f200 80b3 	bhi.w	3716 <_malloc_r+0x4e2>
    35b0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    35b4:	0049      	lsls	r1, r1, #1
    35b6:	325b      	adds	r2, #91	; 0x5b
    35b8:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    35bc:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    35c0:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 37a0 <_malloc_r+0x56c>
    35c4:	f1ac 0c08 	sub.w	ip, ip, #8
    35c8:	458c      	cmp	ip, r1
    35ca:	f000 8088 	beq.w	36de <_malloc_r+0x4aa>
    35ce:	684a      	ldr	r2, [r1, #4]
    35d0:	f022 0203 	bic.w	r2, r2, #3
    35d4:	4293      	cmp	r3, r2
    35d6:	d202      	bcs.n	35de <_malloc_r+0x3aa>
    35d8:	6889      	ldr	r1, [r1, #8]
    35da:	458c      	cmp	ip, r1
    35dc:	d1f7      	bne.n	35ce <_malloc_r+0x39a>
    35de:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    35e2:	687a      	ldr	r2, [r7, #4]
    35e4:	f8c4 c00c 	str.w	ip, [r4, #12]
    35e8:	60a1      	str	r1, [r4, #8]
    35ea:	f8cc 4008 	str.w	r4, [ip, #8]
    35ee:	60cc      	str	r4, [r1, #12]
    35f0:	e688      	b.n	3304 <_malloc_r+0xd0>
    35f2:	1963      	adds	r3, r4, r5
    35f4:	f042 0701 	orr.w	r7, r2, #1
    35f8:	f045 0501 	orr.w	r5, r5, #1
    35fc:	6065      	str	r5, [r4, #4]
    35fe:	4630      	mov	r0, r6
    3600:	614b      	str	r3, [r1, #20]
    3602:	610b      	str	r3, [r1, #16]
    3604:	f8c3 e00c 	str.w	lr, [r3, #12]
    3608:	f8c3 e008 	str.w	lr, [r3, #8]
    360c:	605f      	str	r7, [r3, #4]
    360e:	509a      	str	r2, [r3, r2]
    3610:	3408      	adds	r4, #8
    3612:	f000 fa1d 	bl	3a50 <__malloc_unlock>
    3616:	e6d5      	b.n	33c4 <_malloc_r+0x190>
    3618:	684a      	ldr	r2, [r1, #4]
    361a:	e673      	b.n	3304 <_malloc_r+0xd0>
    361c:	f108 0801 	add.w	r8, r8, #1
    3620:	f018 0f03 	tst.w	r8, #3
    3624:	f10c 0c08 	add.w	ip, ip, #8
    3628:	f47f ae7f 	bne.w	332a <_malloc_r+0xf6>
    362c:	e030      	b.n	3690 <_malloc_r+0x45c>
    362e:	68dc      	ldr	r4, [r3, #12]
    3630:	42a3      	cmp	r3, r4
    3632:	bf08      	it	eq
    3634:	3002      	addeq	r0, #2
    3636:	f43f ae35 	beq.w	32a4 <_malloc_r+0x70>
    363a:	e6b3      	b.n	33a4 <_malloc_r+0x170>
    363c:	440b      	add	r3, r1
    363e:	460c      	mov	r4, r1
    3640:	685a      	ldr	r2, [r3, #4]
    3642:	68c9      	ldr	r1, [r1, #12]
    3644:	f854 5f08 	ldr.w	r5, [r4, #8]!
    3648:	f042 0201 	orr.w	r2, r2, #1
    364c:	605a      	str	r2, [r3, #4]
    364e:	4630      	mov	r0, r6
    3650:	60e9      	str	r1, [r5, #12]
    3652:	608d      	str	r5, [r1, #8]
    3654:	f000 f9fc 	bl	3a50 <__malloc_unlock>
    3658:	e6b4      	b.n	33c4 <_malloc_r+0x190>
    365a:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    365e:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    3662:	ea4f 034e 	mov.w	r3, lr, lsl #1
    3666:	e607      	b.n	3278 <_malloc_r+0x44>
    3668:	099a      	lsrs	r2, r3, #6
    366a:	f102 0139 	add.w	r1, r2, #57	; 0x39
    366e:	0049      	lsls	r1, r1, #1
    3670:	3238      	adds	r2, #56	; 0x38
    3672:	e7a1      	b.n	35b8 <_malloc_r+0x384>
    3674:	42bc      	cmp	r4, r7
    3676:	4b4a      	ldr	r3, [pc, #296]	; (37a0 <_malloc_r+0x56c>)
    3678:	f43f af00 	beq.w	347c <_malloc_r+0x248>
    367c:	689c      	ldr	r4, [r3, #8]
    367e:	6862      	ldr	r2, [r4, #4]
    3680:	f022 0203 	bic.w	r2, r2, #3
    3684:	e75a      	b.n	353c <_malloc_r+0x308>
    3686:	f859 3908 	ldr.w	r3, [r9], #-8
    368a:	4599      	cmp	r9, r3
    368c:	f040 8082 	bne.w	3794 <_malloc_r+0x560>
    3690:	f010 0f03 	tst.w	r0, #3
    3694:	f100 30ff 	add.w	r0, r0, #4294967295
    3698:	d1f5      	bne.n	3686 <_malloc_r+0x452>
    369a:	687b      	ldr	r3, [r7, #4]
    369c:	ea23 0304 	bic.w	r3, r3, r4
    36a0:	607b      	str	r3, [r7, #4]
    36a2:	0064      	lsls	r4, r4, #1
    36a4:	429c      	cmp	r4, r3
    36a6:	f63f aebd 	bhi.w	3424 <_malloc_r+0x1f0>
    36aa:	2c00      	cmp	r4, #0
    36ac:	f43f aeba 	beq.w	3424 <_malloc_r+0x1f0>
    36b0:	421c      	tst	r4, r3
    36b2:	4640      	mov	r0, r8
    36b4:	f47f ae35 	bne.w	3322 <_malloc_r+0xee>
    36b8:	0064      	lsls	r4, r4, #1
    36ba:	421c      	tst	r4, r3
    36bc:	f100 0004 	add.w	r0, r0, #4
    36c0:	d0fa      	beq.n	36b8 <_malloc_r+0x484>
    36c2:	e62e      	b.n	3322 <_malloc_r+0xee>
    36c4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    36c8:	d818      	bhi.n	36fc <_malloc_r+0x4c8>
    36ca:	0be8      	lsrs	r0, r5, #15
    36cc:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    36d0:	ea4f 034e 	mov.w	r3, lr, lsl #1
    36d4:	3077      	adds	r0, #119	; 0x77
    36d6:	e5cf      	b.n	3278 <_malloc_r+0x44>
    36d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    36dc:	e6eb      	b.n	34b6 <_malloc_r+0x282>
    36de:	2101      	movs	r1, #1
    36e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    36e4:	1092      	asrs	r2, r2, #2
    36e6:	fa01 f202 	lsl.w	r2, r1, r2
    36ea:	431a      	orrs	r2, r3
    36ec:	f8c8 2004 	str.w	r2, [r8, #4]
    36f0:	4661      	mov	r1, ip
    36f2:	e777      	b.n	35e4 <_malloc_r+0x3b0>
    36f4:	2301      	movs	r3, #1
    36f6:	f8cb 3004 	str.w	r3, [fp, #4]
    36fa:	e725      	b.n	3548 <_malloc_r+0x314>
    36fc:	f240 5254 	movw	r2, #1364	; 0x554
    3700:	4293      	cmp	r3, r2
    3702:	d820      	bhi.n	3746 <_malloc_r+0x512>
    3704:	0ca8      	lsrs	r0, r5, #18
    3706:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    370a:	ea4f 034e 	mov.w	r3, lr, lsl #1
    370e:	307c      	adds	r0, #124	; 0x7c
    3710:	e5b2      	b.n	3278 <_malloc_r+0x44>
    3712:	3210      	adds	r2, #16
    3714:	e6a4      	b.n	3460 <_malloc_r+0x22c>
    3716:	2a54      	cmp	r2, #84	; 0x54
    3718:	d826      	bhi.n	3768 <_malloc_r+0x534>
    371a:	0b1a      	lsrs	r2, r3, #12
    371c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    3720:	0049      	lsls	r1, r1, #1
    3722:	326e      	adds	r2, #110	; 0x6e
    3724:	e748      	b.n	35b8 <_malloc_r+0x384>
    3726:	68bc      	ldr	r4, [r7, #8]
    3728:	6862      	ldr	r2, [r4, #4]
    372a:	f022 0203 	bic.w	r2, r2, #3
    372e:	e705      	b.n	353c <_malloc_r+0x308>
    3730:	f3ca 000b 	ubfx	r0, sl, #0, #12
    3734:	2800      	cmp	r0, #0
    3736:	f47f aea8 	bne.w	348a <_malloc_r+0x256>
    373a:	4442      	add	r2, r8
    373c:	68bb      	ldr	r3, [r7, #8]
    373e:	f042 0201 	orr.w	r2, r2, #1
    3742:	605a      	str	r2, [r3, #4]
    3744:	e6ec      	b.n	3520 <_malloc_r+0x2ec>
    3746:	23fe      	movs	r3, #254	; 0xfe
    3748:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    374c:	207e      	movs	r0, #126	; 0x7e
    374e:	e593      	b.n	3278 <_malloc_r+0x44>
    3750:	2201      	movs	r2, #1
    3752:	f04f 0900 	mov.w	r9, #0
    3756:	e6c1      	b.n	34dc <_malloc_r+0x2a8>
    3758:	f104 0108 	add.w	r1, r4, #8
    375c:	4630      	mov	r0, r6
    375e:	f7ff fa4f 	bl	2c00 <_free_r>
    3762:	f8d9 1000 	ldr.w	r1, [r9]
    3766:	e6db      	b.n	3520 <_malloc_r+0x2ec>
    3768:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    376c:	d805      	bhi.n	377a <_malloc_r+0x546>
    376e:	0bda      	lsrs	r2, r3, #15
    3770:	f102 0178 	add.w	r1, r2, #120	; 0x78
    3774:	0049      	lsls	r1, r1, #1
    3776:	3277      	adds	r2, #119	; 0x77
    3778:	e71e      	b.n	35b8 <_malloc_r+0x384>
    377a:	f240 5154 	movw	r1, #1364	; 0x554
    377e:	428a      	cmp	r2, r1
    3780:	d805      	bhi.n	378e <_malloc_r+0x55a>
    3782:	0c9a      	lsrs	r2, r3, #18
    3784:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    3788:	0049      	lsls	r1, r1, #1
    378a:	327c      	adds	r2, #124	; 0x7c
    378c:	e714      	b.n	35b8 <_malloc_r+0x384>
    378e:	21fe      	movs	r1, #254	; 0xfe
    3790:	227e      	movs	r2, #126	; 0x7e
    3792:	e711      	b.n	35b8 <_malloc_r+0x384>
    3794:	687b      	ldr	r3, [r7, #4]
    3796:	e784      	b.n	36a2 <_malloc_r+0x46e>
    3798:	08e8      	lsrs	r0, r5, #3
    379a:	1c43      	adds	r3, r0, #1
    379c:	005b      	lsls	r3, r3, #1
    379e:	e5f8      	b.n	3392 <_malloc_r+0x15e>
    37a0:	20000480 	.word	0x20000480
	...

000037b0 <memchr>:
    37b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    37b4:	2a10      	cmp	r2, #16
    37b6:	db2b      	blt.n	3810 <memchr+0x60>
    37b8:	f010 0f07 	tst.w	r0, #7
    37bc:	d008      	beq.n	37d0 <memchr+0x20>
    37be:	f810 3b01 	ldrb.w	r3, [r0], #1
    37c2:	3a01      	subs	r2, #1
    37c4:	428b      	cmp	r3, r1
    37c6:	d02d      	beq.n	3824 <memchr+0x74>
    37c8:	f010 0f07 	tst.w	r0, #7
    37cc:	b342      	cbz	r2, 3820 <memchr+0x70>
    37ce:	d1f6      	bne.n	37be <memchr+0xe>
    37d0:	b4f0      	push	{r4, r5, r6, r7}
    37d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    37d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    37da:	f022 0407 	bic.w	r4, r2, #7
    37de:	f07f 0700 	mvns.w	r7, #0
    37e2:	2300      	movs	r3, #0
    37e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    37e8:	3c08      	subs	r4, #8
    37ea:	ea85 0501 	eor.w	r5, r5, r1
    37ee:	ea86 0601 	eor.w	r6, r6, r1
    37f2:	fa85 f547 	uadd8	r5, r5, r7
    37f6:	faa3 f587 	sel	r5, r3, r7
    37fa:	fa86 f647 	uadd8	r6, r6, r7
    37fe:	faa5 f687 	sel	r6, r5, r7
    3802:	b98e      	cbnz	r6, 3828 <memchr+0x78>
    3804:	d1ee      	bne.n	37e4 <memchr+0x34>
    3806:	bcf0      	pop	{r4, r5, r6, r7}
    3808:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    380c:	f002 0207 	and.w	r2, r2, #7
    3810:	b132      	cbz	r2, 3820 <memchr+0x70>
    3812:	f810 3b01 	ldrb.w	r3, [r0], #1
    3816:	3a01      	subs	r2, #1
    3818:	ea83 0301 	eor.w	r3, r3, r1
    381c:	b113      	cbz	r3, 3824 <memchr+0x74>
    381e:	d1f8      	bne.n	3812 <memchr+0x62>
    3820:	2000      	movs	r0, #0
    3822:	4770      	bx	lr
    3824:	3801      	subs	r0, #1
    3826:	4770      	bx	lr
    3828:	2d00      	cmp	r5, #0
    382a:	bf06      	itte	eq
    382c:	4635      	moveq	r5, r6
    382e:	3803      	subeq	r0, #3
    3830:	3807      	subne	r0, #7
    3832:	f015 0f01 	tst.w	r5, #1
    3836:	d107      	bne.n	3848 <memchr+0x98>
    3838:	3001      	adds	r0, #1
    383a:	f415 7f80 	tst.w	r5, #256	; 0x100
    383e:	bf02      	ittt	eq
    3840:	3001      	addeq	r0, #1
    3842:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    3846:	3001      	addeq	r0, #1
    3848:	bcf0      	pop	{r4, r5, r6, r7}
    384a:	3801      	subs	r0, #1
    384c:	4770      	bx	lr
    384e:	bf00      	nop

00003850 <memcpy>:
    3850:	4684      	mov	ip, r0
    3852:	ea41 0300 	orr.w	r3, r1, r0
    3856:	f013 0303 	ands.w	r3, r3, #3
    385a:	d16d      	bne.n	3938 <memcpy+0xe8>
    385c:	3a40      	subs	r2, #64	; 0x40
    385e:	d341      	bcc.n	38e4 <memcpy+0x94>
    3860:	f851 3b04 	ldr.w	r3, [r1], #4
    3864:	f840 3b04 	str.w	r3, [r0], #4
    3868:	f851 3b04 	ldr.w	r3, [r1], #4
    386c:	f840 3b04 	str.w	r3, [r0], #4
    3870:	f851 3b04 	ldr.w	r3, [r1], #4
    3874:	f840 3b04 	str.w	r3, [r0], #4
    3878:	f851 3b04 	ldr.w	r3, [r1], #4
    387c:	f840 3b04 	str.w	r3, [r0], #4
    3880:	f851 3b04 	ldr.w	r3, [r1], #4
    3884:	f840 3b04 	str.w	r3, [r0], #4
    3888:	f851 3b04 	ldr.w	r3, [r1], #4
    388c:	f840 3b04 	str.w	r3, [r0], #4
    3890:	f851 3b04 	ldr.w	r3, [r1], #4
    3894:	f840 3b04 	str.w	r3, [r0], #4
    3898:	f851 3b04 	ldr.w	r3, [r1], #4
    389c:	f840 3b04 	str.w	r3, [r0], #4
    38a0:	f851 3b04 	ldr.w	r3, [r1], #4
    38a4:	f840 3b04 	str.w	r3, [r0], #4
    38a8:	f851 3b04 	ldr.w	r3, [r1], #4
    38ac:	f840 3b04 	str.w	r3, [r0], #4
    38b0:	f851 3b04 	ldr.w	r3, [r1], #4
    38b4:	f840 3b04 	str.w	r3, [r0], #4
    38b8:	f851 3b04 	ldr.w	r3, [r1], #4
    38bc:	f840 3b04 	str.w	r3, [r0], #4
    38c0:	f851 3b04 	ldr.w	r3, [r1], #4
    38c4:	f840 3b04 	str.w	r3, [r0], #4
    38c8:	f851 3b04 	ldr.w	r3, [r1], #4
    38cc:	f840 3b04 	str.w	r3, [r0], #4
    38d0:	f851 3b04 	ldr.w	r3, [r1], #4
    38d4:	f840 3b04 	str.w	r3, [r0], #4
    38d8:	f851 3b04 	ldr.w	r3, [r1], #4
    38dc:	f840 3b04 	str.w	r3, [r0], #4
    38e0:	3a40      	subs	r2, #64	; 0x40
    38e2:	d2bd      	bcs.n	3860 <memcpy+0x10>
    38e4:	3230      	adds	r2, #48	; 0x30
    38e6:	d311      	bcc.n	390c <memcpy+0xbc>
    38e8:	f851 3b04 	ldr.w	r3, [r1], #4
    38ec:	f840 3b04 	str.w	r3, [r0], #4
    38f0:	f851 3b04 	ldr.w	r3, [r1], #4
    38f4:	f840 3b04 	str.w	r3, [r0], #4
    38f8:	f851 3b04 	ldr.w	r3, [r1], #4
    38fc:	f840 3b04 	str.w	r3, [r0], #4
    3900:	f851 3b04 	ldr.w	r3, [r1], #4
    3904:	f840 3b04 	str.w	r3, [r0], #4
    3908:	3a10      	subs	r2, #16
    390a:	d2ed      	bcs.n	38e8 <memcpy+0x98>
    390c:	320c      	adds	r2, #12
    390e:	d305      	bcc.n	391c <memcpy+0xcc>
    3910:	f851 3b04 	ldr.w	r3, [r1], #4
    3914:	f840 3b04 	str.w	r3, [r0], #4
    3918:	3a04      	subs	r2, #4
    391a:	d2f9      	bcs.n	3910 <memcpy+0xc0>
    391c:	3204      	adds	r2, #4
    391e:	d008      	beq.n	3932 <memcpy+0xe2>
    3920:	07d2      	lsls	r2, r2, #31
    3922:	bf1c      	itt	ne
    3924:	f811 3b01 	ldrbne.w	r3, [r1], #1
    3928:	f800 3b01 	strbne.w	r3, [r0], #1
    392c:	d301      	bcc.n	3932 <memcpy+0xe2>
    392e:	880b      	ldrh	r3, [r1, #0]
    3930:	8003      	strh	r3, [r0, #0]
    3932:	4660      	mov	r0, ip
    3934:	4770      	bx	lr
    3936:	bf00      	nop
    3938:	2a08      	cmp	r2, #8
    393a:	d313      	bcc.n	3964 <memcpy+0x114>
    393c:	078b      	lsls	r3, r1, #30
    393e:	d08d      	beq.n	385c <memcpy+0xc>
    3940:	f010 0303 	ands.w	r3, r0, #3
    3944:	d08a      	beq.n	385c <memcpy+0xc>
    3946:	f1c3 0304 	rsb	r3, r3, #4
    394a:	1ad2      	subs	r2, r2, r3
    394c:	07db      	lsls	r3, r3, #31
    394e:	bf1c      	itt	ne
    3950:	f811 3b01 	ldrbne.w	r3, [r1], #1
    3954:	f800 3b01 	strbne.w	r3, [r0], #1
    3958:	d380      	bcc.n	385c <memcpy+0xc>
    395a:	f831 3b02 	ldrh.w	r3, [r1], #2
    395e:	f820 3b02 	strh.w	r3, [r0], #2
    3962:	e77b      	b.n	385c <memcpy+0xc>
    3964:	3a04      	subs	r2, #4
    3966:	d3d9      	bcc.n	391c <memcpy+0xcc>
    3968:	3a01      	subs	r2, #1
    396a:	f811 3b01 	ldrb.w	r3, [r1], #1
    396e:	f800 3b01 	strb.w	r3, [r0], #1
    3972:	d2f9      	bcs.n	3968 <memcpy+0x118>
    3974:	780b      	ldrb	r3, [r1, #0]
    3976:	7003      	strb	r3, [r0, #0]
    3978:	784b      	ldrb	r3, [r1, #1]
    397a:	7043      	strb	r3, [r0, #1]
    397c:	788b      	ldrb	r3, [r1, #2]
    397e:	7083      	strb	r3, [r0, #2]
    3980:	4660      	mov	r0, ip
    3982:	4770      	bx	lr

00003984 <memmove>:
    3984:	4288      	cmp	r0, r1
    3986:	b5f0      	push	{r4, r5, r6, r7, lr}
    3988:	d90d      	bls.n	39a6 <memmove+0x22>
    398a:	188b      	adds	r3, r1, r2
    398c:	4298      	cmp	r0, r3
    398e:	d20a      	bcs.n	39a6 <memmove+0x22>
    3990:	1881      	adds	r1, r0, r2
    3992:	2a00      	cmp	r2, #0
    3994:	d051      	beq.n	3a3a <memmove+0xb6>
    3996:	1a9a      	subs	r2, r3, r2
    3998:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    399c:	f801 4d01 	strb.w	r4, [r1, #-1]!
    39a0:	4293      	cmp	r3, r2
    39a2:	d1f9      	bne.n	3998 <memmove+0x14>
    39a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39a6:	2a0f      	cmp	r2, #15
    39a8:	d948      	bls.n	3a3c <memmove+0xb8>
    39aa:	ea41 0300 	orr.w	r3, r1, r0
    39ae:	079b      	lsls	r3, r3, #30
    39b0:	d146      	bne.n	3a40 <memmove+0xbc>
    39b2:	f100 0410 	add.w	r4, r0, #16
    39b6:	f101 0310 	add.w	r3, r1, #16
    39ba:	4615      	mov	r5, r2
    39bc:	f853 6c10 	ldr.w	r6, [r3, #-16]
    39c0:	f844 6c10 	str.w	r6, [r4, #-16]
    39c4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
    39c8:	f844 6c0c 	str.w	r6, [r4, #-12]
    39cc:	f853 6c08 	ldr.w	r6, [r3, #-8]
    39d0:	f844 6c08 	str.w	r6, [r4, #-8]
    39d4:	3d10      	subs	r5, #16
    39d6:	f853 6c04 	ldr.w	r6, [r3, #-4]
    39da:	f844 6c04 	str.w	r6, [r4, #-4]
    39de:	2d0f      	cmp	r5, #15
    39e0:	f103 0310 	add.w	r3, r3, #16
    39e4:	f104 0410 	add.w	r4, r4, #16
    39e8:	d8e8      	bhi.n	39bc <memmove+0x38>
    39ea:	f1a2 0310 	sub.w	r3, r2, #16
    39ee:	f023 030f 	bic.w	r3, r3, #15
    39f2:	f002 0e0f 	and.w	lr, r2, #15
    39f6:	3310      	adds	r3, #16
    39f8:	f1be 0f03 	cmp.w	lr, #3
    39fc:	4419      	add	r1, r3
    39fe:	4403      	add	r3, r0
    3a00:	d921      	bls.n	3a46 <memmove+0xc2>
    3a02:	1f1e      	subs	r6, r3, #4
    3a04:	460d      	mov	r5, r1
    3a06:	4674      	mov	r4, lr
    3a08:	3c04      	subs	r4, #4
    3a0a:	f855 7b04 	ldr.w	r7, [r5], #4
    3a0e:	f846 7f04 	str.w	r7, [r6, #4]!
    3a12:	2c03      	cmp	r4, #3
    3a14:	d8f8      	bhi.n	3a08 <memmove+0x84>
    3a16:	f1ae 0404 	sub.w	r4, lr, #4
    3a1a:	f024 0403 	bic.w	r4, r4, #3
    3a1e:	3404      	adds	r4, #4
    3a20:	4423      	add	r3, r4
    3a22:	4421      	add	r1, r4
    3a24:	f002 0203 	and.w	r2, r2, #3
    3a28:	b162      	cbz	r2, 3a44 <memmove+0xc0>
    3a2a:	3b01      	subs	r3, #1
    3a2c:	440a      	add	r2, r1
    3a2e:	f811 4b01 	ldrb.w	r4, [r1], #1
    3a32:	f803 4f01 	strb.w	r4, [r3, #1]!
    3a36:	428a      	cmp	r2, r1
    3a38:	d1f9      	bne.n	3a2e <memmove+0xaa>
    3a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a3c:	4603      	mov	r3, r0
    3a3e:	e7f3      	b.n	3a28 <memmove+0xa4>
    3a40:	4603      	mov	r3, r0
    3a42:	e7f2      	b.n	3a2a <memmove+0xa6>
    3a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a46:	4672      	mov	r2, lr
    3a48:	e7ee      	b.n	3a28 <memmove+0xa4>
    3a4a:	bf00      	nop

00003a4c <__malloc_lock>:
    3a4c:	4770      	bx	lr
    3a4e:	bf00      	nop

00003a50 <__malloc_unlock>:
    3a50:	4770      	bx	lr
    3a52:	bf00      	nop

00003a54 <_realloc_r>:
    3a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a58:	4617      	mov	r7, r2
    3a5a:	b083      	sub	sp, #12
    3a5c:	2900      	cmp	r1, #0
    3a5e:	f000 80c1 	beq.w	3be4 <_realloc_r+0x190>
    3a62:	460e      	mov	r6, r1
    3a64:	4681      	mov	r9, r0
    3a66:	f107 050b 	add.w	r5, r7, #11
    3a6a:	f7ff ffef 	bl	3a4c <__malloc_lock>
    3a6e:	f856 ec04 	ldr.w	lr, [r6, #-4]
    3a72:	2d16      	cmp	r5, #22
    3a74:	f02e 0403 	bic.w	r4, lr, #3
    3a78:	f1a6 0808 	sub.w	r8, r6, #8
    3a7c:	d840      	bhi.n	3b00 <_realloc_r+0xac>
    3a7e:	2210      	movs	r2, #16
    3a80:	4615      	mov	r5, r2
    3a82:	42af      	cmp	r7, r5
    3a84:	d841      	bhi.n	3b0a <_realloc_r+0xb6>
    3a86:	4294      	cmp	r4, r2
    3a88:	da75      	bge.n	3b76 <_realloc_r+0x122>
    3a8a:	4bc9      	ldr	r3, [pc, #804]	; (3db0 <_realloc_r+0x35c>)
    3a8c:	6899      	ldr	r1, [r3, #8]
    3a8e:	eb08 0004 	add.w	r0, r8, r4
    3a92:	4288      	cmp	r0, r1
    3a94:	6841      	ldr	r1, [r0, #4]
    3a96:	f000 80d9 	beq.w	3c4c <_realloc_r+0x1f8>
    3a9a:	f021 0301 	bic.w	r3, r1, #1
    3a9e:	4403      	add	r3, r0
    3aa0:	685b      	ldr	r3, [r3, #4]
    3aa2:	07db      	lsls	r3, r3, #31
    3aa4:	d57d      	bpl.n	3ba2 <_realloc_r+0x14e>
    3aa6:	f01e 0f01 	tst.w	lr, #1
    3aaa:	d035      	beq.n	3b18 <_realloc_r+0xc4>
    3aac:	4639      	mov	r1, r7
    3aae:	4648      	mov	r0, r9
    3ab0:	f7ff fbc0 	bl	3234 <_malloc_r>
    3ab4:	4607      	mov	r7, r0
    3ab6:	b1e0      	cbz	r0, 3af2 <_realloc_r+0x9e>
    3ab8:	f856 3c04 	ldr.w	r3, [r6, #-4]
    3abc:	f023 0301 	bic.w	r3, r3, #1
    3ac0:	4443      	add	r3, r8
    3ac2:	f1a0 0208 	sub.w	r2, r0, #8
    3ac6:	429a      	cmp	r2, r3
    3ac8:	f000 8144 	beq.w	3d54 <_realloc_r+0x300>
    3acc:	1f22      	subs	r2, r4, #4
    3ace:	2a24      	cmp	r2, #36	; 0x24
    3ad0:	f200 8131 	bhi.w	3d36 <_realloc_r+0x2e2>
    3ad4:	2a13      	cmp	r2, #19
    3ad6:	f200 8104 	bhi.w	3ce2 <_realloc_r+0x28e>
    3ada:	4603      	mov	r3, r0
    3adc:	4632      	mov	r2, r6
    3ade:	6811      	ldr	r1, [r2, #0]
    3ae0:	6019      	str	r1, [r3, #0]
    3ae2:	6851      	ldr	r1, [r2, #4]
    3ae4:	6059      	str	r1, [r3, #4]
    3ae6:	6892      	ldr	r2, [r2, #8]
    3ae8:	609a      	str	r2, [r3, #8]
    3aea:	4631      	mov	r1, r6
    3aec:	4648      	mov	r0, r9
    3aee:	f7ff f887 	bl	2c00 <_free_r>
    3af2:	4648      	mov	r0, r9
    3af4:	f7ff ffac 	bl	3a50 <__malloc_unlock>
    3af8:	4638      	mov	r0, r7
    3afa:	b003      	add	sp, #12
    3afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b00:	f025 0507 	bic.w	r5, r5, #7
    3b04:	2d00      	cmp	r5, #0
    3b06:	462a      	mov	r2, r5
    3b08:	dabb      	bge.n	3a82 <_realloc_r+0x2e>
    3b0a:	230c      	movs	r3, #12
    3b0c:	2000      	movs	r0, #0
    3b0e:	f8c9 3000 	str.w	r3, [r9]
    3b12:	b003      	add	sp, #12
    3b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b18:	f856 3c08 	ldr.w	r3, [r6, #-8]
    3b1c:	ebc3 0a08 	rsb	sl, r3, r8
    3b20:	f8da 3004 	ldr.w	r3, [sl, #4]
    3b24:	f023 0c03 	bic.w	ip, r3, #3
    3b28:	eb04 030c 	add.w	r3, r4, ip
    3b2c:	4293      	cmp	r3, r2
    3b2e:	dbbd      	blt.n	3aac <_realloc_r+0x58>
    3b30:	4657      	mov	r7, sl
    3b32:	f8da 100c 	ldr.w	r1, [sl, #12]
    3b36:	f857 0f08 	ldr.w	r0, [r7, #8]!
    3b3a:	1f22      	subs	r2, r4, #4
    3b3c:	2a24      	cmp	r2, #36	; 0x24
    3b3e:	60c1      	str	r1, [r0, #12]
    3b40:	6088      	str	r0, [r1, #8]
    3b42:	f200 8117 	bhi.w	3d74 <_realloc_r+0x320>
    3b46:	2a13      	cmp	r2, #19
    3b48:	f240 8112 	bls.w	3d70 <_realloc_r+0x31c>
    3b4c:	6831      	ldr	r1, [r6, #0]
    3b4e:	f8ca 1008 	str.w	r1, [sl, #8]
    3b52:	6871      	ldr	r1, [r6, #4]
    3b54:	f8ca 100c 	str.w	r1, [sl, #12]
    3b58:	2a1b      	cmp	r2, #27
    3b5a:	f200 812b 	bhi.w	3db4 <_realloc_r+0x360>
    3b5e:	3608      	adds	r6, #8
    3b60:	f10a 0210 	add.w	r2, sl, #16
    3b64:	6831      	ldr	r1, [r6, #0]
    3b66:	6011      	str	r1, [r2, #0]
    3b68:	6871      	ldr	r1, [r6, #4]
    3b6a:	6051      	str	r1, [r2, #4]
    3b6c:	68b1      	ldr	r1, [r6, #8]
    3b6e:	6091      	str	r1, [r2, #8]
    3b70:	463e      	mov	r6, r7
    3b72:	461c      	mov	r4, r3
    3b74:	46d0      	mov	r8, sl
    3b76:	1b63      	subs	r3, r4, r5
    3b78:	2b0f      	cmp	r3, #15
    3b7a:	d81d      	bhi.n	3bb8 <_realloc_r+0x164>
    3b7c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3b80:	f003 0301 	and.w	r3, r3, #1
    3b84:	4323      	orrs	r3, r4
    3b86:	4444      	add	r4, r8
    3b88:	f8c8 3004 	str.w	r3, [r8, #4]
    3b8c:	6863      	ldr	r3, [r4, #4]
    3b8e:	f043 0301 	orr.w	r3, r3, #1
    3b92:	6063      	str	r3, [r4, #4]
    3b94:	4648      	mov	r0, r9
    3b96:	f7ff ff5b 	bl	3a50 <__malloc_unlock>
    3b9a:	4630      	mov	r0, r6
    3b9c:	b003      	add	sp, #12
    3b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ba2:	f021 0103 	bic.w	r1, r1, #3
    3ba6:	4421      	add	r1, r4
    3ba8:	4291      	cmp	r1, r2
    3baa:	db21      	blt.n	3bf0 <_realloc_r+0x19c>
    3bac:	68c3      	ldr	r3, [r0, #12]
    3bae:	6882      	ldr	r2, [r0, #8]
    3bb0:	460c      	mov	r4, r1
    3bb2:	60d3      	str	r3, [r2, #12]
    3bb4:	609a      	str	r2, [r3, #8]
    3bb6:	e7de      	b.n	3b76 <_realloc_r+0x122>
    3bb8:	f8d8 2004 	ldr.w	r2, [r8, #4]
    3bbc:	eb08 0105 	add.w	r1, r8, r5
    3bc0:	f002 0201 	and.w	r2, r2, #1
    3bc4:	4315      	orrs	r5, r2
    3bc6:	f043 0201 	orr.w	r2, r3, #1
    3bca:	440b      	add	r3, r1
    3bcc:	f8c8 5004 	str.w	r5, [r8, #4]
    3bd0:	604a      	str	r2, [r1, #4]
    3bd2:	685a      	ldr	r2, [r3, #4]
    3bd4:	f042 0201 	orr.w	r2, r2, #1
    3bd8:	3108      	adds	r1, #8
    3bda:	605a      	str	r2, [r3, #4]
    3bdc:	4648      	mov	r0, r9
    3bde:	f7ff f80f 	bl	2c00 <_free_r>
    3be2:	e7d7      	b.n	3b94 <_realloc_r+0x140>
    3be4:	4611      	mov	r1, r2
    3be6:	b003      	add	sp, #12
    3be8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3bec:	f7ff bb22 	b.w	3234 <_malloc_r>
    3bf0:	f01e 0f01 	tst.w	lr, #1
    3bf4:	f47f af5a 	bne.w	3aac <_realloc_r+0x58>
    3bf8:	f856 3c08 	ldr.w	r3, [r6, #-8]
    3bfc:	ebc3 0a08 	rsb	sl, r3, r8
    3c00:	f8da 3004 	ldr.w	r3, [sl, #4]
    3c04:	f023 0c03 	bic.w	ip, r3, #3
    3c08:	eb01 0e0c 	add.w	lr, r1, ip
    3c0c:	4596      	cmp	lr, r2
    3c0e:	db8b      	blt.n	3b28 <_realloc_r+0xd4>
    3c10:	68c3      	ldr	r3, [r0, #12]
    3c12:	6882      	ldr	r2, [r0, #8]
    3c14:	4657      	mov	r7, sl
    3c16:	60d3      	str	r3, [r2, #12]
    3c18:	609a      	str	r2, [r3, #8]
    3c1a:	f857 1f08 	ldr.w	r1, [r7, #8]!
    3c1e:	f8da 300c 	ldr.w	r3, [sl, #12]
    3c22:	60cb      	str	r3, [r1, #12]
    3c24:	1f22      	subs	r2, r4, #4
    3c26:	2a24      	cmp	r2, #36	; 0x24
    3c28:	6099      	str	r1, [r3, #8]
    3c2a:	f200 8099 	bhi.w	3d60 <_realloc_r+0x30c>
    3c2e:	2a13      	cmp	r2, #19
    3c30:	d962      	bls.n	3cf8 <_realloc_r+0x2a4>
    3c32:	6833      	ldr	r3, [r6, #0]
    3c34:	f8ca 3008 	str.w	r3, [sl, #8]
    3c38:	6873      	ldr	r3, [r6, #4]
    3c3a:	f8ca 300c 	str.w	r3, [sl, #12]
    3c3e:	2a1b      	cmp	r2, #27
    3c40:	f200 80a0 	bhi.w	3d84 <_realloc_r+0x330>
    3c44:	3608      	adds	r6, #8
    3c46:	f10a 0310 	add.w	r3, sl, #16
    3c4a:	e056      	b.n	3cfa <_realloc_r+0x2a6>
    3c4c:	f021 0b03 	bic.w	fp, r1, #3
    3c50:	44a3      	add	fp, r4
    3c52:	f105 0010 	add.w	r0, r5, #16
    3c56:	4583      	cmp	fp, r0
    3c58:	da59      	bge.n	3d0e <_realloc_r+0x2ba>
    3c5a:	f01e 0f01 	tst.w	lr, #1
    3c5e:	f47f af25 	bne.w	3aac <_realloc_r+0x58>
    3c62:	f856 1c08 	ldr.w	r1, [r6, #-8]
    3c66:	ebc1 0a08 	rsb	sl, r1, r8
    3c6a:	f8da 1004 	ldr.w	r1, [sl, #4]
    3c6e:	f021 0c03 	bic.w	ip, r1, #3
    3c72:	44e3      	add	fp, ip
    3c74:	4558      	cmp	r0, fp
    3c76:	f73f af57 	bgt.w	3b28 <_realloc_r+0xd4>
    3c7a:	4657      	mov	r7, sl
    3c7c:	f8da 100c 	ldr.w	r1, [sl, #12]
    3c80:	f857 0f08 	ldr.w	r0, [r7, #8]!
    3c84:	1f22      	subs	r2, r4, #4
    3c86:	2a24      	cmp	r2, #36	; 0x24
    3c88:	60c1      	str	r1, [r0, #12]
    3c8a:	6088      	str	r0, [r1, #8]
    3c8c:	f200 80b4 	bhi.w	3df8 <_realloc_r+0x3a4>
    3c90:	2a13      	cmp	r2, #19
    3c92:	f240 80a5 	bls.w	3de0 <_realloc_r+0x38c>
    3c96:	6831      	ldr	r1, [r6, #0]
    3c98:	f8ca 1008 	str.w	r1, [sl, #8]
    3c9c:	6871      	ldr	r1, [r6, #4]
    3c9e:	f8ca 100c 	str.w	r1, [sl, #12]
    3ca2:	2a1b      	cmp	r2, #27
    3ca4:	f200 80af 	bhi.w	3e06 <_realloc_r+0x3b2>
    3ca8:	3608      	adds	r6, #8
    3caa:	f10a 0210 	add.w	r2, sl, #16
    3cae:	6831      	ldr	r1, [r6, #0]
    3cb0:	6011      	str	r1, [r2, #0]
    3cb2:	6871      	ldr	r1, [r6, #4]
    3cb4:	6051      	str	r1, [r2, #4]
    3cb6:	68b1      	ldr	r1, [r6, #8]
    3cb8:	6091      	str	r1, [r2, #8]
    3cba:	eb0a 0105 	add.w	r1, sl, r5
    3cbe:	ebc5 020b 	rsb	r2, r5, fp
    3cc2:	f042 0201 	orr.w	r2, r2, #1
    3cc6:	6099      	str	r1, [r3, #8]
    3cc8:	604a      	str	r2, [r1, #4]
    3cca:	f8da 3004 	ldr.w	r3, [sl, #4]
    3cce:	f003 0301 	and.w	r3, r3, #1
    3cd2:	431d      	orrs	r5, r3
    3cd4:	4648      	mov	r0, r9
    3cd6:	f8ca 5004 	str.w	r5, [sl, #4]
    3cda:	f7ff feb9 	bl	3a50 <__malloc_unlock>
    3cde:	4638      	mov	r0, r7
    3ce0:	e75c      	b.n	3b9c <_realloc_r+0x148>
    3ce2:	6833      	ldr	r3, [r6, #0]
    3ce4:	6003      	str	r3, [r0, #0]
    3ce6:	6873      	ldr	r3, [r6, #4]
    3ce8:	6043      	str	r3, [r0, #4]
    3cea:	2a1b      	cmp	r2, #27
    3cec:	d827      	bhi.n	3d3e <_realloc_r+0x2ea>
    3cee:	f100 0308 	add.w	r3, r0, #8
    3cf2:	f106 0208 	add.w	r2, r6, #8
    3cf6:	e6f2      	b.n	3ade <_realloc_r+0x8a>
    3cf8:	463b      	mov	r3, r7
    3cfa:	6832      	ldr	r2, [r6, #0]
    3cfc:	601a      	str	r2, [r3, #0]
    3cfe:	6872      	ldr	r2, [r6, #4]
    3d00:	605a      	str	r2, [r3, #4]
    3d02:	68b2      	ldr	r2, [r6, #8]
    3d04:	609a      	str	r2, [r3, #8]
    3d06:	463e      	mov	r6, r7
    3d08:	4674      	mov	r4, lr
    3d0a:	46d0      	mov	r8, sl
    3d0c:	e733      	b.n	3b76 <_realloc_r+0x122>
    3d0e:	eb08 0105 	add.w	r1, r8, r5
    3d12:	ebc5 0b0b 	rsb	fp, r5, fp
    3d16:	f04b 0201 	orr.w	r2, fp, #1
    3d1a:	6099      	str	r1, [r3, #8]
    3d1c:	604a      	str	r2, [r1, #4]
    3d1e:	f856 3c04 	ldr.w	r3, [r6, #-4]
    3d22:	f003 0301 	and.w	r3, r3, #1
    3d26:	431d      	orrs	r5, r3
    3d28:	4648      	mov	r0, r9
    3d2a:	f846 5c04 	str.w	r5, [r6, #-4]
    3d2e:	f7ff fe8f 	bl	3a50 <__malloc_unlock>
    3d32:	4630      	mov	r0, r6
    3d34:	e732      	b.n	3b9c <_realloc_r+0x148>
    3d36:	4631      	mov	r1, r6
    3d38:	f7ff fe24 	bl	3984 <memmove>
    3d3c:	e6d5      	b.n	3aea <_realloc_r+0x96>
    3d3e:	68b3      	ldr	r3, [r6, #8]
    3d40:	6083      	str	r3, [r0, #8]
    3d42:	68f3      	ldr	r3, [r6, #12]
    3d44:	60c3      	str	r3, [r0, #12]
    3d46:	2a24      	cmp	r2, #36	; 0x24
    3d48:	d028      	beq.n	3d9c <_realloc_r+0x348>
    3d4a:	f100 0310 	add.w	r3, r0, #16
    3d4e:	f106 0210 	add.w	r2, r6, #16
    3d52:	e6c4      	b.n	3ade <_realloc_r+0x8a>
    3d54:	f850 3c04 	ldr.w	r3, [r0, #-4]
    3d58:	f023 0303 	bic.w	r3, r3, #3
    3d5c:	441c      	add	r4, r3
    3d5e:	e70a      	b.n	3b76 <_realloc_r+0x122>
    3d60:	4631      	mov	r1, r6
    3d62:	4638      	mov	r0, r7
    3d64:	4674      	mov	r4, lr
    3d66:	46d0      	mov	r8, sl
    3d68:	f7ff fe0c 	bl	3984 <memmove>
    3d6c:	463e      	mov	r6, r7
    3d6e:	e702      	b.n	3b76 <_realloc_r+0x122>
    3d70:	463a      	mov	r2, r7
    3d72:	e6f7      	b.n	3b64 <_realloc_r+0x110>
    3d74:	4631      	mov	r1, r6
    3d76:	4638      	mov	r0, r7
    3d78:	461c      	mov	r4, r3
    3d7a:	46d0      	mov	r8, sl
    3d7c:	f7ff fe02 	bl	3984 <memmove>
    3d80:	463e      	mov	r6, r7
    3d82:	e6f8      	b.n	3b76 <_realloc_r+0x122>
    3d84:	68b3      	ldr	r3, [r6, #8]
    3d86:	f8ca 3010 	str.w	r3, [sl, #16]
    3d8a:	68f3      	ldr	r3, [r6, #12]
    3d8c:	f8ca 3014 	str.w	r3, [sl, #20]
    3d90:	2a24      	cmp	r2, #36	; 0x24
    3d92:	d01b      	beq.n	3dcc <_realloc_r+0x378>
    3d94:	3610      	adds	r6, #16
    3d96:	f10a 0318 	add.w	r3, sl, #24
    3d9a:	e7ae      	b.n	3cfa <_realloc_r+0x2a6>
    3d9c:	6933      	ldr	r3, [r6, #16]
    3d9e:	6103      	str	r3, [r0, #16]
    3da0:	6973      	ldr	r3, [r6, #20]
    3da2:	6143      	str	r3, [r0, #20]
    3da4:	f106 0218 	add.w	r2, r6, #24
    3da8:	f100 0318 	add.w	r3, r0, #24
    3dac:	e697      	b.n	3ade <_realloc_r+0x8a>
    3dae:	bf00      	nop
    3db0:	20000480 	.word	0x20000480
    3db4:	68b1      	ldr	r1, [r6, #8]
    3db6:	f8ca 1010 	str.w	r1, [sl, #16]
    3dba:	68f1      	ldr	r1, [r6, #12]
    3dbc:	f8ca 1014 	str.w	r1, [sl, #20]
    3dc0:	2a24      	cmp	r2, #36	; 0x24
    3dc2:	d00f      	beq.n	3de4 <_realloc_r+0x390>
    3dc4:	3610      	adds	r6, #16
    3dc6:	f10a 0218 	add.w	r2, sl, #24
    3dca:	e6cb      	b.n	3b64 <_realloc_r+0x110>
    3dcc:	6933      	ldr	r3, [r6, #16]
    3dce:	f8ca 3018 	str.w	r3, [sl, #24]
    3dd2:	6973      	ldr	r3, [r6, #20]
    3dd4:	f8ca 301c 	str.w	r3, [sl, #28]
    3dd8:	3618      	adds	r6, #24
    3dda:	f10a 0320 	add.w	r3, sl, #32
    3dde:	e78c      	b.n	3cfa <_realloc_r+0x2a6>
    3de0:	463a      	mov	r2, r7
    3de2:	e764      	b.n	3cae <_realloc_r+0x25a>
    3de4:	6932      	ldr	r2, [r6, #16]
    3de6:	f8ca 2018 	str.w	r2, [sl, #24]
    3dea:	6972      	ldr	r2, [r6, #20]
    3dec:	f8ca 201c 	str.w	r2, [sl, #28]
    3df0:	3618      	adds	r6, #24
    3df2:	f10a 0220 	add.w	r2, sl, #32
    3df6:	e6b5      	b.n	3b64 <_realloc_r+0x110>
    3df8:	4631      	mov	r1, r6
    3dfa:	4638      	mov	r0, r7
    3dfc:	9301      	str	r3, [sp, #4]
    3dfe:	f7ff fdc1 	bl	3984 <memmove>
    3e02:	9b01      	ldr	r3, [sp, #4]
    3e04:	e759      	b.n	3cba <_realloc_r+0x266>
    3e06:	68b1      	ldr	r1, [r6, #8]
    3e08:	f8ca 1010 	str.w	r1, [sl, #16]
    3e0c:	68f1      	ldr	r1, [r6, #12]
    3e0e:	f8ca 1014 	str.w	r1, [sl, #20]
    3e12:	2a24      	cmp	r2, #36	; 0x24
    3e14:	d003      	beq.n	3e1e <_realloc_r+0x3ca>
    3e16:	3610      	adds	r6, #16
    3e18:	f10a 0218 	add.w	r2, sl, #24
    3e1c:	e747      	b.n	3cae <_realloc_r+0x25a>
    3e1e:	6932      	ldr	r2, [r6, #16]
    3e20:	f8ca 2018 	str.w	r2, [sl, #24]
    3e24:	6972      	ldr	r2, [r6, #20]
    3e26:	f8ca 201c 	str.w	r2, [sl, #28]
    3e2a:	3618      	adds	r6, #24
    3e2c:	f10a 0220 	add.w	r2, sl, #32
    3e30:	e73d      	b.n	3cae <_realloc_r+0x25a>
    3e32:	bf00      	nop

00003e34 <_sbrk_r>:
    3e34:	b538      	push	{r3, r4, r5, lr}
    3e36:	4c07      	ldr	r4, [pc, #28]	; (3e54 <_sbrk_r+0x20>)
    3e38:	2300      	movs	r3, #0
    3e3a:	4605      	mov	r5, r0
    3e3c:	4608      	mov	r0, r1
    3e3e:	6023      	str	r3, [r4, #0]
    3e40:	f7fd fac2 	bl	13c8 <_sbrk>
    3e44:	1c43      	adds	r3, r0, #1
    3e46:	d000      	beq.n	3e4a <_sbrk_r+0x16>
    3e48:	bd38      	pop	{r3, r4, r5, pc}
    3e4a:	6823      	ldr	r3, [r4, #0]
    3e4c:	2b00      	cmp	r3, #0
    3e4e:	d0fb      	beq.n	3e48 <_sbrk_r+0x14>
    3e50:	602b      	str	r3, [r5, #0]
    3e52:	bd38      	pop	{r3, r4, r5, pc}
    3e54:	2000092c 	.word	0x2000092c

00003e58 <__sread>:
    3e58:	b510      	push	{r4, lr}
    3e5a:	460c      	mov	r4, r1
    3e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3e60:	f000 fa42 	bl	42e8 <_read_r>
    3e64:	2800      	cmp	r0, #0
    3e66:	db03      	blt.n	3e70 <__sread+0x18>
    3e68:	6d23      	ldr	r3, [r4, #80]	; 0x50
    3e6a:	4403      	add	r3, r0
    3e6c:	6523      	str	r3, [r4, #80]	; 0x50
    3e6e:	bd10      	pop	{r4, pc}
    3e70:	89a3      	ldrh	r3, [r4, #12]
    3e72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3e76:	81a3      	strh	r3, [r4, #12]
    3e78:	bd10      	pop	{r4, pc}
    3e7a:	bf00      	nop

00003e7c <__swrite>:
    3e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e80:	4616      	mov	r6, r2
    3e82:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    3e86:	461f      	mov	r7, r3
    3e88:	05d3      	lsls	r3, r2, #23
    3e8a:	460c      	mov	r4, r1
    3e8c:	4605      	mov	r5, r0
    3e8e:	d507      	bpl.n	3ea0 <__swrite+0x24>
    3e90:	2200      	movs	r2, #0
    3e92:	2302      	movs	r3, #2
    3e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3e98:	f000 fa10 	bl	42bc <_lseek_r>
    3e9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    3ea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    3ea4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    3ea8:	81a2      	strh	r2, [r4, #12]
    3eaa:	463b      	mov	r3, r7
    3eac:	4632      	mov	r2, r6
    3eae:	4628      	mov	r0, r5
    3eb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3eb4:	f000 b920 	b.w	40f8 <_write_r>

00003eb8 <__sseek>:
    3eb8:	b510      	push	{r4, lr}
    3eba:	460c      	mov	r4, r1
    3ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3ec0:	f000 f9fc 	bl	42bc <_lseek_r>
    3ec4:	89a3      	ldrh	r3, [r4, #12]
    3ec6:	1c42      	adds	r2, r0, #1
    3ec8:	bf0e      	itee	eq
    3eca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    3ece:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    3ed2:	6520      	strne	r0, [r4, #80]	; 0x50
    3ed4:	81a3      	strh	r3, [r4, #12]
    3ed6:	bd10      	pop	{r4, pc}

00003ed8 <__sclose>:
    3ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3edc:	f000 b974 	b.w	41c8 <_close_r>
	...

00003f00 <strlen>:
    3f00:	f890 f000 	pld	[r0]
    3f04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    3f08:	f020 0107 	bic.w	r1, r0, #7
    3f0c:	f06f 0c00 	mvn.w	ip, #0
    3f10:	f010 0407 	ands.w	r4, r0, #7
    3f14:	f891 f020 	pld	[r1, #32]
    3f18:	f040 8049 	bne.w	3fae <strlen+0xae>
    3f1c:	f04f 0400 	mov.w	r4, #0
    3f20:	f06f 0007 	mvn.w	r0, #7
    3f24:	e9d1 2300 	ldrd	r2, r3, [r1]
    3f28:	f891 f040 	pld	[r1, #64]	; 0x40
    3f2c:	f100 0008 	add.w	r0, r0, #8
    3f30:	fa82 f24c 	uadd8	r2, r2, ip
    3f34:	faa4 f28c 	sel	r2, r4, ip
    3f38:	fa83 f34c 	uadd8	r3, r3, ip
    3f3c:	faa2 f38c 	sel	r3, r2, ip
    3f40:	bb4b      	cbnz	r3, 3f96 <strlen+0x96>
    3f42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    3f46:	fa82 f24c 	uadd8	r2, r2, ip
    3f4a:	f100 0008 	add.w	r0, r0, #8
    3f4e:	faa4 f28c 	sel	r2, r4, ip
    3f52:	fa83 f34c 	uadd8	r3, r3, ip
    3f56:	faa2 f38c 	sel	r3, r2, ip
    3f5a:	b9e3      	cbnz	r3, 3f96 <strlen+0x96>
    3f5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    3f60:	fa82 f24c 	uadd8	r2, r2, ip
    3f64:	f100 0008 	add.w	r0, r0, #8
    3f68:	faa4 f28c 	sel	r2, r4, ip
    3f6c:	fa83 f34c 	uadd8	r3, r3, ip
    3f70:	faa2 f38c 	sel	r3, r2, ip
    3f74:	b97b      	cbnz	r3, 3f96 <strlen+0x96>
    3f76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    3f7a:	f101 0120 	add.w	r1, r1, #32
    3f7e:	fa82 f24c 	uadd8	r2, r2, ip
    3f82:	f100 0008 	add.w	r0, r0, #8
    3f86:	faa4 f28c 	sel	r2, r4, ip
    3f8a:	fa83 f34c 	uadd8	r3, r3, ip
    3f8e:	faa2 f38c 	sel	r3, r2, ip
    3f92:	2b00      	cmp	r3, #0
    3f94:	d0c6      	beq.n	3f24 <strlen+0x24>
    3f96:	2a00      	cmp	r2, #0
    3f98:	bf04      	itt	eq
    3f9a:	3004      	addeq	r0, #4
    3f9c:	461a      	moveq	r2, r3
    3f9e:	ba12      	rev	r2, r2
    3fa0:	fab2 f282 	clz	r2, r2
    3fa4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    3fa8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    3fac:	4770      	bx	lr
    3fae:	e9d1 2300 	ldrd	r2, r3, [r1]
    3fb2:	f004 0503 	and.w	r5, r4, #3
    3fb6:	f1c4 0000 	rsb	r0, r4, #0
    3fba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    3fbe:	f014 0f04 	tst.w	r4, #4
    3fc2:	f891 f040 	pld	[r1, #64]	; 0x40
    3fc6:	fa0c f505 	lsl.w	r5, ip, r5
    3fca:	ea62 0205 	orn	r2, r2, r5
    3fce:	bf1c      	itt	ne
    3fd0:	ea63 0305 	ornne	r3, r3, r5
    3fd4:	4662      	movne	r2, ip
    3fd6:	f04f 0400 	mov.w	r4, #0
    3fda:	e7a9      	b.n	3f30 <strlen+0x30>

00003fdc <__swbuf_r>:
    3fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fde:	460e      	mov	r6, r1
    3fe0:	4614      	mov	r4, r2
    3fe2:	4607      	mov	r7, r0
    3fe4:	b110      	cbz	r0, 3fec <__swbuf_r+0x10>
    3fe6:	6b83      	ldr	r3, [r0, #56]	; 0x38
    3fe8:	2b00      	cmp	r3, #0
    3fea:	d04a      	beq.n	4082 <__swbuf_r+0xa6>
    3fec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    3ff0:	69a3      	ldr	r3, [r4, #24]
    3ff2:	60a3      	str	r3, [r4, #8]
    3ff4:	b291      	uxth	r1, r2
    3ff6:	0708      	lsls	r0, r1, #28
    3ff8:	d538      	bpl.n	406c <__swbuf_r+0x90>
    3ffa:	6923      	ldr	r3, [r4, #16]
    3ffc:	2b00      	cmp	r3, #0
    3ffe:	d035      	beq.n	406c <__swbuf_r+0x90>
    4000:	0489      	lsls	r1, r1, #18
    4002:	b2f5      	uxtb	r5, r6
    4004:	d515      	bpl.n	4032 <__swbuf_r+0x56>
    4006:	6822      	ldr	r2, [r4, #0]
    4008:	6961      	ldr	r1, [r4, #20]
    400a:	1ad3      	subs	r3, r2, r3
    400c:	428b      	cmp	r3, r1
    400e:	da1c      	bge.n	404a <__swbuf_r+0x6e>
    4010:	3301      	adds	r3, #1
    4012:	68a1      	ldr	r1, [r4, #8]
    4014:	1c50      	adds	r0, r2, #1
    4016:	3901      	subs	r1, #1
    4018:	60a1      	str	r1, [r4, #8]
    401a:	6020      	str	r0, [r4, #0]
    401c:	7016      	strb	r6, [r2, #0]
    401e:	6962      	ldr	r2, [r4, #20]
    4020:	429a      	cmp	r2, r3
    4022:	d01a      	beq.n	405a <__swbuf_r+0x7e>
    4024:	89a3      	ldrh	r3, [r4, #12]
    4026:	07db      	lsls	r3, r3, #31
    4028:	d501      	bpl.n	402e <__swbuf_r+0x52>
    402a:	2d0a      	cmp	r5, #10
    402c:	d015      	beq.n	405a <__swbuf_r+0x7e>
    402e:	4628      	mov	r0, r5
    4030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4032:	6e61      	ldr	r1, [r4, #100]	; 0x64
    4034:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    4038:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
    403c:	81a2      	strh	r2, [r4, #12]
    403e:	6822      	ldr	r2, [r4, #0]
    4040:	6661      	str	r1, [r4, #100]	; 0x64
    4042:	6961      	ldr	r1, [r4, #20]
    4044:	1ad3      	subs	r3, r2, r3
    4046:	428b      	cmp	r3, r1
    4048:	dbe2      	blt.n	4010 <__swbuf_r+0x34>
    404a:	4621      	mov	r1, r4
    404c:	4638      	mov	r0, r7
    404e:	f7fe fc79 	bl	2944 <_fflush_r>
    4052:	b940      	cbnz	r0, 4066 <__swbuf_r+0x8a>
    4054:	6822      	ldr	r2, [r4, #0]
    4056:	2301      	movs	r3, #1
    4058:	e7db      	b.n	4012 <__swbuf_r+0x36>
    405a:	4621      	mov	r1, r4
    405c:	4638      	mov	r0, r7
    405e:	f7fe fc71 	bl	2944 <_fflush_r>
    4062:	2800      	cmp	r0, #0
    4064:	d0e3      	beq.n	402e <__swbuf_r+0x52>
    4066:	f04f 30ff 	mov.w	r0, #4294967295
    406a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    406c:	4621      	mov	r1, r4
    406e:	4638      	mov	r0, r7
    4070:	f7fe fb50 	bl	2714 <__swsetup_r>
    4074:	2800      	cmp	r0, #0
    4076:	d1f6      	bne.n	4066 <__swbuf_r+0x8a>
    4078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    407c:	6923      	ldr	r3, [r4, #16]
    407e:	b291      	uxth	r1, r2
    4080:	e7be      	b.n	4000 <__swbuf_r+0x24>
    4082:	f7fe fcf3 	bl	2a6c <__sinit>
    4086:	e7b1      	b.n	3fec <__swbuf_r+0x10>

00004088 <_wcrtomb_r>:
    4088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    408c:	4605      	mov	r5, r0
    408e:	b086      	sub	sp, #24
    4090:	461e      	mov	r6, r3
    4092:	460c      	mov	r4, r1
    4094:	b1a1      	cbz	r1, 40c0 <_wcrtomb_r+0x38>
    4096:	4b10      	ldr	r3, [pc, #64]	; (40d8 <_wcrtomb_r+0x50>)
    4098:	4617      	mov	r7, r2
    409a:	f8d3 8000 	ldr.w	r8, [r3]
    409e:	f7ff f843 	bl	3128 <__locale_charset>
    40a2:	9600      	str	r6, [sp, #0]
    40a4:	4603      	mov	r3, r0
    40a6:	463a      	mov	r2, r7
    40a8:	4621      	mov	r1, r4
    40aa:	4628      	mov	r0, r5
    40ac:	47c0      	blx	r8
    40ae:	1c43      	adds	r3, r0, #1
    40b0:	d103      	bne.n	40ba <_wcrtomb_r+0x32>
    40b2:	2200      	movs	r2, #0
    40b4:	238a      	movs	r3, #138	; 0x8a
    40b6:	6032      	str	r2, [r6, #0]
    40b8:	602b      	str	r3, [r5, #0]
    40ba:	b006      	add	sp, #24
    40bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    40c0:	4b05      	ldr	r3, [pc, #20]	; (40d8 <_wcrtomb_r+0x50>)
    40c2:	681f      	ldr	r7, [r3, #0]
    40c4:	f7ff f830 	bl	3128 <__locale_charset>
    40c8:	9600      	str	r6, [sp, #0]
    40ca:	4603      	mov	r3, r0
    40cc:	4622      	mov	r2, r4
    40ce:	a903      	add	r1, sp, #12
    40d0:	4628      	mov	r0, r5
    40d2:	47b8      	blx	r7
    40d4:	e7eb      	b.n	40ae <_wcrtomb_r+0x26>
    40d6:	bf00      	nop
    40d8:	20000890 	.word	0x20000890

000040dc <__ascii_wctomb>:
    40dc:	b121      	cbz	r1, 40e8 <__ascii_wctomb+0xc>
    40de:	2aff      	cmp	r2, #255	; 0xff
    40e0:	d804      	bhi.n	40ec <__ascii_wctomb+0x10>
    40e2:	700a      	strb	r2, [r1, #0]
    40e4:	2001      	movs	r0, #1
    40e6:	4770      	bx	lr
    40e8:	4608      	mov	r0, r1
    40ea:	4770      	bx	lr
    40ec:	238a      	movs	r3, #138	; 0x8a
    40ee:	6003      	str	r3, [r0, #0]
    40f0:	f04f 30ff 	mov.w	r0, #4294967295
    40f4:	4770      	bx	lr
    40f6:	bf00      	nop

000040f8 <_write_r>:
    40f8:	b570      	push	{r4, r5, r6, lr}
    40fa:	460d      	mov	r5, r1
    40fc:	4c08      	ldr	r4, [pc, #32]	; (4120 <_write_r+0x28>)
    40fe:	4611      	mov	r1, r2
    4100:	4606      	mov	r6, r0
    4102:	461a      	mov	r2, r3
    4104:	4628      	mov	r0, r5
    4106:	2300      	movs	r3, #0
    4108:	6023      	str	r3, [r4, #0]
    410a:	f7fc f915 	bl	338 <_write>
    410e:	1c43      	adds	r3, r0, #1
    4110:	d000      	beq.n	4114 <_write_r+0x1c>
    4112:	bd70      	pop	{r4, r5, r6, pc}
    4114:	6823      	ldr	r3, [r4, #0]
    4116:	2b00      	cmp	r3, #0
    4118:	d0fb      	beq.n	4112 <_write_r+0x1a>
    411a:	6033      	str	r3, [r6, #0]
    411c:	bd70      	pop	{r4, r5, r6, pc}
    411e:	bf00      	nop
    4120:	2000092c 	.word	0x2000092c

00004124 <__register_exitproc>:
    4124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4128:	4c25      	ldr	r4, [pc, #148]	; (41c0 <__register_exitproc+0x9c>)
    412a:	6825      	ldr	r5, [r4, #0]
    412c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    4130:	4606      	mov	r6, r0
    4132:	4688      	mov	r8, r1
    4134:	4692      	mov	sl, r2
    4136:	4699      	mov	r9, r3
    4138:	b3c4      	cbz	r4, 41ac <__register_exitproc+0x88>
    413a:	6860      	ldr	r0, [r4, #4]
    413c:	281f      	cmp	r0, #31
    413e:	dc17      	bgt.n	4170 <__register_exitproc+0x4c>
    4140:	1c43      	adds	r3, r0, #1
    4142:	b176      	cbz	r6, 4162 <__register_exitproc+0x3e>
    4144:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    4148:	2201      	movs	r2, #1
    414a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    414e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    4152:	4082      	lsls	r2, r0
    4154:	4311      	orrs	r1, r2
    4156:	2e02      	cmp	r6, #2
    4158:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    415c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    4160:	d01e      	beq.n	41a0 <__register_exitproc+0x7c>
    4162:	3002      	adds	r0, #2
    4164:	6063      	str	r3, [r4, #4]
    4166:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    416a:	2000      	movs	r0, #0
    416c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4170:	4b14      	ldr	r3, [pc, #80]	; (41c4 <__register_exitproc+0xa0>)
    4172:	b303      	cbz	r3, 41b6 <__register_exitproc+0x92>
    4174:	f44f 70c8 	mov.w	r0, #400	; 0x190
    4178:	f7ff f854 	bl	3224 <malloc>
    417c:	4604      	mov	r4, r0
    417e:	b1d0      	cbz	r0, 41b6 <__register_exitproc+0x92>
    4180:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    4184:	2700      	movs	r7, #0
    4186:	e880 0088 	stmia.w	r0, {r3, r7}
    418a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    418e:	4638      	mov	r0, r7
    4190:	2301      	movs	r3, #1
    4192:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    4196:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    419a:	2e00      	cmp	r6, #0
    419c:	d0e1      	beq.n	4162 <__register_exitproc+0x3e>
    419e:	e7d1      	b.n	4144 <__register_exitproc+0x20>
    41a0:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    41a4:	430a      	orrs	r2, r1
    41a6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    41aa:	e7da      	b.n	4162 <__register_exitproc+0x3e>
    41ac:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    41b0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    41b4:	e7c1      	b.n	413a <__register_exitproc+0x16>
    41b6:	f04f 30ff 	mov.w	r0, #4294967295
    41ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    41be:	bf00      	nop
    41c0:	0000466c 	.word	0x0000466c
    41c4:	00003225 	.word	0x00003225

000041c8 <_close_r>:
    41c8:	b538      	push	{r3, r4, r5, lr}
    41ca:	4c07      	ldr	r4, [pc, #28]	; (41e8 <_close_r+0x20>)
    41cc:	2300      	movs	r3, #0
    41ce:	4605      	mov	r5, r0
    41d0:	4608      	mov	r0, r1
    41d2:	6023      	str	r3, [r4, #0]
    41d4:	f7fd f912 	bl	13fc <_close>
    41d8:	1c43      	adds	r3, r0, #1
    41da:	d000      	beq.n	41de <_close_r+0x16>
    41dc:	bd38      	pop	{r3, r4, r5, pc}
    41de:	6823      	ldr	r3, [r4, #0]
    41e0:	2b00      	cmp	r3, #0
    41e2:	d0fb      	beq.n	41dc <_close_r+0x14>
    41e4:	602b      	str	r3, [r5, #0]
    41e6:	bd38      	pop	{r3, r4, r5, pc}
    41e8:	2000092c 	.word	0x2000092c

000041ec <_fclose_r>:
    41ec:	2900      	cmp	r1, #0
    41ee:	d03d      	beq.n	426c <_fclose_r+0x80>
    41f0:	b570      	push	{r4, r5, r6, lr}
    41f2:	4605      	mov	r5, r0
    41f4:	460c      	mov	r4, r1
    41f6:	b108      	cbz	r0, 41fc <_fclose_r+0x10>
    41f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    41fa:	b37b      	cbz	r3, 425c <_fclose_r+0x70>
    41fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    4200:	b90b      	cbnz	r3, 4206 <_fclose_r+0x1a>
    4202:	2000      	movs	r0, #0
    4204:	bd70      	pop	{r4, r5, r6, pc}
    4206:	4621      	mov	r1, r4
    4208:	4628      	mov	r0, r5
    420a:	f7fe faf7 	bl	27fc <__sflush_r>
    420e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4210:	4606      	mov	r6, r0
    4212:	b133      	cbz	r3, 4222 <_fclose_r+0x36>
    4214:	69e1      	ldr	r1, [r4, #28]
    4216:	4628      	mov	r0, r5
    4218:	4798      	blx	r3
    421a:	2800      	cmp	r0, #0
    421c:	bfb8      	it	lt
    421e:	f04f 36ff 	movlt.w	r6, #4294967295
    4222:	89a3      	ldrh	r3, [r4, #12]
    4224:	061b      	lsls	r3, r3, #24
    4226:	d41c      	bmi.n	4262 <_fclose_r+0x76>
    4228:	6b21      	ldr	r1, [r4, #48]	; 0x30
    422a:	b141      	cbz	r1, 423e <_fclose_r+0x52>
    422c:	f104 0340 	add.w	r3, r4, #64	; 0x40
    4230:	4299      	cmp	r1, r3
    4232:	d002      	beq.n	423a <_fclose_r+0x4e>
    4234:	4628      	mov	r0, r5
    4236:	f7fe fce3 	bl	2c00 <_free_r>
    423a:	2300      	movs	r3, #0
    423c:	6323      	str	r3, [r4, #48]	; 0x30
    423e:	6c61      	ldr	r1, [r4, #68]	; 0x44
    4240:	b121      	cbz	r1, 424c <_fclose_r+0x60>
    4242:	4628      	mov	r0, r5
    4244:	f7fe fcdc 	bl	2c00 <_free_r>
    4248:	2300      	movs	r3, #0
    424a:	6463      	str	r3, [r4, #68]	; 0x44
    424c:	f7fe fc14 	bl	2a78 <__sfp_lock_acquire>
    4250:	2300      	movs	r3, #0
    4252:	81a3      	strh	r3, [r4, #12]
    4254:	f7fe fc12 	bl	2a7c <__sfp_lock_release>
    4258:	4630      	mov	r0, r6
    425a:	bd70      	pop	{r4, r5, r6, pc}
    425c:	f7fe fc06 	bl	2a6c <__sinit>
    4260:	e7cc      	b.n	41fc <_fclose_r+0x10>
    4262:	6921      	ldr	r1, [r4, #16]
    4264:	4628      	mov	r0, r5
    4266:	f7fe fccb 	bl	2c00 <_free_r>
    426a:	e7dd      	b.n	4228 <_fclose_r+0x3c>
    426c:	2000      	movs	r0, #0
    426e:	4770      	bx	lr

00004270 <_fstat_r>:
    4270:	b538      	push	{r3, r4, r5, lr}
    4272:	460b      	mov	r3, r1
    4274:	4c07      	ldr	r4, [pc, #28]	; (4294 <_fstat_r+0x24>)
    4276:	4605      	mov	r5, r0
    4278:	4611      	mov	r1, r2
    427a:	4618      	mov	r0, r3
    427c:	2300      	movs	r3, #0
    427e:	6023      	str	r3, [r4, #0]
    4280:	f7fd f8c0 	bl	1404 <_fstat>
    4284:	1c43      	adds	r3, r0, #1
    4286:	d000      	beq.n	428a <_fstat_r+0x1a>
    4288:	bd38      	pop	{r3, r4, r5, pc}
    428a:	6823      	ldr	r3, [r4, #0]
    428c:	2b00      	cmp	r3, #0
    428e:	d0fb      	beq.n	4288 <_fstat_r+0x18>
    4290:	602b      	str	r3, [r5, #0]
    4292:	bd38      	pop	{r3, r4, r5, pc}
    4294:	2000092c 	.word	0x2000092c

00004298 <_isatty_r>:
    4298:	b538      	push	{r3, r4, r5, lr}
    429a:	4c07      	ldr	r4, [pc, #28]	; (42b8 <_isatty_r+0x20>)
    429c:	2300      	movs	r3, #0
    429e:	4605      	mov	r5, r0
    42a0:	4608      	mov	r0, r1
    42a2:	6023      	str	r3, [r4, #0]
    42a4:	f7fd f8b4 	bl	1410 <_isatty>
    42a8:	1c43      	adds	r3, r0, #1
    42aa:	d000      	beq.n	42ae <_isatty_r+0x16>
    42ac:	bd38      	pop	{r3, r4, r5, pc}
    42ae:	6823      	ldr	r3, [r4, #0]
    42b0:	2b00      	cmp	r3, #0
    42b2:	d0fb      	beq.n	42ac <_isatty_r+0x14>
    42b4:	602b      	str	r3, [r5, #0]
    42b6:	bd38      	pop	{r3, r4, r5, pc}
    42b8:	2000092c 	.word	0x2000092c

000042bc <_lseek_r>:
    42bc:	b570      	push	{r4, r5, r6, lr}
    42be:	460d      	mov	r5, r1
    42c0:	4c08      	ldr	r4, [pc, #32]	; (42e4 <_lseek_r+0x28>)
    42c2:	4611      	mov	r1, r2
    42c4:	4606      	mov	r6, r0
    42c6:	461a      	mov	r2, r3
    42c8:	4628      	mov	r0, r5
    42ca:	2300      	movs	r3, #0
    42cc:	6023      	str	r3, [r4, #0]
    42ce:	f7fd f8a1 	bl	1414 <_lseek>
    42d2:	1c43      	adds	r3, r0, #1
    42d4:	d000      	beq.n	42d8 <_lseek_r+0x1c>
    42d6:	bd70      	pop	{r4, r5, r6, pc}
    42d8:	6823      	ldr	r3, [r4, #0]
    42da:	2b00      	cmp	r3, #0
    42dc:	d0fb      	beq.n	42d6 <_lseek_r+0x1a>
    42de:	6033      	str	r3, [r6, #0]
    42e0:	bd70      	pop	{r4, r5, r6, pc}
    42e2:	bf00      	nop
    42e4:	2000092c 	.word	0x2000092c

000042e8 <_read_r>:
    42e8:	b570      	push	{r4, r5, r6, lr}
    42ea:	460d      	mov	r5, r1
    42ec:	4c08      	ldr	r4, [pc, #32]	; (4310 <_read_r+0x28>)
    42ee:	4611      	mov	r1, r2
    42f0:	4606      	mov	r6, r0
    42f2:	461a      	mov	r2, r3
    42f4:	4628      	mov	r0, r5
    42f6:	2300      	movs	r3, #0
    42f8:	6023      	str	r3, [r4, #0]
    42fa:	f7fb ff6f 	bl	1dc <_read>
    42fe:	1c43      	adds	r3, r0, #1
    4300:	d000      	beq.n	4304 <_read_r+0x1c>
    4302:	bd70      	pop	{r4, r5, r6, pc}
    4304:	6823      	ldr	r3, [r4, #0]
    4306:	2b00      	cmp	r3, #0
    4308:	d0fb      	beq.n	4302 <_read_r+0x1a>
    430a:	6033      	str	r3, [r6, #0]
    430c:	bd70      	pop	{r4, r5, r6, pc}
    430e:	bf00      	nop
    4310:	2000092c 	.word	0x2000092c

00004314 <__aeabi_uldivmod>:
    4314:	b953      	cbnz	r3, 432c <__aeabi_uldivmod+0x18>
    4316:	b94a      	cbnz	r2, 432c <__aeabi_uldivmod+0x18>
    4318:	2900      	cmp	r1, #0
    431a:	bf08      	it	eq
    431c:	2800      	cmpeq	r0, #0
    431e:	bf1c      	itt	ne
    4320:	f04f 31ff 	movne.w	r1, #4294967295
    4324:	f04f 30ff 	movne.w	r0, #4294967295
    4328:	f000 b97e 	b.w	4628 <__aeabi_idiv0>
    432c:	f1ad 0c08 	sub.w	ip, sp, #8
    4330:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    4334:	f000 f806 	bl	4344 <__udivmoddi4>
    4338:	f8dd e004 	ldr.w	lr, [sp, #4]
    433c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4340:	b004      	add	sp, #16
    4342:	4770      	bx	lr

00004344 <__udivmoddi4>:
    4344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4348:	468c      	mov	ip, r1
    434a:	460e      	mov	r6, r1
    434c:	4604      	mov	r4, r0
    434e:	9d08      	ldr	r5, [sp, #32]
    4350:	2b00      	cmp	r3, #0
    4352:	d150      	bne.n	43f6 <__udivmoddi4+0xb2>
    4354:	428a      	cmp	r2, r1
    4356:	4617      	mov	r7, r2
    4358:	d96c      	bls.n	4434 <__udivmoddi4+0xf0>
    435a:	fab2 fe82 	clz	lr, r2
    435e:	f1be 0f00 	cmp.w	lr, #0
    4362:	d00b      	beq.n	437c <__udivmoddi4+0x38>
    4364:	f1ce 0420 	rsb	r4, lr, #32
    4368:	fa20 f404 	lsr.w	r4, r0, r4
    436c:	fa01 f60e 	lsl.w	r6, r1, lr
    4370:	ea44 0c06 	orr.w	ip, r4, r6
    4374:	fa02 f70e 	lsl.w	r7, r2, lr
    4378:	fa00 f40e 	lsl.w	r4, r0, lr
    437c:	ea4f 4917 	mov.w	r9, r7, lsr #16
    4380:	0c22      	lsrs	r2, r4, #16
    4382:	fbbc f0f9 	udiv	r0, ip, r9
    4386:	fa1f f887 	uxth.w	r8, r7
    438a:	fb09 c610 	mls	r6, r9, r0, ip
    438e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    4392:	fb00 f308 	mul.w	r3, r0, r8
    4396:	42b3      	cmp	r3, r6
    4398:	d909      	bls.n	43ae <__udivmoddi4+0x6a>
    439a:	19f6      	adds	r6, r6, r7
    439c:	f100 32ff 	add.w	r2, r0, #4294967295
    43a0:	f080 8122 	bcs.w	45e8 <__udivmoddi4+0x2a4>
    43a4:	42b3      	cmp	r3, r6
    43a6:	f240 811f 	bls.w	45e8 <__udivmoddi4+0x2a4>
    43aa:	3802      	subs	r0, #2
    43ac:	443e      	add	r6, r7
    43ae:	1af6      	subs	r6, r6, r3
    43b0:	b2a2      	uxth	r2, r4
    43b2:	fbb6 f3f9 	udiv	r3, r6, r9
    43b6:	fb09 6613 	mls	r6, r9, r3, r6
    43ba:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
    43be:	fb03 f808 	mul.w	r8, r3, r8
    43c2:	45a0      	cmp	r8, r4
    43c4:	d909      	bls.n	43da <__udivmoddi4+0x96>
    43c6:	19e4      	adds	r4, r4, r7
    43c8:	f103 32ff 	add.w	r2, r3, #4294967295
    43cc:	f080 810a 	bcs.w	45e4 <__udivmoddi4+0x2a0>
    43d0:	45a0      	cmp	r8, r4
    43d2:	f240 8107 	bls.w	45e4 <__udivmoddi4+0x2a0>
    43d6:	3b02      	subs	r3, #2
    43d8:	443c      	add	r4, r7
    43da:	ebc8 0404 	rsb	r4, r8, r4
    43de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    43e2:	2100      	movs	r1, #0
    43e4:	2d00      	cmp	r5, #0
    43e6:	d062      	beq.n	44ae <__udivmoddi4+0x16a>
    43e8:	fa24 f40e 	lsr.w	r4, r4, lr
    43ec:	2300      	movs	r3, #0
    43ee:	602c      	str	r4, [r5, #0]
    43f0:	606b      	str	r3, [r5, #4]
    43f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    43f6:	428b      	cmp	r3, r1
    43f8:	d907      	bls.n	440a <__udivmoddi4+0xc6>
    43fa:	2d00      	cmp	r5, #0
    43fc:	d055      	beq.n	44aa <__udivmoddi4+0x166>
    43fe:	2100      	movs	r1, #0
    4400:	e885 0041 	stmia.w	r5, {r0, r6}
    4404:	4608      	mov	r0, r1
    4406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    440a:	fab3 f183 	clz	r1, r3
    440e:	2900      	cmp	r1, #0
    4410:	f040 8090 	bne.w	4534 <__udivmoddi4+0x1f0>
    4414:	42b3      	cmp	r3, r6
    4416:	d302      	bcc.n	441e <__udivmoddi4+0xda>
    4418:	4282      	cmp	r2, r0
    441a:	f200 80f8 	bhi.w	460e <__udivmoddi4+0x2ca>
    441e:	1a84      	subs	r4, r0, r2
    4420:	eb66 0603 	sbc.w	r6, r6, r3
    4424:	2001      	movs	r0, #1
    4426:	46b4      	mov	ip, r6
    4428:	2d00      	cmp	r5, #0
    442a:	d040      	beq.n	44ae <__udivmoddi4+0x16a>
    442c:	e885 1010 	stmia.w	r5, {r4, ip}
    4430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4434:	b912      	cbnz	r2, 443c <__udivmoddi4+0xf8>
    4436:	2701      	movs	r7, #1
    4438:	fbb7 f7f2 	udiv	r7, r7, r2
    443c:	fab7 fe87 	clz	lr, r7
    4440:	f1be 0f00 	cmp.w	lr, #0
    4444:	d135      	bne.n	44b2 <__udivmoddi4+0x16e>
    4446:	1bf3      	subs	r3, r6, r7
    4448:	ea4f 4817 	mov.w	r8, r7, lsr #16
    444c:	fa1f fc87 	uxth.w	ip, r7
    4450:	2101      	movs	r1, #1
    4452:	fbb3 f0f8 	udiv	r0, r3, r8
    4456:	0c22      	lsrs	r2, r4, #16
    4458:	fb08 3610 	mls	r6, r8, r0, r3
    445c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    4460:	fb0c f300 	mul.w	r3, ip, r0
    4464:	42b3      	cmp	r3, r6
    4466:	d907      	bls.n	4478 <__udivmoddi4+0x134>
    4468:	19f6      	adds	r6, r6, r7
    446a:	f100 32ff 	add.w	r2, r0, #4294967295
    446e:	d202      	bcs.n	4476 <__udivmoddi4+0x132>
    4470:	42b3      	cmp	r3, r6
    4472:	f200 80ce 	bhi.w	4612 <__udivmoddi4+0x2ce>
    4476:	4610      	mov	r0, r2
    4478:	1af6      	subs	r6, r6, r3
    447a:	b2a2      	uxth	r2, r4
    447c:	fbb6 f3f8 	udiv	r3, r6, r8
    4480:	fb08 6613 	mls	r6, r8, r3, r6
    4484:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
    4488:	fb0c fc03 	mul.w	ip, ip, r3
    448c:	45a4      	cmp	ip, r4
    448e:	d907      	bls.n	44a0 <__udivmoddi4+0x15c>
    4490:	19e4      	adds	r4, r4, r7
    4492:	f103 32ff 	add.w	r2, r3, #4294967295
    4496:	d202      	bcs.n	449e <__udivmoddi4+0x15a>
    4498:	45a4      	cmp	ip, r4
    449a:	f200 80b5 	bhi.w	4608 <__udivmoddi4+0x2c4>
    449e:	4613      	mov	r3, r2
    44a0:	ebcc 0404 	rsb	r4, ip, r4
    44a4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    44a8:	e79c      	b.n	43e4 <__udivmoddi4+0xa0>
    44aa:	4629      	mov	r1, r5
    44ac:	4628      	mov	r0, r5
    44ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    44b2:	f1ce 0120 	rsb	r1, lr, #32
    44b6:	fa06 f30e 	lsl.w	r3, r6, lr
    44ba:	fa07 f70e 	lsl.w	r7, r7, lr
    44be:	fa20 f901 	lsr.w	r9, r0, r1
    44c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
    44c6:	40ce      	lsrs	r6, r1
    44c8:	ea49 0903 	orr.w	r9, r9, r3
    44cc:	fbb6 faf8 	udiv	sl, r6, r8
    44d0:	ea4f 4419 	mov.w	r4, r9, lsr #16
    44d4:	fb08 661a 	mls	r6, r8, sl, r6
    44d8:	fa1f fc87 	uxth.w	ip, r7
    44dc:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
    44e0:	fb0a f20c 	mul.w	r2, sl, ip
    44e4:	429a      	cmp	r2, r3
    44e6:	fa00 f40e 	lsl.w	r4, r0, lr
    44ea:	d90a      	bls.n	4502 <__udivmoddi4+0x1be>
    44ec:	19db      	adds	r3, r3, r7
    44ee:	f10a 31ff 	add.w	r1, sl, #4294967295
    44f2:	f080 8087 	bcs.w	4604 <__udivmoddi4+0x2c0>
    44f6:	429a      	cmp	r2, r3
    44f8:	f240 8084 	bls.w	4604 <__udivmoddi4+0x2c0>
    44fc:	f1aa 0a02 	sub.w	sl, sl, #2
    4500:	443b      	add	r3, r7
    4502:	1a9b      	subs	r3, r3, r2
    4504:	fa1f f989 	uxth.w	r9, r9
    4508:	fbb3 f1f8 	udiv	r1, r3, r8
    450c:	fb08 3311 	mls	r3, r8, r1, r3
    4510:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
    4514:	fb01 f60c 	mul.w	r6, r1, ip
    4518:	429e      	cmp	r6, r3
    451a:	d907      	bls.n	452c <__udivmoddi4+0x1e8>
    451c:	19db      	adds	r3, r3, r7
    451e:	f101 32ff 	add.w	r2, r1, #4294967295
    4522:	d26b      	bcs.n	45fc <__udivmoddi4+0x2b8>
    4524:	429e      	cmp	r6, r3
    4526:	d969      	bls.n	45fc <__udivmoddi4+0x2b8>
    4528:	3902      	subs	r1, #2
    452a:	443b      	add	r3, r7
    452c:	1b9b      	subs	r3, r3, r6
    452e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
    4532:	e78e      	b.n	4452 <__udivmoddi4+0x10e>
    4534:	f1c1 0e20 	rsb	lr, r1, #32
    4538:	fa22 f40e 	lsr.w	r4, r2, lr
    453c:	408b      	lsls	r3, r1
    453e:	4323      	orrs	r3, r4
    4540:	fa20 f70e 	lsr.w	r7, r0, lr
    4544:	fa06 f401 	lsl.w	r4, r6, r1
    4548:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    454c:	fa26 f60e 	lsr.w	r6, r6, lr
    4550:	433c      	orrs	r4, r7
    4552:	fbb6 f9fc 	udiv	r9, r6, ip
    4556:	0c27      	lsrs	r7, r4, #16
    4558:	fb0c 6619 	mls	r6, ip, r9, r6
    455c:	fa1f f883 	uxth.w	r8, r3
    4560:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    4564:	fb09 f708 	mul.w	r7, r9, r8
    4568:	42b7      	cmp	r7, r6
    456a:	fa02 f201 	lsl.w	r2, r2, r1
    456e:	fa00 fa01 	lsl.w	sl, r0, r1
    4572:	d908      	bls.n	4586 <__udivmoddi4+0x242>
    4574:	18f6      	adds	r6, r6, r3
    4576:	f109 30ff 	add.w	r0, r9, #4294967295
    457a:	d241      	bcs.n	4600 <__udivmoddi4+0x2bc>
    457c:	42b7      	cmp	r7, r6
    457e:	d93f      	bls.n	4600 <__udivmoddi4+0x2bc>
    4580:	f1a9 0902 	sub.w	r9, r9, #2
    4584:	441e      	add	r6, r3
    4586:	1bf6      	subs	r6, r6, r7
    4588:	b2a0      	uxth	r0, r4
    458a:	fbb6 f4fc 	udiv	r4, r6, ip
    458e:	fb0c 6614 	mls	r6, ip, r4, r6
    4592:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
    4596:	fb04 f808 	mul.w	r8, r4, r8
    459a:	45b8      	cmp	r8, r7
    459c:	d907      	bls.n	45ae <__udivmoddi4+0x26a>
    459e:	18ff      	adds	r7, r7, r3
    45a0:	f104 30ff 	add.w	r0, r4, #4294967295
    45a4:	d228      	bcs.n	45f8 <__udivmoddi4+0x2b4>
    45a6:	45b8      	cmp	r8, r7
    45a8:	d926      	bls.n	45f8 <__udivmoddi4+0x2b4>
    45aa:	3c02      	subs	r4, #2
    45ac:	441f      	add	r7, r3
    45ae:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
    45b2:	ebc8 0707 	rsb	r7, r8, r7
    45b6:	fba0 8902 	umull	r8, r9, r0, r2
    45ba:	454f      	cmp	r7, r9
    45bc:	4644      	mov	r4, r8
    45be:	464e      	mov	r6, r9
    45c0:	d314      	bcc.n	45ec <__udivmoddi4+0x2a8>
    45c2:	d029      	beq.n	4618 <__udivmoddi4+0x2d4>
    45c4:	b365      	cbz	r5, 4620 <__udivmoddi4+0x2dc>
    45c6:	ebba 0304 	subs.w	r3, sl, r4
    45ca:	eb67 0706 	sbc.w	r7, r7, r6
    45ce:	fa07 fe0e 	lsl.w	lr, r7, lr
    45d2:	40cb      	lsrs	r3, r1
    45d4:	40cf      	lsrs	r7, r1
    45d6:	ea4e 0303 	orr.w	r3, lr, r3
    45da:	e885 0088 	stmia.w	r5, {r3, r7}
    45de:	2100      	movs	r1, #0
    45e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    45e4:	4613      	mov	r3, r2
    45e6:	e6f8      	b.n	43da <__udivmoddi4+0x96>
    45e8:	4610      	mov	r0, r2
    45ea:	e6e0      	b.n	43ae <__udivmoddi4+0x6a>
    45ec:	ebb8 0402 	subs.w	r4, r8, r2
    45f0:	eb69 0603 	sbc.w	r6, r9, r3
    45f4:	3801      	subs	r0, #1
    45f6:	e7e5      	b.n	45c4 <__udivmoddi4+0x280>
    45f8:	4604      	mov	r4, r0
    45fa:	e7d8      	b.n	45ae <__udivmoddi4+0x26a>
    45fc:	4611      	mov	r1, r2
    45fe:	e795      	b.n	452c <__udivmoddi4+0x1e8>
    4600:	4681      	mov	r9, r0
    4602:	e7c0      	b.n	4586 <__udivmoddi4+0x242>
    4604:	468a      	mov	sl, r1
    4606:	e77c      	b.n	4502 <__udivmoddi4+0x1be>
    4608:	3b02      	subs	r3, #2
    460a:	443c      	add	r4, r7
    460c:	e748      	b.n	44a0 <__udivmoddi4+0x15c>
    460e:	4608      	mov	r0, r1
    4610:	e70a      	b.n	4428 <__udivmoddi4+0xe4>
    4612:	3802      	subs	r0, #2
    4614:	443e      	add	r6, r7
    4616:	e72f      	b.n	4478 <__udivmoddi4+0x134>
    4618:	45c2      	cmp	sl, r8
    461a:	d3e7      	bcc.n	45ec <__udivmoddi4+0x2a8>
    461c:	463e      	mov	r6, r7
    461e:	e7d1      	b.n	45c4 <__udivmoddi4+0x280>
    4620:	4629      	mov	r1, r5
    4622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4626:	bf00      	nop

00004628 <__aeabi_idiv0>:
    4628:	4770      	bx	lr
    462a:	bf00      	nop
    462c:	63696857 	.word	0x63696857
    4630:	454c2068 	.word	0x454c2068
    4634:	68732044 	.word	0x68732044
    4638:	646c756f 	.word	0x646c756f
    463c:	6c204920 	.word	0x6c204920
    4640:	74686769 	.word	0x74686769
    4644:	3f707520 	.word	0x3f707520
    4648:	00000000 	.word	0x00000000
    464c:	20632520 	.word	0x20632520
    4650:	00000a0d 	.word	0x00000a0d
    4654:	6e6b6e55 	.word	0x6e6b6e55
    4658:	206e776f 	.word	0x206e776f
    465c:	626d756e 	.word	0x626d756e
    4660:	20217265 	.word	0x20217265
    4664:	00000a0d 	.word	0x00000a0d
    4668:	00000043 	.word	0x00000043

0000466c <_global_impure_ptr>:
    466c:	20000030                                0.. 

00004670 <zeroes.6993>:
    4670:	30303030 30303030 30303030 30303030     0000000000000000
    4680:	33323130 37363534 42413938 46454443     0123456789ABCDEF
    4690:	00000000 33323130 37363534 62613938     ....0123456789ab
    46a0:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

000046b0 <blanks.6992>:
    46b0:	20202020 20202020 20202020 20202020                     

000046c0 <_init>:
    46c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46c2:	bf00      	nop
    46c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    46c6:	bc08      	pop	{r3}
    46c8:	469e      	mov	lr, r3
    46ca:	4770      	bx	lr

000046cc <__init_array_start>:
    46cc:	000027dd 	.word	0x000027dd

000046d0 <__frame_dummy_init_array_entry>:
    46d0:	000001a5                                ....

000046d4 <_fini>:
    46d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46d6:	bf00      	nop
    46d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    46da:	bc08      	pop	{r3}
    46dc:	469e      	mov	lr, r3
    46de:	4770      	bx	lr

000046e0 <__fini_array_start>:
    46e0:	00000181 	.word	0x00000181

Disassembly of section .relocate:

20000000 <bpm_ps_no_halt_exec>:
 */
RAMFUNC bool bpm_ps_no_halt_exec(Bpm *bpm, uint32_t pmcon)
{
	bool b_psok = false;
	bool b_timeout = false;
	BPM_UNLOCK(PMCON);
20000000:	4a07      	ldr	r2, [pc, #28]	; (20000020 <bpm_ps_no_halt_exec+0x20>)
20000002:	4b08      	ldr	r3, [pc, #32]	; (20000024 <bpm_ps_no_halt_exec+0x24>)
20000004:	619a      	str	r2, [r3, #24]
	bpm->BPM_PMCON = pmcon;
20000006:	61c1      	str	r1, [r0, #28]
	do {
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
20000008:	4619      	mov	r1, r3
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
2000000a:	4a07      	ldr	r2, [pc, #28]	; (20000028 <bpm_ps_no_halt_exec+0x28>)
	bool b_psok = false;
	bool b_timeout = false;
	BPM_UNLOCK(PMCON);
	bpm->BPM_PMCON = pmcon;
	do {
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
2000000c:	6948      	ldr	r0, [r1, #20]
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
2000000e:	6813      	ldr	r3, [r2, #0]
20000010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
	} while (!b_psok && !b_timeout);
20000014:	f010 0001 	ands.w	r0, r0, #1
20000018:	d101      	bne.n	2000001e <bpm_ps_no_halt_exec+0x1e>
2000001a:	2b00      	cmp	r3, #0
2000001c:	d0f6      	beq.n	2000000c <bpm_ps_no_halt_exec+0xc>
	return b_psok;
}
2000001e:	4770      	bx	lr
20000020:	aa00001c 	.word	0xaa00001c
20000024:	400f0000 	.word	0x400f0000
20000028:	e000e010 	.word	0xe000e010

2000002c <g_interrupt_enabled>:
2000002c:	00000001                                ....

20000030 <impure_data>:
20000030:	00000000 2000031c 20000384 200003ec     ....... ... ... 
	...
20000064:	00004668 00000000 00000000 00000000     hF..............
	...
200000d8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200000e8:	0005deec 0000000b 00000000 00000000     ................
	...

20000458 <_impure_ptr>:
20000458:	20000030                                0.. 

2000045c <lc_ctype_charset>:
2000045c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2000047c <__mb_cur_max>:
2000047c:	00000001                                ....

20000480 <__malloc_av_>:
	...
20000488:	20000480 20000480 20000488 20000488     ... ... ... ... 
20000498:	20000490 20000490 20000498 20000498     ... ... ... ... 
200004a8:	200004a0 200004a0 200004a8 200004a8     ... ... ... ... 
200004b8:	200004b0 200004b0 200004b8 200004b8     ... ... ... ... 
200004c8:	200004c0 200004c0 200004c8 200004c8     ... ... ... ... 
200004d8:	200004d0 200004d0 200004d8 200004d8     ... ... ... ... 
200004e8:	200004e0 200004e0 200004e8 200004e8     ... ... ... ... 
200004f8:	200004f0 200004f0 200004f8 200004f8     ... ... ... ... 
20000508:	20000500 20000500 20000508 20000508     ... ... ... ... 
20000518:	20000510 20000510 20000518 20000518     ... ... ... ... 
20000528:	20000520 20000520 20000528 20000528      ..  .. (.. (.. 
20000538:	20000530 20000530 20000538 20000538     0.. 0.. 8.. 8.. 
20000548:	20000540 20000540 20000548 20000548     @.. @.. H.. H.. 
20000558:	20000550 20000550 20000558 20000558     P.. P.. X.. X.. 
20000568:	20000560 20000560 20000568 20000568     `.. `.. h.. h.. 
20000578:	20000570 20000570 20000578 20000578     p.. p.. x.. x.. 
20000588:	20000580 20000580 20000588 20000588     ... ... ... ... 
20000598:	20000590 20000590 20000598 20000598     ... ... ... ... 
200005a8:	200005a0 200005a0 200005a8 200005a8     ... ... ... ... 
200005b8:	200005b0 200005b0 200005b8 200005b8     ... ... ... ... 
200005c8:	200005c0 200005c0 200005c8 200005c8     ... ... ... ... 
200005d8:	200005d0 200005d0 200005d8 200005d8     ... ... ... ... 
200005e8:	200005e0 200005e0 200005e8 200005e8     ... ... ... ... 
200005f8:	200005f0 200005f0 200005f8 200005f8     ... ... ... ... 
20000608:	20000600 20000600 20000608 20000608     ... ... ... ... 
20000618:	20000610 20000610 20000618 20000618     ... ... ... ... 
20000628:	20000620 20000620 20000628 20000628      ..  .. (.. (.. 
20000638:	20000630 20000630 20000638 20000638     0.. 0.. 8.. 8.. 
20000648:	20000640 20000640 20000648 20000648     @.. @.. H.. H.. 
20000658:	20000650 20000650 20000658 20000658     P.. P.. X.. X.. 
20000668:	20000660 20000660 20000668 20000668     `.. `.. h.. h.. 
20000678:	20000670 20000670 20000678 20000678     p.. p.. x.. x.. 
20000688:	20000680 20000680 20000688 20000688     ... ... ... ... 
20000698:	20000690 20000690 20000698 20000698     ... ... ... ... 
200006a8:	200006a0 200006a0 200006a8 200006a8     ... ... ... ... 
200006b8:	200006b0 200006b0 200006b8 200006b8     ... ... ... ... 
200006c8:	200006c0 200006c0 200006c8 200006c8     ... ... ... ... 
200006d8:	200006d0 200006d0 200006d8 200006d8     ... ... ... ... 
200006e8:	200006e0 200006e0 200006e8 200006e8     ... ... ... ... 
200006f8:	200006f0 200006f0 200006f8 200006f8     ... ... ... ... 
20000708:	20000700 20000700 20000708 20000708     ... ... ... ... 
20000718:	20000710 20000710 20000718 20000718     ... ... ... ... 
20000728:	20000720 20000720 20000728 20000728      ..  .. (.. (.. 
20000738:	20000730 20000730 20000738 20000738     0.. 0.. 8.. 8.. 
20000748:	20000740 20000740 20000748 20000748     @.. @.. H.. H.. 
20000758:	20000750 20000750 20000758 20000758     P.. P.. X.. X.. 
20000768:	20000760 20000760 20000768 20000768     `.. `.. h.. h.. 
20000778:	20000770 20000770 20000778 20000778     p.. p.. x.. x.. 
20000788:	20000780 20000780 20000788 20000788     ... ... ... ... 
20000798:	20000790 20000790 20000798 20000798     ... ... ... ... 
200007a8:	200007a0 200007a0 200007a8 200007a8     ... ... ... ... 
200007b8:	200007b0 200007b0 200007b8 200007b8     ... ... ... ... 
200007c8:	200007c0 200007c0 200007c8 200007c8     ... ... ... ... 
200007d8:	200007d0 200007d0 200007d8 200007d8     ... ... ... ... 
200007e8:	200007e0 200007e0 200007e8 200007e8     ... ... ... ... 
200007f8:	200007f0 200007f0 200007f8 200007f8     ... ... ... ... 
20000808:	20000800 20000800 20000808 20000808     ... ... ... ... 
20000818:	20000810 20000810 20000818 20000818     ... ... ... ... 
20000828:	20000820 20000820 20000828 20000828      ..  .. (.. (.. 
20000838:	20000830 20000830 20000838 20000838     0.. 0.. 8.. 8.. 
20000848:	20000840 20000840 20000848 20000848     @.. @.. H.. H.. 
20000858:	20000850 20000850 20000858 20000858     P.. P.. X.. X.. 
20000868:	20000860 20000860 20000868 20000868     `.. `.. h.. h.. 
20000878:	20000870 20000870 20000878 20000878     p.. p.. x.. x.. 

20000888 <__malloc_trim_threshold>:
20000888:	00020000                                ....

2000088c <__malloc_sbrk_base>:
2000088c:	ffffffff                                ....

20000890 <__wctomb>:
20000890:	000040dd                                .@..
